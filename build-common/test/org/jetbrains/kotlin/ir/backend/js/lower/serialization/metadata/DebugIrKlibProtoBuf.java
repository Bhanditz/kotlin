// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/backend.js/src/org/jetbrains/kotlin/ir/backend/js/lower/serialization/ir/ir.debug.proto

package org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata;

public final class DebugIrKlibProtoBuf {
  private DebugIrKlibProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolKind}
   */
  public enum IrSymbolKind
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>FUNCTION_SYMBOL = 1;</code>
     */
    FUNCTION_SYMBOL(0, 1),
    /**
     * <code>CONSTRUCTOR_SYMBOL = 2;</code>
     */
    CONSTRUCTOR_SYMBOL(1, 2),
    /**
     * <code>ENUM_ENTRY_SYMBOL = 3;</code>
     */
    ENUM_ENTRY_SYMBOL(2, 3),
    /**
     * <code>FIELD_SYMBOL = 4;</code>
     */
    FIELD_SYMBOL(3, 4),
    /**
     * <code>VALUE_PARAMETER_SYMBOL = 5;</code>
     */
    VALUE_PARAMETER_SYMBOL(4, 5),
    /**
     * <code>RETURNABLE_BLOCK_SYMBOL = 6;</code>
     */
    RETURNABLE_BLOCK_SYMBOL(5, 6),
    /**
     * <code>CLASS_SYMBOL = 7;</code>
     */
    CLASS_SYMBOL(6, 7),
    /**
     * <code>TYPE_PARAMETER_SYMBOL = 8;</code>
     */
    TYPE_PARAMETER_SYMBOL(7, 8),
    /**
     * <code>VARIABLE_SYMBOL = 9;</code>
     */
    VARIABLE_SYMBOL(8, 9),
    /**
     * <code>ANONYMOUS_INIT_SYMBOL = 10;</code>
     */
    ANONYMOUS_INIT_SYMBOL(9, 10),
    /**
     * <code>STANDALONE_FIELD_SYMBOL = 11;</code>
     *
     * <pre>
     * For fields without properties. WrappedFieldDescriptor, rather than WrappedPropertyDescriptor.
     * </pre>
     */
    STANDALONE_FIELD_SYMBOL(10, 11),
    /**
     * <code>RECEIVER_PARAMETER_SYMBOL = 12;</code>
     *
     * <pre>
     * ReceiverParameterDescriptor rather than ValueParameterDescriptor.
     * </pre>
     */
    RECEIVER_PARAMETER_SYMBOL(11, 12),
    ;

    /**
     * <code>FUNCTION_SYMBOL = 1;</code>
     */
    public static final int FUNCTION_SYMBOL_VALUE = 1;
    /**
     * <code>CONSTRUCTOR_SYMBOL = 2;</code>
     */
    public static final int CONSTRUCTOR_SYMBOL_VALUE = 2;
    /**
     * <code>ENUM_ENTRY_SYMBOL = 3;</code>
     */
    public static final int ENUM_ENTRY_SYMBOL_VALUE = 3;
    /**
     * <code>FIELD_SYMBOL = 4;</code>
     */
    public static final int FIELD_SYMBOL_VALUE = 4;
    /**
     * <code>VALUE_PARAMETER_SYMBOL = 5;</code>
     */
    public static final int VALUE_PARAMETER_SYMBOL_VALUE = 5;
    /**
     * <code>RETURNABLE_BLOCK_SYMBOL = 6;</code>
     */
    public static final int RETURNABLE_BLOCK_SYMBOL_VALUE = 6;
    /**
     * <code>CLASS_SYMBOL = 7;</code>
     */
    public static final int CLASS_SYMBOL_VALUE = 7;
    /**
     * <code>TYPE_PARAMETER_SYMBOL = 8;</code>
     */
    public static final int TYPE_PARAMETER_SYMBOL_VALUE = 8;
    /**
     * <code>VARIABLE_SYMBOL = 9;</code>
     */
    public static final int VARIABLE_SYMBOL_VALUE = 9;
    /**
     * <code>ANONYMOUS_INIT_SYMBOL = 10;</code>
     */
    public static final int ANONYMOUS_INIT_SYMBOL_VALUE = 10;
    /**
     * <code>STANDALONE_FIELD_SYMBOL = 11;</code>
     *
     * <pre>
     * For fields without properties. WrappedFieldDescriptor, rather than WrappedPropertyDescriptor.
     * </pre>
     */
    public static final int STANDALONE_FIELD_SYMBOL_VALUE = 11;
    /**
     * <code>RECEIVER_PARAMETER_SYMBOL = 12;</code>
     *
     * <pre>
     * ReceiverParameterDescriptor rather than ValueParameterDescriptor.
     * </pre>
     */
    public static final int RECEIVER_PARAMETER_SYMBOL_VALUE = 12;


    public final int getNumber() { return value; }

    public static IrSymbolKind valueOf(int value) {
      switch (value) {
        case 1: return FUNCTION_SYMBOL;
        case 2: return CONSTRUCTOR_SYMBOL;
        case 3: return ENUM_ENTRY_SYMBOL;
        case 4: return FIELD_SYMBOL;
        case 5: return VALUE_PARAMETER_SYMBOL;
        case 6: return RETURNABLE_BLOCK_SYMBOL;
        case 7: return CLASS_SYMBOL;
        case 8: return TYPE_PARAMETER_SYMBOL;
        case 9: return VARIABLE_SYMBOL;
        case 10: return ANONYMOUS_INIT_SYMBOL;
        case 11: return STANDALONE_FIELD_SYMBOL;
        case 12: return RECEIVER_PARAMETER_SYMBOL;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrSymbolKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrSymbolKind>
        internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrSymbolKind>() {
            public IrSymbolKind findValueByNumber(int number) {
              return IrSymbolKind.valueOf(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.getDescriptor().getEnumTypes().get(0);
    }

    private static final IrSymbolKind[] VALUES = values();

    public static IrSymbolKind valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private IrSymbolKind(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolKind)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance}
   *
   * <pre>
   * Should we import metadata variance, or better stay separate?
   * </pre>
   */
  public enum IrTypeVariance
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>IN = 0;</code>
     */
    IN(0, 0),
    /**
     * <code>OUT = 1;</code>
     */
    OUT(1, 1),
    /**
     * <code>INV = 2;</code>
     */
    INV(2, 2),
    ;

    /**
     * <code>IN = 0;</code>
     */
    public static final int IN_VALUE = 0;
    /**
     * <code>OUT = 1;</code>
     */
    public static final int OUT_VALUE = 1;
    /**
     * <code>INV = 2;</code>
     */
    public static final int INV_VALUE = 2;


    public final int getNumber() { return value; }

    public static IrTypeVariance valueOf(int value) {
      switch (value) {
        case 0: return IN;
        case 1: return OUT;
        case 2: return INV;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrTypeVariance>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrTypeVariance>
        internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrTypeVariance>() {
            public IrTypeVariance findValueByNumber(int number) {
              return IrTypeVariance.valueOf(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.getDescriptor().getEnumTypes().get(1);
    }

    private static final IrTypeVariance[] VALUES = values();

    public static IrTypeVariance valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private IrTypeVariance(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOperator}
   */
  public enum IrTypeOperator
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>CAST = 1;</code>
     */
    CAST(0, 1),
    /**
     * <code>IMPLICIT_CAST = 2;</code>
     */
    IMPLICIT_CAST(1, 2),
    /**
     * <code>IMPLICIT_NOTNULL = 3;</code>
     */
    IMPLICIT_NOTNULL(2, 3),
    /**
     * <code>IMPLICIT_COERCION_TO_UNIT = 4;</code>
     */
    IMPLICIT_COERCION_TO_UNIT(3, 4),
    /**
     * <code>IMPLICIT_INTEGER_COERCION = 5;</code>
     */
    IMPLICIT_INTEGER_COERCION(4, 5),
    /**
     * <code>SAFE_CAST = 6;</code>
     */
    SAFE_CAST(5, 6),
    /**
     * <code>INSTANCEOF = 7;</code>
     */
    INSTANCEOF(6, 7),
    /**
     * <code>NOT_INSTANCEOF = 8;</code>
     */
    NOT_INSTANCEOF(7, 8),
    /**
     * <code>SAM_CONVERSION = 9;</code>
     */
    SAM_CONVERSION(8, 9),
    ;

    /**
     * <code>CAST = 1;</code>
     */
    public static final int CAST_VALUE = 1;
    /**
     * <code>IMPLICIT_CAST = 2;</code>
     */
    public static final int IMPLICIT_CAST_VALUE = 2;
    /**
     * <code>IMPLICIT_NOTNULL = 3;</code>
     */
    public static final int IMPLICIT_NOTNULL_VALUE = 3;
    /**
     * <code>IMPLICIT_COERCION_TO_UNIT = 4;</code>
     */
    public static final int IMPLICIT_COERCION_TO_UNIT_VALUE = 4;
    /**
     * <code>IMPLICIT_INTEGER_COERCION = 5;</code>
     */
    public static final int IMPLICIT_INTEGER_COERCION_VALUE = 5;
    /**
     * <code>SAFE_CAST = 6;</code>
     */
    public static final int SAFE_CAST_VALUE = 6;
    /**
     * <code>INSTANCEOF = 7;</code>
     */
    public static final int INSTANCEOF_VALUE = 7;
    /**
     * <code>NOT_INSTANCEOF = 8;</code>
     */
    public static final int NOT_INSTANCEOF_VALUE = 8;
    /**
     * <code>SAM_CONVERSION = 9;</code>
     */
    public static final int SAM_CONVERSION_VALUE = 9;


    public final int getNumber() { return value; }

    public static IrTypeOperator valueOf(int value) {
      switch (value) {
        case 1: return CAST;
        case 2: return IMPLICIT_CAST;
        case 3: return IMPLICIT_NOTNULL;
        case 4: return IMPLICIT_COERCION_TO_UNIT;
        case 5: return IMPLICIT_INTEGER_COERCION;
        case 6: return SAFE_CAST;
        case 7: return INSTANCEOF;
        case 8: return NOT_INSTANCEOF;
        case 9: return SAM_CONVERSION;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrTypeOperator>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrTypeOperator>
        internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrTypeOperator>() {
            public IrTypeOperator findValueByNumber(int number) {
              return IrTypeOperator.valueOf(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.getDescriptor().getEnumTypes().get(2);
    }

    private static final IrTypeOperator[] VALUES = values();

    public static IrTypeOperator valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private IrTypeOperator(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOperator)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ClassKind}
   */
  public enum ClassKind
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>CLASS = 1;</code>
     */
    CLASS(0, 1),
    /**
     * <code>INTERFACE = 2;</code>
     */
    INTERFACE(1, 2),
    /**
     * <code>ENUM_CLASS = 3;</code>
     */
    ENUM_CLASS(2, 3),
    /**
     * <code>ENUM_ENTRY = 4;</code>
     */
    ENUM_ENTRY(3, 4),
    /**
     * <code>ANNOTATION_CLASS = 5;</code>
     */
    ANNOTATION_CLASS(4, 5),
    /**
     * <code>OBJECT = 6;</code>
     */
    OBJECT(5, 6),
    ;

    /**
     * <code>CLASS = 1;</code>
     */
    public static final int CLASS_VALUE = 1;
    /**
     * <code>INTERFACE = 2;</code>
     */
    public static final int INTERFACE_VALUE = 2;
    /**
     * <code>ENUM_CLASS = 3;</code>
     */
    public static final int ENUM_CLASS_VALUE = 3;
    /**
     * <code>ENUM_ENTRY = 4;</code>
     */
    public static final int ENUM_ENTRY_VALUE = 4;
    /**
     * <code>ANNOTATION_CLASS = 5;</code>
     */
    public static final int ANNOTATION_CLASS_VALUE = 5;
    /**
     * <code>OBJECT = 6;</code>
     */
    public static final int OBJECT_VALUE = 6;


    public final int getNumber() { return value; }

    public static ClassKind valueOf(int value) {
      switch (value) {
        case 1: return CLASS;
        case 2: return INTERFACE;
        case 3: return ENUM_CLASS;
        case 4: return ENUM_ENTRY;
        case 5: return ANNOTATION_CLASS;
        case 6: return OBJECT;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ClassKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ClassKind>
        internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ClassKind>() {
            public ClassKind findValueByNumber(int number) {
              return ClassKind.valueOf(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.getDescriptor().getEnumTypes().get(3);
    }

    private static final ClassKind[] VALUES = values();

    public static ClassKind valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ClassKind(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ClassKind)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind}
   *
   * <pre>
   * It is ModalityKind to not clash with Modality in descriptor metadata.
   * </pre>
   */
  public enum ModalityKind
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>FINAL_MODALITY = 1;</code>
     */
    FINAL_MODALITY(0, 1),
    /**
     * <code>SEALED_MODALITY = 2;</code>
     */
    SEALED_MODALITY(1, 2),
    /**
     * <code>OPEN_MODALITY = 3;</code>
     */
    OPEN_MODALITY(2, 3),
    /**
     * <code>ABSTRACT_MODALITY = 4;</code>
     */
    ABSTRACT_MODALITY(3, 4),
    ;

    /**
     * <code>FINAL_MODALITY = 1;</code>
     */
    public static final int FINAL_MODALITY_VALUE = 1;
    /**
     * <code>SEALED_MODALITY = 2;</code>
     */
    public static final int SEALED_MODALITY_VALUE = 2;
    /**
     * <code>OPEN_MODALITY = 3;</code>
     */
    public static final int OPEN_MODALITY_VALUE = 3;
    /**
     * <code>ABSTRACT_MODALITY = 4;</code>
     */
    public static final int ABSTRACT_MODALITY_VALUE = 4;


    public final int getNumber() { return value; }

    public static ModalityKind valueOf(int value) {
      switch (value) {
        case 1: return FINAL_MODALITY;
        case 2: return SEALED_MODALITY;
        case 3: return OPEN_MODALITY;
        case 4: return ABSTRACT_MODALITY;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ModalityKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ModalityKind>
        internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ModalityKind>() {
            public ModalityKind findValueByNumber(int number) {
              return ModalityKind.valueOf(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.getDescriptor().getEnumTypes().get(4);
    }

    private static final ModalityKind[] VALUES = values();

    public static ModalityKind valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ModalityKind(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBodyKind}
   */
  public enum IrSyntheticBodyKind
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>ENUM_VALUES = 1;</code>
     */
    ENUM_VALUES(0, 1),
    /**
     * <code>ENUM_VALUEOF = 2;</code>
     */
    ENUM_VALUEOF(1, 2),
    ;

    /**
     * <code>ENUM_VALUES = 1;</code>
     */
    public static final int ENUM_VALUES_VALUE = 1;
    /**
     * <code>ENUM_VALUEOF = 2;</code>
     */
    public static final int ENUM_VALUEOF_VALUE = 2;


    public final int getNumber() { return value; }

    public static IrSyntheticBodyKind valueOf(int value) {
      switch (value) {
        case 1: return ENUM_VALUES;
        case 2: return ENUM_VALUEOF;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrSyntheticBodyKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrSyntheticBodyKind>
        internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrSyntheticBodyKind>() {
            public IrSyntheticBodyKind findValueByNumber(int number) {
              return IrSyntheticBodyKind.valueOf(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.getDescriptor().getEnumTypes().get(5);
    }

    private static final IrSyntheticBodyKind[] VALUES = values();

    public static IrSyntheticBodyKind valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private IrSyntheticBodyKind(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBodyKind)
  }

  public interface DescriptorReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required string package_fq_name = 1;</code>
     */
    boolean hasPackageFqName();
    /**
     * <code>required string package_fq_name = 1;</code>
     */
    java.lang.String getPackageFqName();
    /**
     * <code>required string package_fq_name = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqNameBytes();

    /**
     * <code>required string class_fq_name = 2;</code>
     */
    boolean hasClassFqName();
    /**
     * <code>required string class_fq_name = 2;</code>
     */
    java.lang.String getClassFqName();
    /**
     * <code>required string class_fq_name = 2;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getClassFqNameBytes();

    /**
     * <code>required string name = 3;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 3;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
     */
    boolean hasUniqId();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getUniqId();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getUniqIdOrBuilder();

    /**
     * <code>optional bool is_getter = 5 [default = false];</code>
     */
    boolean hasIsGetter();
    /**
     * <code>optional bool is_getter = 5 [default = false];</code>
     */
    boolean getIsGetter();

    /**
     * <code>optional bool is_setter = 6 [default = false];</code>
     */
    boolean hasIsSetter();
    /**
     * <code>optional bool is_setter = 6 [default = false];</code>
     */
    boolean getIsSetter();

    /**
     * <code>optional bool is_backing_field = 7 [default = false];</code>
     */
    boolean hasIsBackingField();
    /**
     * <code>optional bool is_backing_field = 7 [default = false];</code>
     */
    boolean getIsBackingField();

    /**
     * <code>optional bool is_fake_override = 8 [default = false];</code>
     */
    boolean hasIsFakeOverride();
    /**
     * <code>optional bool is_fake_override = 8 [default = false];</code>
     */
    boolean getIsFakeOverride();

    /**
     * <code>optional bool is_default_constructor = 9 [default = false];</code>
     */
    boolean hasIsDefaultConstructor();
    /**
     * <code>optional bool is_default_constructor = 9 [default = false];</code>
     */
    boolean getIsDefaultConstructor();

    /**
     * <code>optional bool is_enum_entry = 10 [default = false];</code>
     */
    boolean hasIsEnumEntry();
    /**
     * <code>optional bool is_enum_entry = 10 [default = false];</code>
     */
    boolean getIsEnumEntry();

    /**
     * <code>optional bool is_enum_special = 11 [default = false];</code>
     */
    boolean hasIsEnumSpecial();
    /**
     * <code>optional bool is_enum_special = 11 [default = false];</code>
     */
    boolean getIsEnumSpecial();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference}
   */
  public static final class DescriptorReference extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference)
      DescriptorReferenceOrBuilder {
    // Use DescriptorReference.newBuilder() to construct.
    private DescriptorReference(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DescriptorReference(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DescriptorReference defaultInstance;
    public static DescriptorReference getDefaultInstance() {
      return defaultInstance;
    }

    public DescriptorReference getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DescriptorReference(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              packageFqName_ = bs;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              classFqName_ = bs;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              name_ = bs;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = uniqId_.toBuilder();
              }
              uniqId_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(uniqId_);
                uniqId_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              isGetter_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              isSetter_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              isBackingField_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              isFakeOverride_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              isDefaultConstructor_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              isEnumEntry_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              isEnumSpecial_ = input.readBool();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorReference_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<DescriptorReference> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<DescriptorReference>() {
      public DescriptorReference parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new DescriptorReference(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<DescriptorReference> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PACKAGE_FQ_NAME_FIELD_NUMBER = 1;
    private java.lang.Object packageFqName_;
    /**
     * <code>required string package_fq_name = 1;</code>
     */
    public boolean hasPackageFqName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string package_fq_name = 1;</code>
     */
    public java.lang.String getPackageFqName() {
      java.lang.Object ref = packageFqName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          packageFqName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string package_fq_name = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqNameBytes() {
      java.lang.Object ref = packageFqName_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        packageFqName_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int CLASS_FQ_NAME_FIELD_NUMBER = 2;
    private java.lang.Object classFqName_;
    /**
     * <code>required string class_fq_name = 2;</code>
     */
    public boolean hasClassFqName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string class_fq_name = 2;</code>
     */
    public java.lang.String getClassFqName() {
      java.lang.Object ref = classFqName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          classFqName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string class_fq_name = 2;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getClassFqNameBytes() {
      java.lang.Object ref = classFqName_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        classFqName_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>required string name = 3;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string name = 3;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int UNIQ_ID_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId uniqId_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
     */
    public boolean hasUniqId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getUniqId() {
      return uniqId_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getUniqIdOrBuilder() {
      return uniqId_;
    }

    public static final int IS_GETTER_FIELD_NUMBER = 5;
    private boolean isGetter_;
    /**
     * <code>optional bool is_getter = 5 [default = false];</code>
     */
    public boolean hasIsGetter() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool is_getter = 5 [default = false];</code>
     */
    public boolean getIsGetter() {
      return isGetter_;
    }

    public static final int IS_SETTER_FIELD_NUMBER = 6;
    private boolean isSetter_;
    /**
     * <code>optional bool is_setter = 6 [default = false];</code>
     */
    public boolean hasIsSetter() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool is_setter = 6 [default = false];</code>
     */
    public boolean getIsSetter() {
      return isSetter_;
    }

    public static final int IS_BACKING_FIELD_FIELD_NUMBER = 7;
    private boolean isBackingField_;
    /**
     * <code>optional bool is_backing_field = 7 [default = false];</code>
     */
    public boolean hasIsBackingField() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool is_backing_field = 7 [default = false];</code>
     */
    public boolean getIsBackingField() {
      return isBackingField_;
    }

    public static final int IS_FAKE_OVERRIDE_FIELD_NUMBER = 8;
    private boolean isFakeOverride_;
    /**
     * <code>optional bool is_fake_override = 8 [default = false];</code>
     */
    public boolean hasIsFakeOverride() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool is_fake_override = 8 [default = false];</code>
     */
    public boolean getIsFakeOverride() {
      return isFakeOverride_;
    }

    public static final int IS_DEFAULT_CONSTRUCTOR_FIELD_NUMBER = 9;
    private boolean isDefaultConstructor_;
    /**
     * <code>optional bool is_default_constructor = 9 [default = false];</code>
     */
    public boolean hasIsDefaultConstructor() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool is_default_constructor = 9 [default = false];</code>
     */
    public boolean getIsDefaultConstructor() {
      return isDefaultConstructor_;
    }

    public static final int IS_ENUM_ENTRY_FIELD_NUMBER = 10;
    private boolean isEnumEntry_;
    /**
     * <code>optional bool is_enum_entry = 10 [default = false];</code>
     */
    public boolean hasIsEnumEntry() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool is_enum_entry = 10 [default = false];</code>
     */
    public boolean getIsEnumEntry() {
      return isEnumEntry_;
    }

    public static final int IS_ENUM_SPECIAL_FIELD_NUMBER = 11;
    private boolean isEnumSpecial_;
    /**
     * <code>optional bool is_enum_special = 11 [default = false];</code>
     */
    public boolean hasIsEnumSpecial() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool is_enum_special = 11 [default = false];</code>
     */
    public boolean getIsEnumSpecial() {
      return isEnumSpecial_;
    }

    private void initFields() {
      packageFqName_ = "";
      classFqName_ = "";
      name_ = "";
      uniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
      isGetter_ = false;
      isSetter_ = false;
      isBackingField_ = false;
      isFakeOverride_ = false;
      isDefaultConstructor_ = false;
      isEnumEntry_ = false;
      isEnumSpecial_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPackageFqName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasClassFqName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasUniqId()) {
        if (!getUniqId().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getPackageFqNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getClassFqNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, uniqId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, isGetter_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, isSetter_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, isBackingField_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, isFakeOverride_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, isDefaultConstructor_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, isEnumEntry_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, isEnumSpecial_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(1, getPackageFqNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(2, getClassFqNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, uniqId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(5, isGetter_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(6, isSetter_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(7, isBackingField_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(8, isFakeOverride_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(9, isDefaultConstructor_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(10, isEnumEntry_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(11, isEnumSpecial_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorReference_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUniqIdFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        packageFqName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        classFqName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        if (uniqIdBuilder_ == null) {
          uniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
        } else {
          uniqIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        isGetter_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        isSetter_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        isBackingField_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        isFakeOverride_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        isDefaultConstructor_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        isEnumEntry_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        isEnumSpecial_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorReference_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.packageFqName_ = packageFqName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.classFqName_ = classFqName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (uniqIdBuilder_ == null) {
          result.uniqId_ = uniqId_;
        } else {
          result.uniqId_ = uniqIdBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isGetter_ = isGetter_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.isSetter_ = isSetter_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isBackingField_ = isBackingField_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.isFakeOverride_ = isFakeOverride_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.isDefaultConstructor_ = isDefaultConstructor_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isEnumEntry_ = isEnumEntry_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isEnumSpecial_ = isEnumSpecial_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance()) return this;
        if (other.hasPackageFqName()) {
          bitField0_ |= 0x00000001;
          packageFqName_ = other.packageFqName_;
          onChanged();
        }
        if (other.hasClassFqName()) {
          bitField0_ |= 0x00000002;
          classFqName_ = other.classFqName_;
          onChanged();
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasUniqId()) {
          mergeUniqId(other.getUniqId());
        }
        if (other.hasIsGetter()) {
          setIsGetter(other.getIsGetter());
        }
        if (other.hasIsSetter()) {
          setIsSetter(other.getIsSetter());
        }
        if (other.hasIsBackingField()) {
          setIsBackingField(other.getIsBackingField());
        }
        if (other.hasIsFakeOverride()) {
          setIsFakeOverride(other.getIsFakeOverride());
        }
        if (other.hasIsDefaultConstructor()) {
          setIsDefaultConstructor(other.getIsDefaultConstructor());
        }
        if (other.hasIsEnumEntry()) {
          setIsEnumEntry(other.getIsEnumEntry());
        }
        if (other.hasIsEnumSpecial()) {
          setIsEnumSpecial(other.getIsEnumSpecial());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPackageFqName()) {
          
          return false;
        }
        if (!hasClassFqName()) {
          
          return false;
        }
        if (!hasName()) {
          
          return false;
        }
        if (hasUniqId()) {
          if (!getUniqId().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object packageFqName_ = "";
      /**
       * <code>required string package_fq_name = 1;</code>
       */
      public boolean hasPackageFqName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string package_fq_name = 1;</code>
       */
      public java.lang.String getPackageFqName() {
        java.lang.Object ref = packageFqName_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            packageFqName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string package_fq_name = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getPackageFqNameBytes() {
        java.lang.Object ref = packageFqName_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          packageFqName_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string package_fq_name = 1;</code>
       */
      public Builder setPackageFqName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        packageFqName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string package_fq_name = 1;</code>
       */
      public Builder clearPackageFqName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        packageFqName_ = getDefaultInstance().getPackageFqName();
        onChanged();
        return this;
      }
      /**
       * <code>required string package_fq_name = 1;</code>
       */
      public Builder setPackageFqNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        packageFqName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object classFqName_ = "";
      /**
       * <code>required string class_fq_name = 2;</code>
       */
      public boolean hasClassFqName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string class_fq_name = 2;</code>
       */
      public java.lang.String getClassFqName() {
        java.lang.Object ref = classFqName_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            classFqName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string class_fq_name = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getClassFqNameBytes() {
        java.lang.Object ref = classFqName_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          classFqName_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string class_fq_name = 2;</code>
       */
      public Builder setClassFqName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        classFqName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string class_fq_name = 2;</code>
       */
      public Builder clearClassFqName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        classFqName_ = getDefaultInstance().getClassFqName();
        onChanged();
        return this;
      }
      /**
       * <code>required string class_fq_name = 2;</code>
       */
      public Builder setClassFqNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        classFqName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 3;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string name = 3;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 3;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 3;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 3;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId uniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> uniqIdBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
       */
      public boolean hasUniqId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getUniqId() {
        if (uniqIdBuilder_ == null) {
          return uniqId_;
        } else {
          return uniqIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
       */
      public Builder setUniqId(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId value) {
        if (uniqIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          uniqId_ = value;
          onChanged();
        } else {
          uniqIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
       */
      public Builder setUniqId(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder builderForValue) {
        if (uniqIdBuilder_ == null) {
          uniqId_ = builderForValue.build();
          onChanged();
        } else {
          uniqIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
       */
      public Builder mergeUniqId(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId value) {
        if (uniqIdBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              uniqId_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance()) {
            uniqId_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.newBuilder(uniqId_).mergeFrom(value).buildPartial();
          } else {
            uniqId_ = value;
          }
          onChanged();
        } else {
          uniqIdBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
       */
      public Builder clearUniqId() {
        if (uniqIdBuilder_ == null) {
          uniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
          onChanged();
        } else {
          uniqIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder getUniqIdBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getUniqIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getUniqIdOrBuilder() {
        if (uniqIdBuilder_ != null) {
          return uniqIdBuilder_.getMessageOrBuilder();
        } else {
          return uniqId_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> 
          getUniqIdFieldBuilder() {
        if (uniqIdBuilder_ == null) {
          uniqIdBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder>(
                  getUniqId(),
                  getParentForChildren(),
                  isClean());
          uniqId_ = null;
        }
        return uniqIdBuilder_;
      }

      private boolean isGetter_ ;
      /**
       * <code>optional bool is_getter = 5 [default = false];</code>
       */
      public boolean hasIsGetter() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool is_getter = 5 [default = false];</code>
       */
      public boolean getIsGetter() {
        return isGetter_;
      }
      /**
       * <code>optional bool is_getter = 5 [default = false];</code>
       */
      public Builder setIsGetter(boolean value) {
        bitField0_ |= 0x00000010;
        isGetter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_getter = 5 [default = false];</code>
       */
      public Builder clearIsGetter() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isGetter_ = false;
        onChanged();
        return this;
      }

      private boolean isSetter_ ;
      /**
       * <code>optional bool is_setter = 6 [default = false];</code>
       */
      public boolean hasIsSetter() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool is_setter = 6 [default = false];</code>
       */
      public boolean getIsSetter() {
        return isSetter_;
      }
      /**
       * <code>optional bool is_setter = 6 [default = false];</code>
       */
      public Builder setIsSetter(boolean value) {
        bitField0_ |= 0x00000020;
        isSetter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_setter = 6 [default = false];</code>
       */
      public Builder clearIsSetter() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isSetter_ = false;
        onChanged();
        return this;
      }

      private boolean isBackingField_ ;
      /**
       * <code>optional bool is_backing_field = 7 [default = false];</code>
       */
      public boolean hasIsBackingField() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool is_backing_field = 7 [default = false];</code>
       */
      public boolean getIsBackingField() {
        return isBackingField_;
      }
      /**
       * <code>optional bool is_backing_field = 7 [default = false];</code>
       */
      public Builder setIsBackingField(boolean value) {
        bitField0_ |= 0x00000040;
        isBackingField_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_backing_field = 7 [default = false];</code>
       */
      public Builder clearIsBackingField() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isBackingField_ = false;
        onChanged();
        return this;
      }

      private boolean isFakeOverride_ ;
      /**
       * <code>optional bool is_fake_override = 8 [default = false];</code>
       */
      public boolean hasIsFakeOverride() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool is_fake_override = 8 [default = false];</code>
       */
      public boolean getIsFakeOverride() {
        return isFakeOverride_;
      }
      /**
       * <code>optional bool is_fake_override = 8 [default = false];</code>
       */
      public Builder setIsFakeOverride(boolean value) {
        bitField0_ |= 0x00000080;
        isFakeOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_fake_override = 8 [default = false];</code>
       */
      public Builder clearIsFakeOverride() {
        bitField0_ = (bitField0_ & ~0x00000080);
        isFakeOverride_ = false;
        onChanged();
        return this;
      }

      private boolean isDefaultConstructor_ ;
      /**
       * <code>optional bool is_default_constructor = 9 [default = false];</code>
       */
      public boolean hasIsDefaultConstructor() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool is_default_constructor = 9 [default = false];</code>
       */
      public boolean getIsDefaultConstructor() {
        return isDefaultConstructor_;
      }
      /**
       * <code>optional bool is_default_constructor = 9 [default = false];</code>
       */
      public Builder setIsDefaultConstructor(boolean value) {
        bitField0_ |= 0x00000100;
        isDefaultConstructor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_default_constructor = 9 [default = false];</code>
       */
      public Builder clearIsDefaultConstructor() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isDefaultConstructor_ = false;
        onChanged();
        return this;
      }

      private boolean isEnumEntry_ ;
      /**
       * <code>optional bool is_enum_entry = 10 [default = false];</code>
       */
      public boolean hasIsEnumEntry() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool is_enum_entry = 10 [default = false];</code>
       */
      public boolean getIsEnumEntry() {
        return isEnumEntry_;
      }
      /**
       * <code>optional bool is_enum_entry = 10 [default = false];</code>
       */
      public Builder setIsEnumEntry(boolean value) {
        bitField0_ |= 0x00000200;
        isEnumEntry_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_enum_entry = 10 [default = false];</code>
       */
      public Builder clearIsEnumEntry() {
        bitField0_ = (bitField0_ & ~0x00000200);
        isEnumEntry_ = false;
        onChanged();
        return this;
      }

      private boolean isEnumSpecial_ ;
      /**
       * <code>optional bool is_enum_special = 11 [default = false];</code>
       */
      public boolean hasIsEnumSpecial() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool is_enum_special = 11 [default = false];</code>
       */
      public boolean getIsEnumSpecial() {
        return isEnumSpecial_;
      }
      /**
       * <code>optional bool is_enum_special = 11 [default = false];</code>
       */
      public Builder setIsEnumSpecial(boolean value) {
        bitField0_ |= 0x00000400;
        isEnumSpecial_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_enum_special = 11 [default = false];</code>
       */
      public Builder clearIsEnumSpecial() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isEnumSpecial_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference)
    }

    static {
      defaultInstance = new DescriptorReference(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference)
  }

  public interface UniqIdOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>required uint64 index = 1;</code>
     */
    long getIndex();

    /**
     * <code>required bool isLocal = 2;</code>
     */
    boolean hasIsLocal();
    /**
     * <code>required bool isLocal = 2;</code>
     */
    boolean getIsLocal();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId}
   */
  public static final class UniqId extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId)
      UniqIdOrBuilder {
    // Use UniqId.newBuilder() to construct.
    private UniqId(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private UniqId(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final UniqId defaultInstance;
    public static UniqId getDefaultInstance() {
      return defaultInstance;
    }

    public UniqId getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private UniqId(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              isLocal_ = input.readBool();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_UniqId_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_UniqId_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<UniqId> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<UniqId>() {
      public UniqId parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new UniqId(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<UniqId> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private long index_;
    /**
     * <code>required uint64 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 index = 1;</code>
     */
    public long getIndex() {
      return index_;
    }

    public static final int ISLOCAL_FIELD_NUMBER = 2;
    private boolean isLocal_;
    /**
     * <code>required bool isLocal = 2;</code>
     */
    public boolean hasIsLocal() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bool isLocal = 2;</code>
     */
    public boolean getIsLocal() {
      return isLocal_;
    }

    private void initFields() {
      index_ = 0L;
      isLocal_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsLocal()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, isLocal_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeUInt64Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(2, isLocal_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_UniqId_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_UniqId_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        isLocal_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_UniqId_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.isLocal_ = isLocal_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasIsLocal()) {
          setIsLocal(other.getIsLocal());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        if (!hasIsLocal()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long index_ ;
      /**
       * <code>required uint64 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 index = 1;</code>
       */
      public long getIndex() {
        return index_;
      }
      /**
       * <code>required uint64 index = 1;</code>
       */
      public Builder setIndex(long value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0L;
        onChanged();
        return this;
      }

      private boolean isLocal_ ;
      /**
       * <code>required bool isLocal = 2;</code>
       */
      public boolean hasIsLocal() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bool isLocal = 2;</code>
       */
      public boolean getIsLocal() {
        return isLocal_;
      }
      /**
       * <code>required bool isLocal = 2;</code>
       */
      public Builder setIsLocal(boolean value) {
        bitField0_ |= 0x00000002;
        isLocal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isLocal = 2;</code>
       */
      public Builder clearIsLocal() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isLocal_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId)
    }

    static {
      defaultInstance = new UniqId(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId)
  }

  public interface CoordinatesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 start_offset = 1;</code>
     */
    boolean hasStartOffset();
    /**
     * <code>required int32 start_offset = 1;</code>
     */
    int getStartOffset();

    /**
     * <code>required int32 end_offset = 2;</code>
     */
    boolean hasEndOffset();
    /**
     * <code>required int32 end_offset = 2;</code>
     */
    int getEndOffset();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates}
   */
  public static final class Coordinates extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates)
      CoordinatesOrBuilder {
    // Use Coordinates.newBuilder() to construct.
    private Coordinates(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Coordinates(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Coordinates defaultInstance;
    public static Coordinates getDefaultInstance() {
      return defaultInstance;
    }

    public Coordinates getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Coordinates(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              startOffset_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              endOffset_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Coordinates_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Coordinates_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Coordinates> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Coordinates>() {
      public Coordinates parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Coordinates(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Coordinates> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int START_OFFSET_FIELD_NUMBER = 1;
    private int startOffset_;
    /**
     * <code>required int32 start_offset = 1;</code>
     */
    public boolean hasStartOffset() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 start_offset = 1;</code>
     */
    public int getStartOffset() {
      return startOffset_;
    }

    public static final int END_OFFSET_FIELD_NUMBER = 2;
    private int endOffset_;
    /**
     * <code>required int32 end_offset = 2;</code>
     */
    public boolean hasEndOffset() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 end_offset = 2;</code>
     */
    public int getEndOffset() {
      return endOffset_;
    }

    private void initFields() {
      startOffset_ = 0;
      endOffset_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStartOffset()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEndOffset()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, startOffset_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, endOffset_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, startOffset_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, endOffset_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Coordinates_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Coordinates_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        startOffset_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        endOffset_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Coordinates_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.startOffset_ = startOffset_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.endOffset_ = endOffset_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance()) return this;
        if (other.hasStartOffset()) {
          setStartOffset(other.getStartOffset());
        }
        if (other.hasEndOffset()) {
          setEndOffset(other.getEndOffset());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStartOffset()) {
          
          return false;
        }
        if (!hasEndOffset()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int startOffset_ ;
      /**
       * <code>required int32 start_offset = 1;</code>
       */
      public boolean hasStartOffset() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 start_offset = 1;</code>
       */
      public int getStartOffset() {
        return startOffset_;
      }
      /**
       * <code>required int32 start_offset = 1;</code>
       */
      public Builder setStartOffset(int value) {
        bitField0_ |= 0x00000001;
        startOffset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 start_offset = 1;</code>
       */
      public Builder clearStartOffset() {
        bitField0_ = (bitField0_ & ~0x00000001);
        startOffset_ = 0;
        onChanged();
        return this;
      }

      private int endOffset_ ;
      /**
       * <code>required int32 end_offset = 2;</code>
       */
      public boolean hasEndOffset() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 end_offset = 2;</code>
       */
      public int getEndOffset() {
        return endOffset_;
      }
      /**
       * <code>required int32 end_offset = 2;</code>
       */
      public Builder setEndOffset(int value) {
        bitField0_ |= 0x00000002;
        endOffset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 end_offset = 2;</code>
       */
      public Builder clearEndOffset() {
        bitField0_ = (bitField0_ & ~0x00000002);
        endOffset_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates)
    }

    static {
      defaultInstance = new Coordinates(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates)
  }

  public interface IrDeclarationContainerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> 
        getDeclarationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getDeclaration(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
     */
    int getDeclarationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
        getDeclarationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getDeclarationOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer}
   */
  public static final class IrDeclarationContainer extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer)
      IrDeclarationContainerOrBuilder {
    // Use IrDeclarationContainer.newBuilder() to construct.
    private IrDeclarationContainer(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrDeclarationContainer(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrDeclarationContainer defaultInstance;
    public static IrDeclarationContainer getDefaultInstance() {
      return defaultInstance;
    }

    public IrDeclarationContainer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrDeclarationContainer(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                declaration_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration>();
                mutable_bitField0_ |= 0x00000001;
              }
              declaration_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          declaration_ = java.util.Collections.unmodifiableList(declaration_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationContainer_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationContainer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrDeclarationContainer> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrDeclarationContainer>() {
      public IrDeclarationContainer parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrDeclarationContainer(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrDeclarationContainer> getParserForType() {
      return PARSER;
    }

    public static final int DECLARATION_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> declaration_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> getDeclarationList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
        getDeclarationOrBuilderList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
     */
    public int getDeclarationCount() {
      return declaration_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getDeclaration(int index) {
      return declaration_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getDeclarationOrBuilder(
        int index) {
      return declaration_.get(index);
    }

    private void initFields() {
      declaration_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getDeclarationCount(); i++) {
        if (!getDeclaration(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < declaration_.size(); i++) {
        output.writeMessage(1, declaration_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < declaration_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, declaration_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainerOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationContainer_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationContainer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDeclarationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (declarationBuilder_ == null) {
          declaration_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          declarationBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationContainer_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer(this);
        int from_bitField0_ = bitField0_;
        if (declarationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            declaration_ = java.util.Collections.unmodifiableList(declaration_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.declaration_ = declaration_;
        } else {
          result.declaration_ = declarationBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.getDefaultInstance()) return this;
        if (declarationBuilder_ == null) {
          if (!other.declaration_.isEmpty()) {
            if (declaration_.isEmpty()) {
              declaration_ = other.declaration_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDeclarationIsMutable();
              declaration_.addAll(other.declaration_);
            }
            onChanged();
          }
        } else {
          if (!other.declaration_.isEmpty()) {
            if (declarationBuilder_.isEmpty()) {
              declarationBuilder_.dispose();
              declarationBuilder_ = null;
              declaration_ = other.declaration_;
              bitField0_ = (bitField0_ & ~0x00000001);
              declarationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDeclarationFieldBuilder() : null;
            } else {
              declarationBuilder_.addAllMessages(other.declaration_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getDeclarationCount(); i++) {
          if (!getDeclaration(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> declaration_ =
        java.util.Collections.emptyList();
      private void ensureDeclarationIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          declaration_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration>(declaration_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> declarationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> getDeclarationList() {
        if (declarationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(declaration_);
        } else {
          return declarationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public int getDeclarationCount() {
        if (declarationBuilder_ == null) {
          return declaration_.size();
        } else {
          return declarationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getDeclaration(int index) {
        if (declarationBuilder_ == null) {
          return declaration_.get(index);
        } else {
          return declarationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (declarationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIsMutable();
          declaration_.set(index, value);
          onChanged();
        } else {
          declarationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.set(index, builderForValue.build());
          onChanged();
        } else {
          declarationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (declarationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIsMutable();
          declaration_.add(value);
          onChanged();
        } else {
          declarationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (declarationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIsMutable();
          declaration_.add(index, value);
          onChanged();
        } else {
          declarationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.add(builderForValue.build());
          onChanged();
        } else {
          declarationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.add(index, builderForValue.build());
          onChanged();
        } else {
          declarationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public Builder addAllDeclaration(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> values) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, declaration_);
          onChanged();
        } else {
          declarationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public Builder clearDeclaration() {
        if (declarationBuilder_ == null) {
          declaration_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          declarationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public Builder removeDeclaration(int index) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.remove(index);
          onChanged();
        } else {
          declarationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder getDeclarationBuilder(
          int index) {
        return getDeclarationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getDeclarationOrBuilder(
          int index) {
        if (declarationBuilder_ == null) {
          return declaration_.get(index);  } else {
          return declarationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
           getDeclarationOrBuilderList() {
        if (declarationBuilder_ != null) {
          return declarationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(declaration_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder addDeclarationBuilder() {
        return getDeclarationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder addDeclarationBuilder(
          int index) {
        return getDeclarationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder> 
           getDeclarationBuilderList() {
        return getDeclarationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
          getDeclarationFieldBuilder() {
        if (declarationBuilder_ == null) {
          declarationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder>(
                  declaration_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          declaration_ = null;
        }
        return declarationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer)
    }

    static {
      defaultInstance = new IrDeclarationContainer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer)
  }

  public interface FileEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry}
   *
   * <pre>
   * TODO: extend me.
   * </pre>
   */
  public static final class FileEntry extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry)
      FileEntryOrBuilder {
    // Use FileEntry.newBuilder() to construct.
    private FileEntry(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FileEntry(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FileEntry defaultInstance;
    public static FileEntry getDefaultInstance() {
      return defaultInstance;
    }

    public FileEntry getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FileEntry(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FileEntry_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FileEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<FileEntry> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<FileEntry>() {
      public FileEntry parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new FileEntry(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<FileEntry> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>required string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      name_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry}
     *
     * <pre>
     * TODO: extend me.
     * </pre>
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FileEntry_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FileEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FileEntry_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry)
    }

    static {
      defaultInstance = new FileEntry(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry)
  }

  public interface IrFileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId> 
        getDeclarationIdList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getDeclarationId(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
     */
    int getDeclarationIdCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> 
        getDeclarationIdOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getDeclarationIdOrBuilder(
        int index);

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
     */
    boolean hasFileEntry();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry getFileEntry();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntryOrBuilder getFileEntryOrBuilder();

    /**
     * <code>required string fq_name = 3;</code>
     *
     * <pre>
     * TODO: we need a better string management. See metadata serialization as an example.
     * </pre>
     */
    boolean hasFqName();
    /**
     * <code>required string fq_name = 3;</code>
     *
     * <pre>
     * TODO: we need a better string management. See metadata serialization as an example.
     * </pre>
     */
    java.lang.String getFqName();
    /**
     * <code>required string fq_name = 3;</code>
     *
     * <pre>
     * TODO: we need a better string management. See metadata serialization as an example.
     * </pre>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getFqNameBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile}
   */
  public static final class IrFile extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile)
      IrFileOrBuilder {
    // Use IrFile.newBuilder() to construct.
    private IrFile(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrFile(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrFile defaultInstance;
    public static IrFile getDefaultInstance() {
      return defaultInstance;
    }

    public IrFile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrFile(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                declarationId_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId>();
                mutable_bitField0_ |= 0x00000001;
              }
              declarationId_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = fileEntry_.toBuilder();
              }
              fileEntry_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fileEntry_);
                fileEntry_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              fqName_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          declarationId_ = java.util.Collections.unmodifiableList(declarationId_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFile_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrFile> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrFile>() {
      public IrFile parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrFile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrFile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DECLARATION_ID_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId> declarationId_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId> getDeclarationIdList() {
      return declarationId_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> 
        getDeclarationIdOrBuilderList() {
      return declarationId_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
     */
    public int getDeclarationIdCount() {
      return declarationId_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getDeclarationId(int index) {
      return declarationId_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getDeclarationIdOrBuilder(
        int index) {
      return declarationId_.get(index);
    }

    public static final int FILE_ENTRY_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry fileEntry_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
     */
    public boolean hasFileEntry() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry getFileEntry() {
      return fileEntry_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntryOrBuilder getFileEntryOrBuilder() {
      return fileEntry_;
    }

    public static final int FQ_NAME_FIELD_NUMBER = 3;
    private java.lang.Object fqName_;
    /**
     * <code>required string fq_name = 3;</code>
     *
     * <pre>
     * TODO: we need a better string management. See metadata serialization as an example.
     * </pre>
     */
    public boolean hasFqName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string fq_name = 3;</code>
     *
     * <pre>
     * TODO: we need a better string management. See metadata serialization as an example.
     * </pre>
     */
    public java.lang.String getFqName() {
      java.lang.Object ref = fqName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fqName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string fq_name = 3;</code>
     *
     * <pre>
     * TODO: we need a better string management. See metadata serialization as an example.
     * </pre>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getFqNameBytes() {
      java.lang.Object ref = fqName_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fqName_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      declarationId_ = java.util.Collections.emptyList();
      fileEntry_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.getDefaultInstance();
      fqName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFileEntry()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFqName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getDeclarationIdCount(); i++) {
        if (!getDeclarationId(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getFileEntry().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < declarationId_.size(); i++) {
        output.writeMessage(1, declarationId_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, fileEntry_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(3, getFqNameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < declarationId_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, declarationId_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, fileEntry_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(3, getFqNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFileOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFile_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDeclarationIdFieldBuilder();
          getFileEntryFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (declarationIdBuilder_ == null) {
          declarationId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          declarationIdBuilder_.clear();
        }
        if (fileEntryBuilder_ == null) {
          fileEntry_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.getDefaultInstance();
        } else {
          fileEntryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        fqName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFile_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (declarationIdBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            declarationId_ = java.util.Collections.unmodifiableList(declarationId_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.declarationId_ = declarationId_;
        } else {
          result.declarationId_ = declarationIdBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        if (fileEntryBuilder_ == null) {
          result.fileEntry_ = fileEntry_;
        } else {
          result.fileEntry_ = fileEntryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fqName_ = fqName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.getDefaultInstance()) return this;
        if (declarationIdBuilder_ == null) {
          if (!other.declarationId_.isEmpty()) {
            if (declarationId_.isEmpty()) {
              declarationId_ = other.declarationId_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDeclarationIdIsMutable();
              declarationId_.addAll(other.declarationId_);
            }
            onChanged();
          }
        } else {
          if (!other.declarationId_.isEmpty()) {
            if (declarationIdBuilder_.isEmpty()) {
              declarationIdBuilder_.dispose();
              declarationIdBuilder_ = null;
              declarationId_ = other.declarationId_;
              bitField0_ = (bitField0_ & ~0x00000001);
              declarationIdBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDeclarationIdFieldBuilder() : null;
            } else {
              declarationIdBuilder_.addAllMessages(other.declarationId_);
            }
          }
        }
        if (other.hasFileEntry()) {
          mergeFileEntry(other.getFileEntry());
        }
        if (other.hasFqName()) {
          bitField0_ |= 0x00000004;
          fqName_ = other.fqName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFileEntry()) {
          
          return false;
        }
        if (!hasFqName()) {
          
          return false;
        }
        for (int i = 0; i < getDeclarationIdCount(); i++) {
          if (!getDeclarationId(i).isInitialized()) {
            
            return false;
          }
        }
        if (!getFileEntry().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId> declarationId_ =
        java.util.Collections.emptyList();
      private void ensureDeclarationIdIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          declarationId_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId>(declarationId_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> declarationIdBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId> getDeclarationIdList() {
        if (declarationIdBuilder_ == null) {
          return java.util.Collections.unmodifiableList(declarationId_);
        } else {
          return declarationIdBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public int getDeclarationIdCount() {
        if (declarationIdBuilder_ == null) {
          return declarationId_.size();
        } else {
          return declarationIdBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getDeclarationId(int index) {
        if (declarationIdBuilder_ == null) {
          return declarationId_.get(index);
        } else {
          return declarationIdBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public Builder setDeclarationId(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId value) {
        if (declarationIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIdIsMutable();
          declarationId_.set(index, value);
          onChanged();
        } else {
          declarationIdBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public Builder setDeclarationId(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder builderForValue) {
        if (declarationIdBuilder_ == null) {
          ensureDeclarationIdIsMutable();
          declarationId_.set(index, builderForValue.build());
          onChanged();
        } else {
          declarationIdBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public Builder addDeclarationId(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId value) {
        if (declarationIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIdIsMutable();
          declarationId_.add(value);
          onChanged();
        } else {
          declarationIdBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public Builder addDeclarationId(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId value) {
        if (declarationIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIdIsMutable();
          declarationId_.add(index, value);
          onChanged();
        } else {
          declarationIdBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public Builder addDeclarationId(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder builderForValue) {
        if (declarationIdBuilder_ == null) {
          ensureDeclarationIdIsMutable();
          declarationId_.add(builderForValue.build());
          onChanged();
        } else {
          declarationIdBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public Builder addDeclarationId(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder builderForValue) {
        if (declarationIdBuilder_ == null) {
          ensureDeclarationIdIsMutable();
          declarationId_.add(index, builderForValue.build());
          onChanged();
        } else {
          declarationIdBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public Builder addAllDeclarationId(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId> values) {
        if (declarationIdBuilder_ == null) {
          ensureDeclarationIdIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, declarationId_);
          onChanged();
        } else {
          declarationIdBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public Builder clearDeclarationId() {
        if (declarationIdBuilder_ == null) {
          declarationId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          declarationIdBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public Builder removeDeclarationId(int index) {
        if (declarationIdBuilder_ == null) {
          ensureDeclarationIdIsMutable();
          declarationId_.remove(index);
          onChanged();
        } else {
          declarationIdBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder getDeclarationIdBuilder(
          int index) {
        return getDeclarationIdFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getDeclarationIdOrBuilder(
          int index) {
        if (declarationIdBuilder_ == null) {
          return declarationId_.get(index);  } else {
          return declarationIdBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> 
           getDeclarationIdOrBuilderList() {
        if (declarationIdBuilder_ != null) {
          return declarationIdBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(declarationId_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder addDeclarationIdBuilder() {
        return getDeclarationIdFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder addDeclarationIdBuilder(
          int index) {
        return getDeclarationIdFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId declaration_id = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder> 
           getDeclarationIdBuilderList() {
        return getDeclarationIdFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> 
          getDeclarationIdFieldBuilder() {
        if (declarationIdBuilder_ == null) {
          declarationIdBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder>(
                  declarationId_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          declarationId_ = null;
        }
        return declarationIdBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry fileEntry_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntryOrBuilder> fileEntryBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
       */
      public boolean hasFileEntry() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry getFileEntry() {
        if (fileEntryBuilder_ == null) {
          return fileEntry_;
        } else {
          return fileEntryBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
       */
      public Builder setFileEntry(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry value) {
        if (fileEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fileEntry_ = value;
          onChanged();
        } else {
          fileEntryBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
       */
      public Builder setFileEntry(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.Builder builderForValue) {
        if (fileEntryBuilder_ == null) {
          fileEntry_ = builderForValue.build();
          onChanged();
        } else {
          fileEntryBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
       */
      public Builder mergeFileEntry(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry value) {
        if (fileEntryBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              fileEntry_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.getDefaultInstance()) {
            fileEntry_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.newBuilder(fileEntry_).mergeFrom(value).buildPartial();
          } else {
            fileEntry_ = value;
          }
          onChanged();
        } else {
          fileEntryBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
       */
      public Builder clearFileEntry() {
        if (fileEntryBuilder_ == null) {
          fileEntry_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.getDefaultInstance();
          onChanged();
        } else {
          fileEntryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.Builder getFileEntryBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getFileEntryFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntryOrBuilder getFileEntryOrBuilder() {
        if (fileEntryBuilder_ != null) {
          return fileEntryBuilder_.getMessageOrBuilder();
        } else {
          return fileEntry_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FileEntry file_entry = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntryOrBuilder> 
          getFileEntryFieldBuilder() {
        if (fileEntryBuilder_ == null) {
          fileEntryBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntry.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FileEntryOrBuilder>(
                  getFileEntry(),
                  getParentForChildren(),
                  isClean());
          fileEntry_ = null;
        }
        return fileEntryBuilder_;
      }

      private java.lang.Object fqName_ = "";
      /**
       * <code>required string fq_name = 3;</code>
       *
       * <pre>
       * TODO: we need a better string management. See metadata serialization as an example.
       * </pre>
       */
      public boolean hasFqName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string fq_name = 3;</code>
       *
       * <pre>
       * TODO: we need a better string management. See metadata serialization as an example.
       * </pre>
       */
      public java.lang.String getFqName() {
        java.lang.Object ref = fqName_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fqName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string fq_name = 3;</code>
       *
       * <pre>
       * TODO: we need a better string management. See metadata serialization as an example.
       * </pre>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getFqNameBytes() {
        java.lang.Object ref = fqName_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fqName_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string fq_name = 3;</code>
       *
       * <pre>
       * TODO: we need a better string management. See metadata serialization as an example.
       * </pre>
       */
      public Builder setFqName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        fqName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string fq_name = 3;</code>
       *
       * <pre>
       * TODO: we need a better string management. See metadata serialization as an example.
       * </pre>
       */
      public Builder clearFqName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fqName_ = getDefaultInstance().getFqName();
        onChanged();
        return this;
      }
      /**
       * <code>required string fq_name = 3;</code>
       *
       * <pre>
       * TODO: we need a better string management. See metadata serialization as an example.
       * </pre>
       */
      public Builder setFqNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        fqName_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile)
    }

    static {
      defaultInstance = new IrFile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile)
  }

  public interface IrModuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrModule)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile> 
        getFileList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile getFile(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
     */
    int getFileCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFileOrBuilder> 
        getFileOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFileOrBuilder getFileOrBuilder(
        int index);

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
     */
    boolean hasSymbolTable();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable getSymbolTable();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTableOrBuilder getSymbolTableOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
     */
    boolean hasTypeTable();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable getTypeTable();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTableOrBuilder getTypeTableOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrModule}
   */
  public static final class IrModule extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrModule)
      IrModuleOrBuilder {
    // Use IrModule.newBuilder() to construct.
    private IrModule(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrModule(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrModule defaultInstance;
    public static IrModule getDefaultInstance() {
      return defaultInstance;
    }

    public IrModule getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrModule(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                file_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile>();
                mutable_bitField0_ |= 0x00000002;
              }
              file_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = symbolTable_.toBuilder();
              }
              symbolTable_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbolTable_);
                symbolTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = typeTable_.toBuilder();
              }
              typeTable_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(typeTable_);
                typeTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          file_ = java.util.Collections.unmodifiableList(file_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrModule_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrModule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrModule> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrModule>() {
      public IrModule parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrModule(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrModule> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>required string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int FILE_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile> file_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile> getFileList() {
      return file_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFileOrBuilder> 
        getFileOrBuilderList() {
      return file_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
     */
    public int getFileCount() {
      return file_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile getFile(int index) {
      return file_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFileOrBuilder getFileOrBuilder(
        int index) {
      return file_.get(index);
    }

    public static final int SYMBOL_TABLE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable symbolTable_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
     */
    public boolean hasSymbolTable() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable getSymbolTable() {
      return symbolTable_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTableOrBuilder getSymbolTableOrBuilder() {
      return symbolTable_;
    }

    public static final int TYPE_TABLE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable typeTable_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
     */
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable getTypeTable() {
      return typeTable_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTableOrBuilder getTypeTableOrBuilder() {
      return typeTable_;
    }

    private void initFields() {
      name_ = "";
      file_ = java.util.Collections.emptyList();
      symbolTable_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.getDefaultInstance();
      typeTable_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSymbolTable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTypeTable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getFileCount(); i++) {
        if (!getFile(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getSymbolTable().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTypeTable().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      for (int i = 0; i < file_.size(); i++) {
        output.writeMessage(2, file_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, symbolTable_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, typeTable_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      for (int i = 0; i < file_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, file_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, symbolTable_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, typeTable_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrModule}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrModule)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModuleOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrModule_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrModule_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFileFieldBuilder();
          getSymbolTableFieldBuilder();
          getTypeTableFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (fileBuilder_ == null) {
          file_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          fileBuilder_.clear();
        }
        if (symbolTableBuilder_ == null) {
          symbolTable_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.getDefaultInstance();
        } else {
          symbolTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (typeTableBuilder_ == null) {
          typeTable_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.getDefaultInstance();
        } else {
          typeTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrModule_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (fileBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            file_ = java.util.Collections.unmodifiableList(file_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.file_ = file_;
        } else {
          result.file_ = fileBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        if (symbolTableBuilder_ == null) {
          result.symbolTable_ = symbolTable_;
        } else {
          result.symbolTable_ = symbolTableBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (typeTableBuilder_ == null) {
          result.typeTable_ = typeTable_;
        } else {
          result.typeTable_ = typeTableBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (fileBuilder_ == null) {
          if (!other.file_.isEmpty()) {
            if (file_.isEmpty()) {
              file_ = other.file_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureFileIsMutable();
              file_.addAll(other.file_);
            }
            onChanged();
          }
        } else {
          if (!other.file_.isEmpty()) {
            if (fileBuilder_.isEmpty()) {
              fileBuilder_.dispose();
              fileBuilder_ = null;
              file_ = other.file_;
              bitField0_ = (bitField0_ & ~0x00000002);
              fileBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFileFieldBuilder() : null;
            } else {
              fileBuilder_.addAllMessages(other.file_);
            }
          }
        }
        if (other.hasSymbolTable()) {
          mergeSymbolTable(other.getSymbolTable());
        }
        if (other.hasTypeTable()) {
          mergeTypeTable(other.getTypeTable());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (!hasSymbolTable()) {
          
          return false;
        }
        if (!hasTypeTable()) {
          
          return false;
        }
        for (int i = 0; i < getFileCount(); i++) {
          if (!getFile(i).isInitialized()) {
            
            return false;
          }
        }
        if (!getSymbolTable().isInitialized()) {
          
          return false;
        }
        if (!getTypeTable().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrModule) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile> file_ =
        java.util.Collections.emptyList();
      private void ensureFileIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          file_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile>(file_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFileOrBuilder> fileBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile> getFileList() {
        if (fileBuilder_ == null) {
          return java.util.Collections.unmodifiableList(file_);
        } else {
          return fileBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public int getFileCount() {
        if (fileBuilder_ == null) {
          return file_.size();
        } else {
          return fileBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile getFile(int index) {
        if (fileBuilder_ == null) {
          return file_.get(index);
        } else {
          return fileBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public Builder setFile(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile value) {
        if (fileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileIsMutable();
          file_.set(index, value);
          onChanged();
        } else {
          fileBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public Builder setFile(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder builderForValue) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.set(index, builderForValue.build());
          onChanged();
        } else {
          fileBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public Builder addFile(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile value) {
        if (fileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileIsMutable();
          file_.add(value);
          onChanged();
        } else {
          fileBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public Builder addFile(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile value) {
        if (fileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileIsMutable();
          file_.add(index, value);
          onChanged();
        } else {
          fileBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public Builder addFile(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder builderForValue) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.add(builderForValue.build());
          onChanged();
        } else {
          fileBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public Builder addFile(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder builderForValue) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.add(index, builderForValue.build());
          onChanged();
        } else {
          fileBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public Builder addAllFile(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile> values) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, file_);
          onChanged();
        } else {
          fileBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public Builder clearFile() {
        if (fileBuilder_ == null) {
          file_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          fileBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public Builder removeFile(int index) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.remove(index);
          onChanged();
        } else {
          fileBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder getFileBuilder(
          int index) {
        return getFileFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFileOrBuilder getFileOrBuilder(
          int index) {
        if (fileBuilder_ == null) {
          return file_.get(index);  } else {
          return fileBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFileOrBuilder> 
           getFileOrBuilderList() {
        if (fileBuilder_ != null) {
          return fileBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(file_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder addFileBuilder() {
        return getFileFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder addFileBuilder(
          int index) {
        return getFileFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFile file = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder> 
           getFileBuilderList() {
        return getFileFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFileOrBuilder> 
          getFileFieldBuilder() {
        if (fileBuilder_ == null) {
          fileBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFile.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFileOrBuilder>(
                  file_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          file_ = null;
        }
        return fileBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable symbolTable_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTableOrBuilder> symbolTableBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
       */
      public boolean hasSymbolTable() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable getSymbolTable() {
        if (symbolTableBuilder_ == null) {
          return symbolTable_;
        } else {
          return symbolTableBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
       */
      public Builder setSymbolTable(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable value) {
        if (symbolTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbolTable_ = value;
          onChanged();
        } else {
          symbolTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
       */
      public Builder setSymbolTable(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.Builder builderForValue) {
        if (symbolTableBuilder_ == null) {
          symbolTable_ = builderForValue.build();
          onChanged();
        } else {
          symbolTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
       */
      public Builder mergeSymbolTable(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable value) {
        if (symbolTableBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              symbolTable_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.getDefaultInstance()) {
            symbolTable_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.newBuilder(symbolTable_).mergeFrom(value).buildPartial();
          } else {
            symbolTable_ = value;
          }
          onChanged();
        } else {
          symbolTableBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
       */
      public Builder clearSymbolTable() {
        if (symbolTableBuilder_ == null) {
          symbolTable_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.getDefaultInstance();
          onChanged();
        } else {
          symbolTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.Builder getSymbolTableBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSymbolTableFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTableOrBuilder getSymbolTableOrBuilder() {
        if (symbolTableBuilder_ != null) {
          return symbolTableBuilder_.getMessageOrBuilder();
        } else {
          return symbolTable_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable symbol_table = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTableOrBuilder> 
          getSymbolTableFieldBuilder() {
        if (symbolTableBuilder_ == null) {
          symbolTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTableOrBuilder>(
                  getSymbolTable(),
                  getParentForChildren(),
                  isClean());
          symbolTable_ = null;
        }
        return symbolTableBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable typeTable_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTableOrBuilder> typeTableBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
       */
      public boolean hasTypeTable() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable getTypeTable() {
        if (typeTableBuilder_ == null) {
          return typeTable_;
        } else {
          return typeTableBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable value) {
        if (typeTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeTable_ = value;
          onChanged();
        } else {
          typeTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.Builder builderForValue) {
        if (typeTableBuilder_ == null) {
          typeTable_ = builderForValue.build();
          onChanged();
        } else {
          typeTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable value) {
        if (typeTableBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              typeTable_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.getDefaultInstance()) {
            typeTable_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.newBuilder(typeTable_).mergeFrom(value).buildPartial();
          } else {
            typeTable_ = value;
          }
          onChanged();
        } else {
          typeTableBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
       */
      public Builder clearTypeTable() {
        if (typeTableBuilder_ == null) {
          typeTable_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.getDefaultInstance();
          onChanged();
        } else {
          typeTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.Builder getTypeTableBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getTypeTableFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTableOrBuilder getTypeTableOrBuilder() {
        if (typeTableBuilder_ != null) {
          return typeTableBuilder_.getMessageOrBuilder();
        } else {
          return typeTable_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable type_table = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTableOrBuilder> 
          getTypeTableFieldBuilder() {
        if (typeTableBuilder_ == null) {
          typeTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTableOrBuilder>(
                  getTypeTable(),
                  getParentForChildren(),
                  isClean());
          typeTable_ = null;
        }
        return typeTableBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrModule)
    }

    static {
      defaultInstance = new IrModule(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrModule)
  }

  public interface IrSymbolDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolKind kind = 1;</code>
     */
    boolean hasKind();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolKind kind = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind getKind();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
     */
    boolean hasUniqId();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getUniqId();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getUniqIdOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
     */
    boolean hasTopLevelUniqId();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getTopLevelUniqId();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getTopLevelUniqIdOrBuilder();

    /**
     * <code>optional string fqname = 4;</code>
     */
    boolean hasFqname();
    /**
     * <code>optional string fqname = 4;</code>
     */
    java.lang.String getFqname();
    /**
     * <code>optional string fqname = 4;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getFqnameBytes();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
     */
    boolean hasDescriptorReference();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference getDescriptorReference();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder getDescriptorReferenceOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData}
   */
  public static final class IrSymbolData extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData)
      IrSymbolDataOrBuilder {
    // Use IrSymbolData.newBuilder() to construct.
    private IrSymbolData(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrSymbolData(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrSymbolData defaultInstance;
    public static IrSymbolData getDefaultInstance() {
      return defaultInstance;
    }

    public IrSymbolData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrSymbolData(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind value = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                kind_ = value;
              }
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = uniqId_.toBuilder();
              }
              uniqId_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(uniqId_);
                uniqId_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = topLevelUniqId_.toBuilder();
              }
              topLevelUniqId_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(topLevelUniqId_);
                topLevelUniqId_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              fqname_ = bs;
              break;
            }
            case 42: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = descriptorReference_.toBuilder();
              }
              descriptorReference_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(descriptorReference_);
                descriptorReference_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolData_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrSymbolData> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrSymbolData>() {
      public IrSymbolData parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrSymbolData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrSymbolData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int KIND_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind kind_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolKind kind = 1;</code>
     */
    public boolean hasKind() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolKind kind = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind getKind() {
      return kind_;
    }

    public static final int UNIQ_ID_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId uniqId_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
     */
    public boolean hasUniqId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getUniqId() {
      return uniqId_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getUniqIdOrBuilder() {
      return uniqId_;
    }

    public static final int TOP_LEVEL_UNIQ_ID_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId topLevelUniqId_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
     */
    public boolean hasTopLevelUniqId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getTopLevelUniqId() {
      return topLevelUniqId_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getTopLevelUniqIdOrBuilder() {
      return topLevelUniqId_;
    }

    public static final int FQNAME_FIELD_NUMBER = 4;
    private java.lang.Object fqname_;
    /**
     * <code>optional string fqname = 4;</code>
     */
    public boolean hasFqname() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string fqname = 4;</code>
     */
    public java.lang.String getFqname() {
      java.lang.Object ref = fqname_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fqname_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string fqname = 4;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getFqnameBytes() {
      java.lang.Object ref = fqname_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fqname_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int DESCRIPTOR_REFERENCE_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference descriptorReference_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
     */
    public boolean hasDescriptorReference() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference getDescriptorReference() {
      return descriptorReference_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder getDescriptorReferenceOrBuilder() {
      return descriptorReference_;
    }

    private void initFields() {
      kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind.FUNCTION_SYMBOL;
      uniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
      topLevelUniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
      fqname_ = "";
      descriptorReference_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasKind()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUniqId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTopLevelUniqId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getUniqId().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTopLevelUniqId().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasDescriptorReference()) {
        if (!getDescriptorReference().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, kind_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, uniqId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, topLevelUniqId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getFqnameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, descriptorReference_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(1, kind_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, uniqId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, topLevelUniqId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(4, getFqnameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, descriptorReference_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolDataOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolData_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUniqIdFieldBuilder();
          getTopLevelUniqIdFieldBuilder();
          getDescriptorReferenceFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind.FUNCTION_SYMBOL;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (uniqIdBuilder_ == null) {
          uniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
        } else {
          uniqIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (topLevelUniqIdBuilder_ == null) {
          topLevelUniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
        } else {
          topLevelUniqIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        fqname_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        if (descriptorReferenceBuilder_ == null) {
          descriptorReference_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance();
        } else {
          descriptorReferenceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolData_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.kind_ = kind_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (uniqIdBuilder_ == null) {
          result.uniqId_ = uniqId_;
        } else {
          result.uniqId_ = uniqIdBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (topLevelUniqIdBuilder_ == null) {
          result.topLevelUniqId_ = topLevelUniqId_;
        } else {
          result.topLevelUniqId_ = topLevelUniqIdBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fqname_ = fqname_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (descriptorReferenceBuilder_ == null) {
          result.descriptorReference_ = descriptorReference_;
        } else {
          result.descriptorReference_ = descriptorReferenceBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.getDefaultInstance()) return this;
        if (other.hasKind()) {
          setKind(other.getKind());
        }
        if (other.hasUniqId()) {
          mergeUniqId(other.getUniqId());
        }
        if (other.hasTopLevelUniqId()) {
          mergeTopLevelUniqId(other.getTopLevelUniqId());
        }
        if (other.hasFqname()) {
          bitField0_ |= 0x00000008;
          fqname_ = other.fqname_;
          onChanged();
        }
        if (other.hasDescriptorReference()) {
          mergeDescriptorReference(other.getDescriptorReference());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasKind()) {
          
          return false;
        }
        if (!hasUniqId()) {
          
          return false;
        }
        if (!hasTopLevelUniqId()) {
          
          return false;
        }
        if (!getUniqId().isInitialized()) {
          
          return false;
        }
        if (!getTopLevelUniqId().isInitialized()) {
          
          return false;
        }
        if (hasDescriptorReference()) {
          if (!getDescriptorReference().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind.FUNCTION_SYMBOL;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolKind kind = 1;</code>
       */
      public boolean hasKind() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolKind kind = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind getKind() {
        return kind_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolKind kind = 1;</code>
       */
      public Builder setKind(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        kind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolKind kind = 1;</code>
       */
      public Builder clearKind() {
        bitField0_ = (bitField0_ & ~0x00000001);
        kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolKind.FUNCTION_SYMBOL;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId uniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> uniqIdBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
       */
      public boolean hasUniqId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getUniqId() {
        if (uniqIdBuilder_ == null) {
          return uniqId_;
        } else {
          return uniqIdBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
       */
      public Builder setUniqId(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId value) {
        if (uniqIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          uniqId_ = value;
          onChanged();
        } else {
          uniqIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
       */
      public Builder setUniqId(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder builderForValue) {
        if (uniqIdBuilder_ == null) {
          uniqId_ = builderForValue.build();
          onChanged();
        } else {
          uniqIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
       */
      public Builder mergeUniqId(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId value) {
        if (uniqIdBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              uniqId_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance()) {
            uniqId_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.newBuilder(uniqId_).mergeFrom(value).buildPartial();
          } else {
            uniqId_ = value;
          }
          onChanged();
        } else {
          uniqIdBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
       */
      public Builder clearUniqId() {
        if (uniqIdBuilder_ == null) {
          uniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
          onChanged();
        } else {
          uniqIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder getUniqIdBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getUniqIdFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getUniqIdOrBuilder() {
        if (uniqIdBuilder_ != null) {
          return uniqIdBuilder_.getMessageOrBuilder();
        } else {
          return uniqId_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId uniq_id = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> 
          getUniqIdFieldBuilder() {
        if (uniqIdBuilder_ == null) {
          uniqIdBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder>(
                  getUniqId(),
                  getParentForChildren(),
                  isClean());
          uniqId_ = null;
        }
        return uniqIdBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId topLevelUniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> topLevelUniqIdBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
       */
      public boolean hasTopLevelUniqId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId getTopLevelUniqId() {
        if (topLevelUniqIdBuilder_ == null) {
          return topLevelUniqId_;
        } else {
          return topLevelUniqIdBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
       */
      public Builder setTopLevelUniqId(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId value) {
        if (topLevelUniqIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          topLevelUniqId_ = value;
          onChanged();
        } else {
          topLevelUniqIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
       */
      public Builder setTopLevelUniqId(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder builderForValue) {
        if (topLevelUniqIdBuilder_ == null) {
          topLevelUniqId_ = builderForValue.build();
          onChanged();
        } else {
          topLevelUniqIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
       */
      public Builder mergeTopLevelUniqId(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId value) {
        if (topLevelUniqIdBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              topLevelUniqId_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance()) {
            topLevelUniqId_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.newBuilder(topLevelUniqId_).mergeFrom(value).buildPartial();
          } else {
            topLevelUniqId_ = value;
          }
          onChanged();
        } else {
          topLevelUniqIdBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
       */
      public Builder clearTopLevelUniqId() {
        if (topLevelUniqIdBuilder_ == null) {
          topLevelUniqId_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.getDefaultInstance();
          onChanged();
        } else {
          topLevelUniqIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder getTopLevelUniqIdBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTopLevelUniqIdFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder getTopLevelUniqIdOrBuilder() {
        if (topLevelUniqIdBuilder_ != null) {
          return topLevelUniqIdBuilder_.getMessageOrBuilder();
        } else {
          return topLevelUniqId_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.UniqId top_level_uniq_id = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder> 
          getTopLevelUniqIdFieldBuilder() {
        if (topLevelUniqIdBuilder_ == null) {
          topLevelUniqIdBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqId.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.UniqIdOrBuilder>(
                  getTopLevelUniqId(),
                  getParentForChildren(),
                  isClean());
          topLevelUniqId_ = null;
        }
        return topLevelUniqIdBuilder_;
      }

      private java.lang.Object fqname_ = "";
      /**
       * <code>optional string fqname = 4;</code>
       */
      public boolean hasFqname() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string fqname = 4;</code>
       */
      public java.lang.String getFqname() {
        java.lang.Object ref = fqname_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fqname_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string fqname = 4;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getFqnameBytes() {
        java.lang.Object ref = fqname_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fqname_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string fqname = 4;</code>
       */
      public Builder setFqname(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        fqname_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string fqname = 4;</code>
       */
      public Builder clearFqname() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fqname_ = getDefaultInstance().getFqname();
        onChanged();
        return this;
      }
      /**
       * <code>optional string fqname = 4;</code>
       */
      public Builder setFqnameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        fqname_ = value;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference descriptorReference_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder> descriptorReferenceBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
       */
      public boolean hasDescriptorReference() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference getDescriptorReference() {
        if (descriptorReferenceBuilder_ == null) {
          return descriptorReference_;
        } else {
          return descriptorReferenceBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
       */
      public Builder setDescriptorReference(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference value) {
        if (descriptorReferenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          descriptorReference_ = value;
          onChanged();
        } else {
          descriptorReferenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
       */
      public Builder setDescriptorReference(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder builderForValue) {
        if (descriptorReferenceBuilder_ == null) {
          descriptorReference_ = builderForValue.build();
          onChanged();
        } else {
          descriptorReferenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
       */
      public Builder mergeDescriptorReference(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference value) {
        if (descriptorReferenceBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              descriptorReference_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance()) {
            descriptorReference_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.newBuilder(descriptorReference_).mergeFrom(value).buildPartial();
          } else {
            descriptorReference_ = value;
          }
          onChanged();
        } else {
          descriptorReferenceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
       */
      public Builder clearDescriptorReference() {
        if (descriptorReferenceBuilder_ == null) {
          descriptorReference_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance();
          onChanged();
        } else {
          descriptorReferenceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder getDescriptorReferenceBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getDescriptorReferenceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder getDescriptorReferenceOrBuilder() {
        if (descriptorReferenceBuilder_ != null) {
          return descriptorReferenceBuilder_.getMessageOrBuilder();
        } else {
          return descriptorReference_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor_reference = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder> 
          getDescriptorReferenceFieldBuilder() {
        if (descriptorReferenceBuilder_ == null) {
          descriptorReferenceBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder>(
                  getDescriptorReference(),
                  getParentForChildren(),
                  isClean());
          descriptorReference_ = null;
        }
        return descriptorReferenceBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData)
    }

    static {
      defaultInstance = new IrSymbolData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData)
  }

  public interface IrSymbolOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     */
    int getIndex();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol}
   */
  public static final class IrSymbol extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol)
      IrSymbolOrBuilder {
    // Use IrSymbol.newBuilder() to construct.
    private IrSymbol(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrSymbol(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrSymbol defaultInstance;
    public static IrSymbol getDefaultInstance() {
      return defaultInstance;
    }

    public IrSymbol getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrSymbol(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbol_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbol_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrSymbol> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrSymbol>() {
      public IrSymbol parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrSymbol(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrSymbol> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     */
    public int getIndex() {
      return index_;
    }

    private void initFields() {
      index_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbol_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbol_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbol_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol)
    }

    static {
      defaultInstance = new IrSymbol(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol)
  }

  public interface IrSymbolTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData> 
        getSymbolsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData getSymbols(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
     */
    int getSymbolsCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolDataOrBuilder> 
        getSymbolsOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolDataOrBuilder getSymbolsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable}
   */
  public static final class IrSymbolTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable)
      IrSymbolTableOrBuilder {
    // Use IrSymbolTable.newBuilder() to construct.
    private IrSymbolTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrSymbolTable(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrSymbolTable defaultInstance;
    public static IrSymbolTable getDefaultInstance() {
      return defaultInstance;
    }

    public IrSymbolTable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrSymbolTable(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                symbols_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData>();
                mutable_bitField0_ |= 0x00000001;
              }
              symbols_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          symbols_ = java.util.Collections.unmodifiableList(symbols_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolTable_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrSymbolTable> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrSymbolTable>() {
      public IrSymbolTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrSymbolTable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrSymbolTable> getParserForType() {
      return PARSER;
    }

    public static final int SYMBOLS_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData> symbols_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData> getSymbolsList() {
      return symbols_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolDataOrBuilder> 
        getSymbolsOrBuilderList() {
      return symbols_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
     */
    public int getSymbolsCount() {
      return symbols_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData getSymbols(int index) {
      return symbols_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolDataOrBuilder getSymbolsOrBuilder(
        int index) {
      return symbols_.get(index);
    }

    private void initFields() {
      symbols_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getSymbolsCount(); i++) {
        if (!getSymbols(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < symbols_.size(); i++) {
        output.writeMessage(1, symbols_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < symbols_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbols_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolTable_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolsBuilder_ == null) {
          symbols_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          symbolsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolTable_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable(this);
        int from_bitField0_ = bitField0_;
        if (symbolsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            symbols_ = java.util.Collections.unmodifiableList(symbols_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.symbols_ = symbols_;
        } else {
          result.symbols_ = symbolsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable.getDefaultInstance()) return this;
        if (symbolsBuilder_ == null) {
          if (!other.symbols_.isEmpty()) {
            if (symbols_.isEmpty()) {
              symbols_ = other.symbols_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSymbolsIsMutable();
              symbols_.addAll(other.symbols_);
            }
            onChanged();
          }
        } else {
          if (!other.symbols_.isEmpty()) {
            if (symbolsBuilder_.isEmpty()) {
              symbolsBuilder_.dispose();
              symbolsBuilder_ = null;
              symbols_ = other.symbols_;
              bitField0_ = (bitField0_ & ~0x00000001);
              symbolsBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSymbolsFieldBuilder() : null;
            } else {
              symbolsBuilder_.addAllMessages(other.symbols_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getSymbolsCount(); i++) {
          if (!getSymbols(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolTable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData> symbols_ =
        java.util.Collections.emptyList();
      private void ensureSymbolsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          symbols_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData>(symbols_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolDataOrBuilder> symbolsBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData> getSymbolsList() {
        if (symbolsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(symbols_);
        } else {
          return symbolsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public int getSymbolsCount() {
        if (symbolsBuilder_ == null) {
          return symbols_.size();
        } else {
          return symbolsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData getSymbols(int index) {
        if (symbolsBuilder_ == null) {
          return symbols_.get(index);
        } else {
          return symbolsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public Builder setSymbols(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData value) {
        if (symbolsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSymbolsIsMutable();
          symbols_.set(index, value);
          onChanged();
        } else {
          symbolsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public Builder setSymbols(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder builderForValue) {
        if (symbolsBuilder_ == null) {
          ensureSymbolsIsMutable();
          symbols_.set(index, builderForValue.build());
          onChanged();
        } else {
          symbolsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public Builder addSymbols(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData value) {
        if (symbolsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSymbolsIsMutable();
          symbols_.add(value);
          onChanged();
        } else {
          symbolsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public Builder addSymbols(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData value) {
        if (symbolsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSymbolsIsMutable();
          symbols_.add(index, value);
          onChanged();
        } else {
          symbolsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public Builder addSymbols(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder builderForValue) {
        if (symbolsBuilder_ == null) {
          ensureSymbolsIsMutable();
          symbols_.add(builderForValue.build());
          onChanged();
        } else {
          symbolsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public Builder addSymbols(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder builderForValue) {
        if (symbolsBuilder_ == null) {
          ensureSymbolsIsMutable();
          symbols_.add(index, builderForValue.build());
          onChanged();
        } else {
          symbolsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public Builder addAllSymbols(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData> values) {
        if (symbolsBuilder_ == null) {
          ensureSymbolsIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, symbols_);
          onChanged();
        } else {
          symbolsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public Builder clearSymbols() {
        if (symbolsBuilder_ == null) {
          symbols_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          symbolsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public Builder removeSymbols(int index) {
        if (symbolsBuilder_ == null) {
          ensureSymbolsIsMutable();
          symbols_.remove(index);
          onChanged();
        } else {
          symbolsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder getSymbolsBuilder(
          int index) {
        return getSymbolsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolDataOrBuilder getSymbolsOrBuilder(
          int index) {
        if (symbolsBuilder_ == null) {
          return symbols_.get(index);  } else {
          return symbolsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolDataOrBuilder> 
           getSymbolsOrBuilderList() {
        if (symbolsBuilder_ != null) {
          return symbolsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(symbols_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder addSymbolsBuilder() {
        return getSymbolsFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder addSymbolsBuilder(
          int index) {
        return getSymbolsFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolData symbols = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder> 
           getSymbolsBuilderList() {
        return getSymbolsFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolDataOrBuilder> 
          getSymbolsFieldBuilder() {
        if (symbolsBuilder_ == null) {
          symbolsBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolData.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolDataOrBuilder>(
                  symbols_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          symbols_ = null;
        }
        return symbolsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable)
    }

    static {
      defaultInstance = new IrSymbolTable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbolTable)
  }

  public interface AnnotationsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder getAnnotationOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations}
   */
  public static final class Annotations extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations)
      AnnotationsOrBuilder {
    // Use Annotations.newBuilder() to construct.
    private Annotations(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Annotations(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Annotations defaultInstance;
    public static Annotations getDefaultInstance() {
      return defaultInstance;
    }

    public Annotations getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Annotations(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall>();
                mutable_bitField0_ |= 0x00000001;
              }
              annotation_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          annotation_ = java.util.Collections.unmodifiableList(annotation_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Annotations_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Annotations_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Annotations> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Annotations>() {
      public Annotations parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Annotations(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Annotations> getParserForType() {
      return PARSER;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
     */
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    private void initFields() {
      annotation_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(1, annotation_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, annotation_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Annotations_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Annotations_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAnnotationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Annotations_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations(this);
        int from_bitField0_ = bitField0_;
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance()) return this;
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000001);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall>(annotation_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall annotation = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations)
    }

    static {
      defaultInstance = new Annotations(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations)
  }

  public interface TypeArgumentsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> 
        getTypeArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getTypeArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
     */
    int getTypeArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
        getTypeArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeArgumentOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments}
   */
  public static final class TypeArguments extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments)
      TypeArgumentsOrBuilder {
    // Use TypeArguments.newBuilder() to construct.
    private TypeArguments(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TypeArguments(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TypeArguments defaultInstance;
    public static TypeArguments getDefaultInstance() {
      return defaultInstance;
    }

    public TypeArguments getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TypeArguments(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                typeArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex>();
                mutable_bitField0_ |= 0x00000001;
              }
              typeArgument_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          typeArgument_ = java.util.Collections.unmodifiableList(typeArgument_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_TypeArguments_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_TypeArguments_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<TypeArguments> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<TypeArguments>() {
      public TypeArguments parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new TypeArguments(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<TypeArguments> getParserForType() {
      return PARSER;
    }

    public static final int TYPE_ARGUMENT_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> typeArgument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> getTypeArgumentList() {
      return typeArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
        getTypeArgumentOrBuilderList() {
      return typeArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
     */
    public int getTypeArgumentCount() {
      return typeArgument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getTypeArgument(int index) {
      return typeArgument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeArgumentOrBuilder(
        int index) {
      return typeArgument_.get(index);
    }

    private void initFields() {
      typeArgument_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getTypeArgumentCount(); i++) {
        if (!getTypeArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < typeArgument_.size(); i++) {
        output.writeMessage(1, typeArgument_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < typeArgument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, typeArgument_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArgumentsOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_TypeArguments_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_TypeArguments_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTypeArgumentFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (typeArgumentBuilder_ == null) {
          typeArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          typeArgumentBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_TypeArguments_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments(this);
        int from_bitField0_ = bitField0_;
        if (typeArgumentBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            typeArgument_ = java.util.Collections.unmodifiableList(typeArgument_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.typeArgument_ = typeArgument_;
        } else {
          result.typeArgument_ = typeArgumentBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.getDefaultInstance()) return this;
        if (typeArgumentBuilder_ == null) {
          if (!other.typeArgument_.isEmpty()) {
            if (typeArgument_.isEmpty()) {
              typeArgument_ = other.typeArgument_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTypeArgumentIsMutable();
              typeArgument_.addAll(other.typeArgument_);
            }
            onChanged();
          }
        } else {
          if (!other.typeArgument_.isEmpty()) {
            if (typeArgumentBuilder_.isEmpty()) {
              typeArgumentBuilder_.dispose();
              typeArgumentBuilder_ = null;
              typeArgument_ = other.typeArgument_;
              bitField0_ = (bitField0_ & ~0x00000001);
              typeArgumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeArgumentFieldBuilder() : null;
            } else {
              typeArgumentBuilder_.addAllMessages(other.typeArgument_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getTypeArgumentCount(); i++) {
          if (!getTypeArgument(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> typeArgument_ =
        java.util.Collections.emptyList();
      private void ensureTypeArgumentIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          typeArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex>(typeArgument_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> typeArgumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> getTypeArgumentList() {
        if (typeArgumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeArgument_);
        } else {
          return typeArgumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public int getTypeArgumentCount() {
        if (typeArgumentBuilder_ == null) {
          return typeArgument_.size();
        } else {
          return typeArgumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getTypeArgument(int index) {
        if (typeArgumentBuilder_ == null) {
          return typeArgument_.get(index);
        } else {
          return typeArgumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public Builder setTypeArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeArgumentIsMutable();
          typeArgument_.set(index, value);
          onChanged();
        } else {
          typeArgumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public Builder setTypeArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (typeArgumentBuilder_ == null) {
          ensureTypeArgumentIsMutable();
          typeArgument_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeArgumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public Builder addTypeArgument(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeArgumentIsMutable();
          typeArgument_.add(value);
          onChanged();
        } else {
          typeArgumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public Builder addTypeArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeArgumentIsMutable();
          typeArgument_.add(index, value);
          onChanged();
        } else {
          typeArgumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public Builder addTypeArgument(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (typeArgumentBuilder_ == null) {
          ensureTypeArgumentIsMutable();
          typeArgument_.add(builderForValue.build());
          onChanged();
        } else {
          typeArgumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public Builder addTypeArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (typeArgumentBuilder_ == null) {
          ensureTypeArgumentIsMutable();
          typeArgument_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeArgumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public Builder addAllTypeArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> values) {
        if (typeArgumentBuilder_ == null) {
          ensureTypeArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeArgument_);
          onChanged();
        } else {
          typeArgumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public Builder clearTypeArgument() {
        if (typeArgumentBuilder_ == null) {
          typeArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          typeArgumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public Builder removeTypeArgument(int index) {
        if (typeArgumentBuilder_ == null) {
          ensureTypeArgumentIsMutable();
          typeArgument_.remove(index);
          onChanged();
        } else {
          typeArgumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getTypeArgumentBuilder(
          int index) {
        return getTypeArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeArgumentOrBuilder(
          int index) {
        if (typeArgumentBuilder_ == null) {
          return typeArgument_.get(index);  } else {
          return typeArgumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
           getTypeArgumentOrBuilderList() {
        if (typeArgumentBuilder_ != null) {
          return typeArgumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeArgument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder addTypeArgumentBuilder() {
        return getTypeArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder addTypeArgumentBuilder(
          int index) {
        return getTypeArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type_argument = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder> 
           getTypeArgumentBuilderList() {
        return getTypeArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getTypeArgumentFieldBuilder() {
        if (typeArgumentBuilder_ == null) {
          typeArgumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  typeArgument_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          typeArgument_ = null;
        }
        return typeArgumentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments)
    }

    static {
      defaultInstance = new TypeArguments(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments)
  }

  public interface IrStarProjectionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool void = 1;</code>
     */
    boolean hasVoid();
    /**
     * <code>optional bool void = 1;</code>
     */
    boolean getVoid();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection}
   */
  public static final class IrStarProjection extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection)
      IrStarProjectionOrBuilder {
    // Use IrStarProjection.newBuilder() to construct.
    private IrStarProjection(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrStarProjection(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrStarProjection defaultInstance;
    public static IrStarProjection getDefaultInstance() {
      return defaultInstance;
    }

    public IrStarProjection getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrStarProjection(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              void_ = input.readBool();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStarProjection_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStarProjection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrStarProjection> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrStarProjection>() {
      public IrStarProjection parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrStarProjection(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrStarProjection> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VOID_FIELD_NUMBER = 1;
    private boolean void_;
    /**
     * <code>optional bool void = 1;</code>
     */
    public boolean hasVoid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool void = 1;</code>
     */
    public boolean getVoid() {
      return void_;
    }

    private void initFields() {
      void_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, void_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(1, void_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjectionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStarProjection_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStarProjection_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        void_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStarProjection_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.void_ = void_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.getDefaultInstance()) return this;
        if (other.hasVoid()) {
          setVoid(other.getVoid());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean void_ ;
      /**
       * <code>optional bool void = 1;</code>
       */
      public boolean hasVoid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool void = 1;</code>
       */
      public boolean getVoid() {
        return void_;
      }
      /**
       * <code>optional bool void = 1;</code>
       */
      public Builder setVoid(boolean value) {
        bitField0_ |= 0x00000001;
        void_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool void = 1;</code>
       */
      public Builder clearVoid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        void_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection)
    }

    static {
      defaultInstance = new IrStarProjection(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection)
  }

  public interface IrTypeProjectionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 1;</code>
     */
    boolean hasVariance();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance getVariance();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection}
   */
  public static final class IrTypeProjection extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection)
      IrTypeProjectionOrBuilder {
    // Use IrTypeProjection.newBuilder() to construct.
    private IrTypeProjection(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrTypeProjection(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrTypeProjection defaultInstance;
    public static IrTypeProjection getDefaultInstance() {
      return defaultInstance;
    }

    public IrTypeProjection getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrTypeProjection(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance value = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                variance_ = value;
              }
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = type_.toBuilder();
              }
              type_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(type_);
                type_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeProjection_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeProjection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrTypeProjection> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrTypeProjection>() {
      public IrTypeProjection parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrTypeProjection(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrTypeProjection> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VARIANCE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance variance_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 1;</code>
     */
    public boolean hasVariance() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance getVariance() {
      return variance_;
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex type_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType() {
      return type_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder() {
      return type_;
    }

    private void initFields() {
      variance_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance.IN;
      type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasVariance()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getType().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, variance_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, type_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(1, variance_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, type_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjectionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeProjection_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeProjection_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        variance_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance.IN;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeProjection_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.variance_ = variance_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (typeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.getDefaultInstance()) return this;
        if (other.hasVariance()) {
          setVariance(other.getVariance());
        }
        if (other.hasType()) {
          mergeType(other.getType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVariance()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!getType().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance variance_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance.IN;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 1;</code>
       */
      public boolean hasVariance() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance getVariance() {
        return variance_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 1;</code>
       */
      public Builder setVariance(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        variance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 1;</code>
       */
      public Builder clearVariance() {
        bitField0_ = (bitField0_ & ~0x00000001);
        variance_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance.IN;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> typeBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType() {
        if (typeBuilder_ == null) {
          return type_;
        } else {
          return typeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public Builder setType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          typeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public Builder setType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (typeBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public Builder mergeType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              type_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) {
            type_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder(type_).mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          typeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
          onChanged();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getTypeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          return type_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  getType(),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection)
    }

    static {
      defaultInstance = new IrTypeProjection(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection)
  }

  public interface IrTypeArgumentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
     */
    boolean hasStar();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection getStar();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjectionOrBuilder getStarOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection getType();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjectionOrBuilder getTypeOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument}
   */
  public static final class IrTypeArgument extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument)
      IrTypeArgumentOrBuilder {
    // Use IrTypeArgument.newBuilder() to construct.
    private IrTypeArgument(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrTypeArgument(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrTypeArgument defaultInstance;
    public static IrTypeArgument getDefaultInstance() {
      return defaultInstance;
    }

    public IrTypeArgument getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrTypeArgument(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.Builder subBuilder = null;
              if (kindCase_ == 1) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) kind_).toBuilder();
              }
              kind_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) kind_);
                kind_ = subBuilder.buildPartial();
              }
              kindCase_ = 1;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.Builder subBuilder = null;
              if (kindCase_ == 2) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) kind_).toBuilder();
              }
              kind_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) kind_);
                kind_ = subBuilder.buildPartial();
              }
              kindCase_ = 2;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeArgument_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeArgument_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrTypeArgument> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrTypeArgument>() {
      public IrTypeArgument parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrTypeArgument(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrTypeArgument> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int kindCase_ = 0;
    private java.lang.Object kind_;
    public enum KindCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      STAR(1),
      TYPE(2),
      KIND_NOT_SET(0);
      private int value = 0;
      private KindCase(int value) {
        this.value = value;
      }
      public static KindCase valueOf(int value) {
        switch (value) {
          case 1: return STAR;
          case 2: return TYPE;
          case 0: return KIND_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public KindCase
    getKindCase() {
      return KindCase.valueOf(
          kindCase_);
    }

    public static final int STAR_FIELD_NUMBER = 1;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
     */
    public boolean hasStar() {
      return kindCase_ == 1;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection getStar() {
      if (kindCase_ == 1) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) kind_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjectionOrBuilder getStarOrBuilder() {
      if (kindCase_ == 1) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) kind_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.getDefaultInstance();
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
     */
    public boolean hasType() {
      return kindCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection getType() {
      if (kindCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) kind_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjectionOrBuilder getTypeOrBuilder() {
      if (kindCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) kind_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.getDefaultInstance();
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasType()) {
        if (!getType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (kindCase_ == 1) {
        output.writeMessage(1, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) kind_);
      }
      if (kindCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) kind_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (kindCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) kind_);
      }
      if (kindCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) kind_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgumentOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeArgument_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeArgument_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        kindCase_ = 0;
        kind_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeArgument_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (kindCase_ == 1) {
          if (starBuilder_ == null) {
            result.kind_ = kind_;
          } else {
            result.kind_ = starBuilder_.build();
          }
        }
        if (kindCase_ == 2) {
          if (typeBuilder_ == null) {
            result.kind_ = kind_;
          } else {
            result.kind_ = typeBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.kindCase_ = kindCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.getDefaultInstance()) return this;
        switch (other.getKindCase()) {
          case STAR: {
            mergeStar(other.getStar());
            break;
          }
          case TYPE: {
            mergeType(other.getType());
            break;
          }
          case KIND_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasType()) {
          if (!getType().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int kindCase_ = 0;
      private java.lang.Object kind_;
      public KindCase
          getKindCase() {
        return KindCase.valueOf(
            kindCase_);
      }

      public Builder clearKind() {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjectionOrBuilder> starBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
       */
      public boolean hasStar() {
        return kindCase_ == 1;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection getStar() {
        if (starBuilder_ == null) {
          if (kindCase_ == 1) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) kind_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.getDefaultInstance();
        } else {
          if (kindCase_ == 1) {
            return starBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
       */
      public Builder setStar(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection value) {
        if (starBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kind_ = value;
          onChanged();
        } else {
          starBuilder_.setMessage(value);
        }
        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
       */
      public Builder setStar(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.Builder builderForValue) {
        if (starBuilder_ == null) {
          kind_ = builderForValue.build();
          onChanged();
        } else {
          starBuilder_.setMessage(builderForValue.build());
        }
        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
       */
      public Builder mergeStar(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection value) {
        if (starBuilder_ == null) {
          if (kindCase_ == 1 &&
              kind_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.getDefaultInstance()) {
            kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) kind_)
                .mergeFrom(value).buildPartial();
          } else {
            kind_ = value;
          }
          onChanged();
        } else {
          if (kindCase_ == 1) {
            starBuilder_.mergeFrom(value);
          }
          starBuilder_.setMessage(value);
        }
        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
       */
      public Builder clearStar() {
        if (starBuilder_ == null) {
          if (kindCase_ == 1) {
            kindCase_ = 0;
            kind_ = null;
            onChanged();
          }
        } else {
          if (kindCase_ == 1) {
            kindCase_ = 0;
            kind_ = null;
          }
          starBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.Builder getStarBuilder() {
        return getStarFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjectionOrBuilder getStarOrBuilder() {
        if ((kindCase_ == 1) && (starBuilder_ != null)) {
          return starBuilder_.getMessageOrBuilder();
        } else {
          if (kindCase_ == 1) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) kind_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStarProjection star = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjectionOrBuilder> 
          getStarFieldBuilder() {
        if (starBuilder_ == null) {
          if (!(kindCase_ == 1)) {
            kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.getDefaultInstance();
          }
          starBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjectionOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStarProjection) kind_,
                  getParentForChildren(),
                  isClean());
          kind_ = null;
        }
        kindCase_ = 1;
        return starBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjectionOrBuilder> typeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
       */
      public boolean hasType() {
        return kindCase_ == 2;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection getType() {
        if (typeBuilder_ == null) {
          if (kindCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) kind_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.getDefaultInstance();
        } else {
          if (kindCase_ == 2) {
            return typeBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
       */
      public Builder setType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kind_ = value;
          onChanged();
        } else {
          typeBuilder_.setMessage(value);
        }
        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
       */
      public Builder setType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.Builder builderForValue) {
        if (typeBuilder_ == null) {
          kind_ = builderForValue.build();
          onChanged();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }
        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
       */
      public Builder mergeType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection value) {
        if (typeBuilder_ == null) {
          if (kindCase_ == 2 &&
              kind_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.getDefaultInstance()) {
            kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) kind_)
                .mergeFrom(value).buildPartial();
          } else {
            kind_ = value;
          }
          onChanged();
        } else {
          if (kindCase_ == 2) {
            typeBuilder_.mergeFrom(value);
          }
          typeBuilder_.setMessage(value);
        }
        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          if (kindCase_ == 2) {
            kindCase_ = 0;
            kind_ = null;
            onChanged();
          }
        } else {
          if (kindCase_ == 2) {
            kindCase_ = 0;
            kind_ = null;
          }
          typeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.Builder getTypeBuilder() {
        return getTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjectionOrBuilder getTypeOrBuilder() {
        if ((kindCase_ == 2) && (typeBuilder_ != null)) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          if (kindCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) kind_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeProjection type = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjectionOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          if (!(kindCase_ == 2)) {
            kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.getDefaultInstance();
          }
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjectionOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeProjection) kind_,
                  getParentForChildren(),
                  isClean());
          kind_ = null;
        }
        kindCase_ = 2;
        return typeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument)
    }

    static {
      defaultInstance = new IrTypeArgument(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument)
  }

  public interface IrSimpleTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    boolean hasAnnotations();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
     */
    boolean hasClassifier();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getClassifier();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getClassifierOrBuilder();

    /**
     * <code>required bool has_question_mark = 3;</code>
     */
    boolean hasHasQuestionMark();
    /**
     * <code>required bool has_question_mark = 3;</code>
     */
    boolean getHasQuestionMark();

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
     */
    int getArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgumentOrBuilder> 
        getArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgumentOrBuilder getArgumentOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType}
   */
  public static final class IrSimpleType extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType)
      IrSimpleTypeOrBuilder {
    // Use IrSimpleType.newBuilder() to construct.
    private IrSimpleType(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrSimpleType(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrSimpleType defaultInstance;
    public static IrSimpleType getDefaultInstance() {
      return defaultInstance;
    }

    public IrSimpleType getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrSimpleType(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = annotations_.toBuilder();
              }
              annotations_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(annotations_);
                annotations_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = classifier_.toBuilder();
              }
              classifier_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(classifier_);
                classifier_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              hasQuestionMark_ = input.readBool();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                argument_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument>();
                mutable_bitField0_ |= 0x00000008;
              }
              argument_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          argument_ = java.util.Collections.unmodifiableList(argument_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSimpleType_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSimpleType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrSimpleType> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrSimpleType>() {
      public IrSimpleType parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrSimpleType(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrSimpleType> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ANNOTATIONS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations annotations_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    public boolean hasAnnotations() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations() {
      return annotations_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder() {
      return annotations_;
    }

    public static final int CLASSIFIER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol classifier_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
     */
    public boolean hasClassifier() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getClassifier() {
      return classifier_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getClassifierOrBuilder() {
      return classifier_;
    }

    public static final int HAS_QUESTION_MARK_FIELD_NUMBER = 3;
    private boolean hasQuestionMark_;
    /**
     * <code>required bool has_question_mark = 3;</code>
     */
    public boolean hasHasQuestionMark() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool has_question_mark = 3;</code>
     */
    public boolean getHasQuestionMark() {
      return hasQuestionMark_;
    }

    public static final int ARGUMENT_FIELD_NUMBER = 4;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgumentOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
     */
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgumentOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }

    private void initFields() {
      annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
      classifier_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      hasQuestionMark_ = false;
      argument_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAnnotations()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasClassifier()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHasQuestionMark()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAnnotations().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getClassifier().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getArgumentCount(); i++) {
        if (!getArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, annotations_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, classifier_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, hasQuestionMark_);
      }
      for (int i = 0; i < argument_.size(); i++) {
        output.writeMessage(4, argument_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, annotations_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, classifier_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(3, hasQuestionMark_);
      }
      for (int i = 0; i < argument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, argument_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleTypeOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSimpleType_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSimpleType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAnnotationsFieldBuilder();
          getClassifierFieldBuilder();
          getArgumentFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (annotationsBuilder_ == null) {
          annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
        } else {
          annotationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (classifierBuilder_ == null) {
          classifier_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          classifierBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        hasQuestionMark_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSimpleType_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (annotationsBuilder_ == null) {
          result.annotations_ = annotations_;
        } else {
          result.annotations_ = annotationsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (classifierBuilder_ == null) {
          result.classifier_ = classifier_;
        } else {
          result.classifier_ = classifierBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.hasQuestionMark_ = hasQuestionMark_;
        if (argumentBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            argument_ = java.util.Collections.unmodifiableList(argument_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.getDefaultInstance()) return this;
        if (other.hasAnnotations()) {
          mergeAnnotations(other.getAnnotations());
        }
        if (other.hasClassifier()) {
          mergeClassifier(other.getClassifier());
        }
        if (other.hasHasQuestionMark()) {
          setHasQuestionMark(other.getHasQuestionMark());
        }
        if (argumentBuilder_ == null) {
          if (!other.argument_.isEmpty()) {
            if (argument_.isEmpty()) {
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureArgumentIsMutable();
              argument_.addAll(other.argument_);
            }
            onChanged();
          }
        } else {
          if (!other.argument_.isEmpty()) {
            if (argumentBuilder_.isEmpty()) {
              argumentBuilder_.dispose();
              argumentBuilder_ = null;
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000008);
              argumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArgumentFieldBuilder() : null;
            } else {
              argumentBuilder_.addAllMessages(other.argument_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAnnotations()) {
          
          return false;
        }
        if (!hasClassifier()) {
          
          return false;
        }
        if (!hasHasQuestionMark()) {
          
          return false;
        }
        if (!getAnnotations().isInitialized()) {
          
          return false;
        }
        if (!getClassifier().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getArgumentCount(); i++) {
          if (!getArgument(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder> annotationsBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public boolean hasAnnotations() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations() {
        if (annotationsBuilder_ == null) {
          return annotations_;
        } else {
          return annotationsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder setAnnotations(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations value) {
        if (annotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          annotations_ = value;
          onChanged();
        } else {
          annotationsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder setAnnotations(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder builderForValue) {
        if (annotationsBuilder_ == null) {
          annotations_ = builderForValue.build();
          onChanged();
        } else {
          annotationsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder mergeAnnotations(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations value) {
        if (annotationsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              annotations_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance()) {
            annotations_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.newBuilder(annotations_).mergeFrom(value).buildPartial();
          } else {
            annotations_ = value;
          }
          onChanged();
        } else {
          annotationsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder clearAnnotations() {
        if (annotationsBuilder_ == null) {
          annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
          onChanged();
        } else {
          annotationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder getAnnotationsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getAnnotationsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder() {
        if (annotationsBuilder_ != null) {
          return annotationsBuilder_.getMessageOrBuilder();
        } else {
          return annotations_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder> 
          getAnnotationsFieldBuilder() {
        if (annotationsBuilder_ == null) {
          annotationsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder>(
                  getAnnotations(),
                  getParentForChildren(),
                  isClean());
          annotations_ = null;
        }
        return annotationsBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol classifier_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> classifierBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
       */
      public boolean hasClassifier() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getClassifier() {
        if (classifierBuilder_ == null) {
          return classifier_;
        } else {
          return classifierBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
       */
      public Builder setClassifier(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (classifierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          classifier_ = value;
          onChanged();
        } else {
          classifierBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
       */
      public Builder setClassifier(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (classifierBuilder_ == null) {
          classifier_ = builderForValue.build();
          onChanged();
        } else {
          classifierBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
       */
      public Builder mergeClassifier(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (classifierBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              classifier_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            classifier_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(classifier_).mergeFrom(value).buildPartial();
          } else {
            classifier_ = value;
          }
          onChanged();
        } else {
          classifierBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
       */
      public Builder clearClassifier() {
        if (classifierBuilder_ == null) {
          classifier_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          classifierBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getClassifierBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getClassifierFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getClassifierOrBuilder() {
        if (classifierBuilder_ != null) {
          return classifierBuilder_.getMessageOrBuilder();
        } else {
          return classifier_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol classifier = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getClassifierFieldBuilder() {
        if (classifierBuilder_ == null) {
          classifierBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getClassifier(),
                  getParentForChildren(),
                  isClean());
          classifier_ = null;
        }
        return classifierBuilder_;
      }

      private boolean hasQuestionMark_ ;
      /**
       * <code>required bool has_question_mark = 3;</code>
       */
      public boolean hasHasQuestionMark() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool has_question_mark = 3;</code>
       */
      public boolean getHasQuestionMark() {
        return hasQuestionMark_;
      }
      /**
       * <code>required bool has_question_mark = 3;</code>
       */
      public Builder setHasQuestionMark(boolean value) {
        bitField0_ |= 0x00000004;
        hasQuestionMark_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool has_question_mark = 3;</code>
       */
      public Builder clearHasQuestionMark() {
        bitField0_ = (bitField0_ & ~0x00000004);
        hasQuestionMark_ = false;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument> argument_ =
        java.util.Collections.emptyList();
      private void ensureArgumentIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          argument_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument>(argument_);
          bitField0_ |= 0x00000008;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgumentOrBuilder> argumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument> getArgumentList() {
        if (argumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(argument_);
        } else {
          return argumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public int getArgumentCount() {
        if (argumentBuilder_ == null) {
          return argument_.size();
        } else {
          return argumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument getArgument(int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);
        } else {
          return argumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.set(index, value);
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(index, value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument> values) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, argument_);
          onChanged();
        } else {
          argumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public Builder removeArgument(int index) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.remove(index);
          onChanged();
        } else {
          argumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder getArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgumentOrBuilder getArgumentOrBuilder(
          int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);  } else {
          return argumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgumentOrBuilder> 
           getArgumentOrBuilderList() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(argument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder addArgumentBuilder() {
        return getArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder addArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeArgument argument = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder> 
           getArgumentBuilderList() {
        return getArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgumentOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgument.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeArgumentOrBuilder>(
                  argument_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType)
    }

    static {
      defaultInstance = new IrSimpleType(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType)
  }

  public interface IrDynamicTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    boolean hasAnnotations();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType}
   */
  public static final class IrDynamicType extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType)
      IrDynamicTypeOrBuilder {
    // Use IrDynamicType.newBuilder() to construct.
    private IrDynamicType(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrDynamicType(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrDynamicType defaultInstance;
    public static IrDynamicType getDefaultInstance() {
      return defaultInstance;
    }

    public IrDynamicType getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrDynamicType(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = annotations_.toBuilder();
              }
              annotations_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(annotations_);
                annotations_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDynamicType_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDynamicType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrDynamicType> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrDynamicType>() {
      public IrDynamicType parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrDynamicType(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrDynamicType> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ANNOTATIONS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations annotations_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    public boolean hasAnnotations() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations() {
      return annotations_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder() {
      return annotations_;
    }

    private void initFields() {
      annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAnnotations()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAnnotations().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, annotations_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, annotations_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicTypeOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDynamicType_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDynamicType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAnnotationsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (annotationsBuilder_ == null) {
          annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
        } else {
          annotationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDynamicType_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (annotationsBuilder_ == null) {
          result.annotations_ = annotations_;
        } else {
          result.annotations_ = annotationsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.getDefaultInstance()) return this;
        if (other.hasAnnotations()) {
          mergeAnnotations(other.getAnnotations());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAnnotations()) {
          
          return false;
        }
        if (!getAnnotations().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder> annotationsBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public boolean hasAnnotations() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations() {
        if (annotationsBuilder_ == null) {
          return annotations_;
        } else {
          return annotationsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder setAnnotations(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations value) {
        if (annotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          annotations_ = value;
          onChanged();
        } else {
          annotationsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder setAnnotations(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder builderForValue) {
        if (annotationsBuilder_ == null) {
          annotations_ = builderForValue.build();
          onChanged();
        } else {
          annotationsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder mergeAnnotations(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations value) {
        if (annotationsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              annotations_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance()) {
            annotations_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.newBuilder(annotations_).mergeFrom(value).buildPartial();
          } else {
            annotations_ = value;
          }
          onChanged();
        } else {
          annotationsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder clearAnnotations() {
        if (annotationsBuilder_ == null) {
          annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
          onChanged();
        } else {
          annotationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder getAnnotationsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getAnnotationsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder() {
        if (annotationsBuilder_ != null) {
          return annotationsBuilder_.getMessageOrBuilder();
        } else {
          return annotations_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder> 
          getAnnotationsFieldBuilder() {
        if (annotationsBuilder_ == null) {
          annotationsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder>(
                  getAnnotations(),
                  getParentForChildren(),
                  isClean());
          annotations_ = null;
        }
        return annotationsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType)
    }

    static {
      defaultInstance = new IrDynamicType(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType)
  }

  public interface IrErrorTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    boolean hasAnnotations();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType}
   */
  public static final class IrErrorType extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType)
      IrErrorTypeOrBuilder {
    // Use IrErrorType.newBuilder() to construct.
    private IrErrorType(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrErrorType(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrErrorType defaultInstance;
    public static IrErrorType getDefaultInstance() {
      return defaultInstance;
    }

    public IrErrorType getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrErrorType(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = annotations_.toBuilder();
              }
              annotations_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(annotations_);
                annotations_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrErrorType_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrErrorType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrErrorType> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrErrorType>() {
      public IrErrorType parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrErrorType(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrErrorType> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ANNOTATIONS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations annotations_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    public boolean hasAnnotations() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations() {
      return annotations_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder() {
      return annotations_;
    }

    private void initFields() {
      annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAnnotations()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAnnotations().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, annotations_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, annotations_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorTypeOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrErrorType_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrErrorType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAnnotationsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (annotationsBuilder_ == null) {
          annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
        } else {
          annotationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrErrorType_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (annotationsBuilder_ == null) {
          result.annotations_ = annotations_;
        } else {
          result.annotations_ = annotationsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.getDefaultInstance()) return this;
        if (other.hasAnnotations()) {
          mergeAnnotations(other.getAnnotations());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAnnotations()) {
          
          return false;
        }
        if (!getAnnotations().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder> annotationsBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public boolean hasAnnotations() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations() {
        if (annotationsBuilder_ == null) {
          return annotations_;
        } else {
          return annotationsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder setAnnotations(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations value) {
        if (annotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          annotations_ = value;
          onChanged();
        } else {
          annotationsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder setAnnotations(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder builderForValue) {
        if (annotationsBuilder_ == null) {
          annotations_ = builderForValue.build();
          onChanged();
        } else {
          annotationsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder mergeAnnotations(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations value) {
        if (annotationsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              annotations_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance()) {
            annotations_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.newBuilder(annotations_).mergeFrom(value).buildPartial();
          } else {
            annotations_ = value;
          }
          onChanged();
        } else {
          annotationsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public Builder clearAnnotations() {
        if (annotationsBuilder_ == null) {
          annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
          onChanged();
        } else {
          annotationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder getAnnotationsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getAnnotationsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder() {
        if (annotationsBuilder_ != null) {
          return annotationsBuilder_.getMessageOrBuilder();
        } else {
          return annotations_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder> 
          getAnnotationsFieldBuilder() {
        if (annotationsBuilder_ == null) {
          annotationsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder>(
                  getAnnotations(),
                  getParentForChildren(),
                  isClean());
          annotations_ = null;
        }
        return annotationsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType)
    }

    static {
      defaultInstance = new IrErrorType(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType)
  }

  public interface IrTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
     */
    boolean hasSimple();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType getSimple();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleTypeOrBuilder getSimpleOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
     */
    boolean hasDynamic();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType getDynamic();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicTypeOrBuilder getDynamicOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
     */
    boolean hasError();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType getError();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorTypeOrBuilder getErrorOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType}
   */
  public static final class IrType extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType)
      IrTypeOrBuilder {
    // Use IrType.newBuilder() to construct.
    private IrType(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrType(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrType defaultInstance;
    public static IrType getDefaultInstance() {
      return defaultInstance;
    }

    public IrType getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrType(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.Builder subBuilder = null;
              if (kindCase_ == 1) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) kind_).toBuilder();
              }
              kind_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) kind_);
                kind_ = subBuilder.buildPartial();
              }
              kindCase_ = 1;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.Builder subBuilder = null;
              if (kindCase_ == 2) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) kind_).toBuilder();
              }
              kind_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) kind_);
                kind_ = subBuilder.buildPartial();
              }
              kindCase_ = 2;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.Builder subBuilder = null;
              if (kindCase_ == 3) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) kind_).toBuilder();
              }
              kind_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) kind_);
                kind_ = subBuilder.buildPartial();
              }
              kindCase_ = 3;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrType_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrType> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrType>() {
      public IrType parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrType(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrType> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int kindCase_ = 0;
    private java.lang.Object kind_;
    public enum KindCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      SIMPLE(1),
      DYNAMIC(2),
      ERROR(3),
      KIND_NOT_SET(0);
      private int value = 0;
      private KindCase(int value) {
        this.value = value;
      }
      public static KindCase valueOf(int value) {
        switch (value) {
          case 1: return SIMPLE;
          case 2: return DYNAMIC;
          case 3: return ERROR;
          case 0: return KIND_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public KindCase
    getKindCase() {
      return KindCase.valueOf(
          kindCase_);
    }

    public static final int SIMPLE_FIELD_NUMBER = 1;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
     */
    public boolean hasSimple() {
      return kindCase_ == 1;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType getSimple() {
      if (kindCase_ == 1) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) kind_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleTypeOrBuilder getSimpleOrBuilder() {
      if (kindCase_ == 1) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) kind_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.getDefaultInstance();
    }

    public static final int DYNAMIC_FIELD_NUMBER = 2;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
     */
    public boolean hasDynamic() {
      return kindCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType getDynamic() {
      if (kindCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) kind_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicTypeOrBuilder getDynamicOrBuilder() {
      if (kindCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) kind_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.getDefaultInstance();
    }

    public static final int ERROR_FIELD_NUMBER = 3;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
     */
    public boolean hasError() {
      return kindCase_ == 3;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType getError() {
      if (kindCase_ == 3) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) kind_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorTypeOrBuilder getErrorOrBuilder() {
      if (kindCase_ == 3) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) kind_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.getDefaultInstance();
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasSimple()) {
        if (!getSimple().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDynamic()) {
        if (!getDynamic().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasError()) {
        if (!getError().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (kindCase_ == 1) {
        output.writeMessage(1, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) kind_);
      }
      if (kindCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) kind_);
      }
      if (kindCase_ == 3) {
        output.writeMessage(3, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) kind_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (kindCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) kind_);
      }
      if (kindCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) kind_);
      }
      if (kindCase_ == 3) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) kind_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrType_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        kindCase_ = 0;
        kind_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrType_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (kindCase_ == 1) {
          if (simpleBuilder_ == null) {
            result.kind_ = kind_;
          } else {
            result.kind_ = simpleBuilder_.build();
          }
        }
        if (kindCase_ == 2) {
          if (dynamicBuilder_ == null) {
            result.kind_ = kind_;
          } else {
            result.kind_ = dynamicBuilder_.build();
          }
        }
        if (kindCase_ == 3) {
          if (errorBuilder_ == null) {
            result.kind_ = kind_;
          } else {
            result.kind_ = errorBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.kindCase_ = kindCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.getDefaultInstance()) return this;
        switch (other.getKindCase()) {
          case SIMPLE: {
            mergeSimple(other.getSimple());
            break;
          }
          case DYNAMIC: {
            mergeDynamic(other.getDynamic());
            break;
          }
          case ERROR: {
            mergeError(other.getError());
            break;
          }
          case KIND_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasSimple()) {
          if (!getSimple().isInitialized()) {
            
            return false;
          }
        }
        if (hasDynamic()) {
          if (!getDynamic().isInitialized()) {
            
            return false;
          }
        }
        if (hasError()) {
          if (!getError().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int kindCase_ = 0;
      private java.lang.Object kind_;
      public KindCase
          getKindCase() {
        return KindCase.valueOf(
            kindCase_);
      }

      public Builder clearKind() {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleTypeOrBuilder> simpleBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
       */
      public boolean hasSimple() {
        return kindCase_ == 1;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType getSimple() {
        if (simpleBuilder_ == null) {
          if (kindCase_ == 1) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) kind_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.getDefaultInstance();
        } else {
          if (kindCase_ == 1) {
            return simpleBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
       */
      public Builder setSimple(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType value) {
        if (simpleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kind_ = value;
          onChanged();
        } else {
          simpleBuilder_.setMessage(value);
        }
        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
       */
      public Builder setSimple(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.Builder builderForValue) {
        if (simpleBuilder_ == null) {
          kind_ = builderForValue.build();
          onChanged();
        } else {
          simpleBuilder_.setMessage(builderForValue.build());
        }
        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
       */
      public Builder mergeSimple(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType value) {
        if (simpleBuilder_ == null) {
          if (kindCase_ == 1 &&
              kind_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.getDefaultInstance()) {
            kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) kind_)
                .mergeFrom(value).buildPartial();
          } else {
            kind_ = value;
          }
          onChanged();
        } else {
          if (kindCase_ == 1) {
            simpleBuilder_.mergeFrom(value);
          }
          simpleBuilder_.setMessage(value);
        }
        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
       */
      public Builder clearSimple() {
        if (simpleBuilder_ == null) {
          if (kindCase_ == 1) {
            kindCase_ = 0;
            kind_ = null;
            onChanged();
          }
        } else {
          if (kindCase_ == 1) {
            kindCase_ = 0;
            kind_ = null;
          }
          simpleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.Builder getSimpleBuilder() {
        return getSimpleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleTypeOrBuilder getSimpleOrBuilder() {
        if ((kindCase_ == 1) && (simpleBuilder_ != null)) {
          return simpleBuilder_.getMessageOrBuilder();
        } else {
          if (kindCase_ == 1) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) kind_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSimpleType simple = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleTypeOrBuilder> 
          getSimpleFieldBuilder() {
        if (simpleBuilder_ == null) {
          if (!(kindCase_ == 1)) {
            kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.getDefaultInstance();
          }
          simpleBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleTypeOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSimpleType) kind_,
                  getParentForChildren(),
                  isClean());
          kind_ = null;
        }
        kindCase_ = 1;
        return simpleBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicTypeOrBuilder> dynamicBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
       */
      public boolean hasDynamic() {
        return kindCase_ == 2;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType getDynamic() {
        if (dynamicBuilder_ == null) {
          if (kindCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) kind_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.getDefaultInstance();
        } else {
          if (kindCase_ == 2) {
            return dynamicBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
       */
      public Builder setDynamic(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType value) {
        if (dynamicBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kind_ = value;
          onChanged();
        } else {
          dynamicBuilder_.setMessage(value);
        }
        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
       */
      public Builder setDynamic(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.Builder builderForValue) {
        if (dynamicBuilder_ == null) {
          kind_ = builderForValue.build();
          onChanged();
        } else {
          dynamicBuilder_.setMessage(builderForValue.build());
        }
        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
       */
      public Builder mergeDynamic(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType value) {
        if (dynamicBuilder_ == null) {
          if (kindCase_ == 2 &&
              kind_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.getDefaultInstance()) {
            kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) kind_)
                .mergeFrom(value).buildPartial();
          } else {
            kind_ = value;
          }
          onChanged();
        } else {
          if (kindCase_ == 2) {
            dynamicBuilder_.mergeFrom(value);
          }
          dynamicBuilder_.setMessage(value);
        }
        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
       */
      public Builder clearDynamic() {
        if (dynamicBuilder_ == null) {
          if (kindCase_ == 2) {
            kindCase_ = 0;
            kind_ = null;
            onChanged();
          }
        } else {
          if (kindCase_ == 2) {
            kindCase_ = 0;
            kind_ = null;
          }
          dynamicBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.Builder getDynamicBuilder() {
        return getDynamicFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicTypeOrBuilder getDynamicOrBuilder() {
        if ((kindCase_ == 2) && (dynamicBuilder_ != null)) {
          return dynamicBuilder_.getMessageOrBuilder();
        } else {
          if (kindCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) kind_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDynamicType dynamic = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicTypeOrBuilder> 
          getDynamicFieldBuilder() {
        if (dynamicBuilder_ == null) {
          if (!(kindCase_ == 2)) {
            kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.getDefaultInstance();
          }
          dynamicBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicTypeOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDynamicType) kind_,
                  getParentForChildren(),
                  isClean());
          kind_ = null;
        }
        kindCase_ = 2;
        return dynamicBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorTypeOrBuilder> errorBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
       */
      public boolean hasError() {
        return kindCase_ == 3;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType getError() {
        if (errorBuilder_ == null) {
          if (kindCase_ == 3) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) kind_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.getDefaultInstance();
        } else {
          if (kindCase_ == 3) {
            return errorBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
       */
      public Builder setError(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kind_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }
        kindCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
       */
      public Builder setError(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.Builder builderForValue) {
        if (errorBuilder_ == null) {
          kind_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }
        kindCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
       */
      public Builder mergeError(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType value) {
        if (errorBuilder_ == null) {
          if (kindCase_ == 3 &&
              kind_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.getDefaultInstance()) {
            kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) kind_)
                .mergeFrom(value).buildPartial();
          } else {
            kind_ = value;
          }
          onChanged();
        } else {
          if (kindCase_ == 3) {
            errorBuilder_.mergeFrom(value);
          }
          errorBuilder_.setMessage(value);
        }
        kindCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          if (kindCase_ == 3) {
            kindCase_ = 0;
            kind_ = null;
            onChanged();
          }
        } else {
          if (kindCase_ == 3) {
            kindCase_ = 0;
            kind_ = null;
          }
          errorBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.Builder getErrorBuilder() {
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorTypeOrBuilder getErrorOrBuilder() {
        if ((kindCase_ == 3) && (errorBuilder_ != null)) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          if (kindCase_ == 3) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) kind_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrErrorType error = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorTypeOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          if (!(kindCase_ == 3)) {
            kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.getDefaultInstance();
          }
          errorBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorTypeOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrErrorType) kind_,
                  getParentForChildren(),
                  isClean());
          kind_ = null;
        }
        kindCase_ = 3;
        return errorBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType)
    }

    static {
      defaultInstance = new IrType(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType)
  }

  public interface IrTypeTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType> 
        getTypesList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType getTypes(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
     */
    int getTypesCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOrBuilder> 
        getTypesOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOrBuilder getTypesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable}
   */
  public static final class IrTypeTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable)
      IrTypeTableOrBuilder {
    // Use IrTypeTable.newBuilder() to construct.
    private IrTypeTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrTypeTable(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrTypeTable defaultInstance;
    public static IrTypeTable getDefaultInstance() {
      return defaultInstance;
    }

    public IrTypeTable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrTypeTable(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                types_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType>();
                mutable_bitField0_ |= 0x00000001;
              }
              types_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          types_ = java.util.Collections.unmodifiableList(types_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeTable_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrTypeTable> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrTypeTable>() {
      public IrTypeTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrTypeTable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrTypeTable> getParserForType() {
      return PARSER;
    }

    public static final int TYPES_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType> types_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType> getTypesList() {
      return types_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOrBuilder> 
        getTypesOrBuilderList() {
      return types_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
     */
    public int getTypesCount() {
      return types_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType getTypes(int index) {
      return types_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOrBuilder getTypesOrBuilder(
        int index) {
      return types_.get(index);
    }

    private void initFields() {
      types_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getTypesCount(); i++) {
        if (!getTypes(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < types_.size(); i++) {
        output.writeMessage(1, types_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < types_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, types_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeTable_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTypesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (typesBuilder_ == null) {
          types_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          typesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeTable_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable(this);
        int from_bitField0_ = bitField0_;
        if (typesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            types_ = java.util.Collections.unmodifiableList(types_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.types_ = types_;
        } else {
          result.types_ = typesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable.getDefaultInstance()) return this;
        if (typesBuilder_ == null) {
          if (!other.types_.isEmpty()) {
            if (types_.isEmpty()) {
              types_ = other.types_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTypesIsMutable();
              types_.addAll(other.types_);
            }
            onChanged();
          }
        } else {
          if (!other.types_.isEmpty()) {
            if (typesBuilder_.isEmpty()) {
              typesBuilder_.dispose();
              typesBuilder_ = null;
              types_ = other.types_;
              bitField0_ = (bitField0_ & ~0x00000001);
              typesBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypesFieldBuilder() : null;
            } else {
              typesBuilder_.addAllMessages(other.types_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getTypesCount(); i++) {
          if (!getTypes(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeTable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType> types_ =
        java.util.Collections.emptyList();
      private void ensureTypesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          types_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType>(types_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOrBuilder> typesBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType> getTypesList() {
        if (typesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(types_);
        } else {
          return typesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public int getTypesCount() {
        if (typesBuilder_ == null) {
          return types_.size();
        } else {
          return typesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType getTypes(int index) {
        if (typesBuilder_ == null) {
          return types_.get(index);
        } else {
          return typesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public Builder setTypes(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType value) {
        if (typesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypesIsMutable();
          types_.set(index, value);
          onChanged();
        } else {
          typesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public Builder setTypes(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder builderForValue) {
        if (typesBuilder_ == null) {
          ensureTypesIsMutable();
          types_.set(index, builderForValue.build());
          onChanged();
        } else {
          typesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public Builder addTypes(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType value) {
        if (typesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypesIsMutable();
          types_.add(value);
          onChanged();
        } else {
          typesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public Builder addTypes(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType value) {
        if (typesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypesIsMutable();
          types_.add(index, value);
          onChanged();
        } else {
          typesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public Builder addTypes(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder builderForValue) {
        if (typesBuilder_ == null) {
          ensureTypesIsMutable();
          types_.add(builderForValue.build());
          onChanged();
        } else {
          typesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public Builder addTypes(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder builderForValue) {
        if (typesBuilder_ == null) {
          ensureTypesIsMutable();
          types_.add(index, builderForValue.build());
          onChanged();
        } else {
          typesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public Builder addAllTypes(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType> values) {
        if (typesBuilder_ == null) {
          ensureTypesIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, types_);
          onChanged();
        } else {
          typesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public Builder clearTypes() {
        if (typesBuilder_ == null) {
          types_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          typesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public Builder removeTypes(int index) {
        if (typesBuilder_ == null) {
          ensureTypesIsMutable();
          types_.remove(index);
          onChanged();
        } else {
          typesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder getTypesBuilder(
          int index) {
        return getTypesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOrBuilder getTypesOrBuilder(
          int index) {
        if (typesBuilder_ == null) {
          return types_.get(index);  } else {
          return typesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOrBuilder> 
           getTypesOrBuilderList() {
        if (typesBuilder_ != null) {
          return typesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(types_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder addTypesBuilder() {
        return getTypesFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder addTypesBuilder(
          int index) {
        return getTypesFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrType types = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder> 
           getTypesBuilderList() {
        return getTypesFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOrBuilder> 
          getTypesFieldBuilder() {
        if (typesBuilder_ == null) {
          typesBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrType.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOrBuilder>(
                  types_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        return typesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable)
    }

    static {
      defaultInstance = new IrTypeTable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeTable)
  }

  public interface IrTypeIndexOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     */
    int getIndex();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex}
   */
  public static final class IrTypeIndex extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex)
      IrTypeIndexOrBuilder {
    // Use IrTypeIndex.newBuilder() to construct.
    private IrTypeIndex(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrTypeIndex(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrTypeIndex defaultInstance;
    public static IrTypeIndex getDefaultInstance() {
      return defaultInstance;
    }

    public IrTypeIndex getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrTypeIndex(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeIndex_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeIndex_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrTypeIndex> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrTypeIndex>() {
      public IrTypeIndex parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrTypeIndex(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrTypeIndex> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     */
    public int getIndex() {
      return index_;
    }

    private void initFields() {
      index_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeIndex_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeIndex_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeIndex_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex)
    }

    static {
      defaultInstance = new IrTypeIndex(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex)
  }

  public interface IrBreakOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 loop_id = 1;</code>
     */
    boolean hasLoopId();
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    int getLoopId();

    /**
     * <code>optional string label = 2;</code>
     */
    boolean hasLabel();
    /**
     * <code>optional string label = 2;</code>
     */
    java.lang.String getLabel();
    /**
     * <code>optional string label = 2;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getLabelBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak}
   */
  public static final class IrBreak extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak)
      IrBreakOrBuilder {
    // Use IrBreak.newBuilder() to construct.
    private IrBreak(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrBreak(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrBreak defaultInstance;
    public static IrBreak getDefaultInstance() {
      return defaultInstance;
    }

    public IrBreak getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrBreak(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              loopId_ = input.readInt32();
              break;
            }
            case 18: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              label_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBreak_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBreak_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrBreak> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrBreak>() {
      public IrBreak parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrBreak(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrBreak> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LOOP_ID_FIELD_NUMBER = 1;
    private int loopId_;
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    public boolean hasLoopId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    public int getLoopId() {
      return loopId_;
    }

    public static final int LABEL_FIELD_NUMBER = 2;
    private java.lang.Object label_;
    /**
     * <code>optional string label = 2;</code>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string label = 2;</code>
     */
    public java.lang.String getLabel() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          label_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string label = 2;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getLabelBytes() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        label_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      loopId_ = 0;
      label_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasLoopId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, loopId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getLabelBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, loopId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(2, getLabelBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreakOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBreak_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBreak_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        loopId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        label_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBreak_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.loopId_ = loopId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.label_ = label_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.getDefaultInstance()) return this;
        if (other.hasLoopId()) {
          setLoopId(other.getLoopId());
        }
        if (other.hasLabel()) {
          bitField0_ |= 0x00000002;
          label_ = other.label_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLoopId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int loopId_ ;
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public boolean hasLoopId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public int getLoopId() {
        return loopId_;
      }
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public Builder setLoopId(int value) {
        bitField0_ |= 0x00000001;
        loopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public Builder clearLoopId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        loopId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object label_ = "";
      /**
       * <code>optional string label = 2;</code>
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string label = 2;</code>
       */
      public java.lang.String getLabel() {
        java.lang.Object ref = label_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            label_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string label = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getLabelBytes() {
        java.lang.Object ref = label_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          label_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string label = 2;</code>
       */
      public Builder setLabel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        label_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string label = 2;</code>
       */
      public Builder clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000002);
        label_ = getDefaultInstance().getLabel();
        onChanged();
        return this;
      }
      /**
       * <code>optional string label = 2;</code>
       */
      public Builder setLabelBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        label_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak)
    }

    static {
      defaultInstance = new IrBreak(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak)
  }

  public interface IrBlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required bool is_lambda_origin = 1;</code>
     */
    boolean hasIsLambdaOrigin();
    /**
     * <code>required bool is_lambda_origin = 1;</code>
     */
    boolean getIsLambdaOrigin();

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> 
        getStatementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getStatement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
     */
    int getStatementCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
        getStatementOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getStatementOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock}
   */
  public static final class IrBlock extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock)
      IrBlockOrBuilder {
    // Use IrBlock.newBuilder() to construct.
    private IrBlock(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrBlock(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrBlock defaultInstance;
    public static IrBlock getDefaultInstance() {
      return defaultInstance;
    }

    public IrBlock getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrBlock(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isLambdaOrigin_ = input.readBool();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                statement_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement>();
                mutable_bitField0_ |= 0x00000002;
              }
              statement_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          statement_ = java.util.Collections.unmodifiableList(statement_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlock_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlock_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrBlock> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrBlock>() {
      public IrBlock parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrBlock(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrBlock> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int IS_LAMBDA_ORIGIN_FIELD_NUMBER = 1;
    private boolean isLambdaOrigin_;
    /**
     * <code>required bool is_lambda_origin = 1;</code>
     */
    public boolean hasIsLambdaOrigin() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bool is_lambda_origin = 1;</code>
     */
    public boolean getIsLambdaOrigin() {
      return isLambdaOrigin_;
    }

    public static final int STATEMENT_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> statement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> getStatementList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
        getStatementOrBuilderList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
     */
    public int getStatementCount() {
      return statement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getStatement(int index) {
      return statement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getStatementOrBuilder(
        int index) {
      return statement_.get(index);
    }

    private void initFields() {
      isLambdaOrigin_ = false;
      statement_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIsLambdaOrigin()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getStatementCount(); i++) {
        if (!getStatement(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, isLambdaOrigin_);
      }
      for (int i = 0; i < statement_.size(); i++) {
        output.writeMessage(2, statement_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(1, isLambdaOrigin_);
      }
      for (int i = 0; i < statement_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, statement_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlock_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlock_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStatementFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        isLambdaOrigin_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          statementBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlock_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isLambdaOrigin_ = isLambdaOrigin_;
        if (statementBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            statement_ = java.util.Collections.unmodifiableList(statement_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.statement_ = statement_;
        } else {
          result.statement_ = statementBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.getDefaultInstance()) return this;
        if (other.hasIsLambdaOrigin()) {
          setIsLambdaOrigin(other.getIsLambdaOrigin());
        }
        if (statementBuilder_ == null) {
          if (!other.statement_.isEmpty()) {
            if (statement_.isEmpty()) {
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureStatementIsMutable();
              statement_.addAll(other.statement_);
            }
            onChanged();
          }
        } else {
          if (!other.statement_.isEmpty()) {
            if (statementBuilder_.isEmpty()) {
              statementBuilder_.dispose();
              statementBuilder_ = null;
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000002);
              statementBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStatementFieldBuilder() : null;
            } else {
              statementBuilder_.addAllMessages(other.statement_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIsLambdaOrigin()) {
          
          return false;
        }
        for (int i = 0; i < getStatementCount(); i++) {
          if (!getStatement(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean isLambdaOrigin_ ;
      /**
       * <code>required bool is_lambda_origin = 1;</code>
       */
      public boolean hasIsLambdaOrigin() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bool is_lambda_origin = 1;</code>
       */
      public boolean getIsLambdaOrigin() {
        return isLambdaOrigin_;
      }
      /**
       * <code>required bool is_lambda_origin = 1;</code>
       */
      public Builder setIsLambdaOrigin(boolean value) {
        bitField0_ |= 0x00000001;
        isLambdaOrigin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_lambda_origin = 1;</code>
       */
      public Builder clearIsLambdaOrigin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isLambdaOrigin_ = false;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> statement_ =
        java.util.Collections.emptyList();
      private void ensureStatementIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          statement_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement>(statement_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> statementBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> getStatementList() {
        if (statementBuilder_ == null) {
          return java.util.Collections.unmodifiableList(statement_);
        } else {
          return statementBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public int getStatementCount() {
        if (statementBuilder_ == null) {
          return statement_.size();
        } else {
          return statementBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getStatement(int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);
        } else {
          return statementBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.set(index, value);
          onChanged();
        } else {
          statementBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.set(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public Builder addStatement(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(value);
          onChanged();
        } else {
          statementBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(index, value);
          onChanged();
        } else {
          statementBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public Builder addStatement(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public Builder addAllStatement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> values) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, statement_);
          onChanged();
        } else {
          statementBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public Builder clearStatement() {
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          statementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public Builder removeStatement(int index) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.remove(index);
          onChanged();
        } else {
          statementBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder getStatementBuilder(
          int index) {
        return getStatementFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getStatementOrBuilder(
          int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);  } else {
          return statementBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
           getStatementOrBuilderList() {
        if (statementBuilder_ != null) {
          return statementBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(statement_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder addStatementBuilder() {
        return getStatementFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder addStatementBuilder(
          int index) {
        return getStatementFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder> 
           getStatementBuilderList() {
        return getStatementFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
          getStatementFieldBuilder() {
        if (statementBuilder_ == null) {
          statementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder>(
                  statement_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        return statementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock)
    }

    static {
      defaultInstance = new IrBlock(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock)
  }

  public interface MemberAccessCommonOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
     */
    boolean hasDispatchReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getDispatchReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getDispatchReceiverOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
     */
    boolean hasExtensionReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExtensionReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExtensionReceiverOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression> 
        getValueArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression getValueArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
     */
    int getValueArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpressionOrBuilder> 
        getValueArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpressionOrBuilder getValueArgumentOrBuilder(
        int index);

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
     */
    boolean hasTypeArguments();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments getTypeArguments();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArgumentsOrBuilder getTypeArgumentsOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon}
   */
  public static final class MemberAccessCommon extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon)
      MemberAccessCommonOrBuilder {
    // Use MemberAccessCommon.newBuilder() to construct.
    private MemberAccessCommon(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MemberAccessCommon(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MemberAccessCommon defaultInstance;
    public static MemberAccessCommon getDefaultInstance() {
      return defaultInstance;
    }

    public MemberAccessCommon getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MemberAccessCommon(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = dispatchReceiver_.toBuilder();
              }
              dispatchReceiver_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dispatchReceiver_);
                dispatchReceiver_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = extensionReceiver_.toBuilder();
              }
              extensionReceiver_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(extensionReceiver_);
                extensionReceiver_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                valueArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression>();
                mutable_bitField0_ |= 0x00000004;
              }
              valueArgument_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = typeArguments_.toBuilder();
              }
              typeArguments_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(typeArguments_);
                typeArguments_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          valueArgument_ = java.util.Collections.unmodifiableList(valueArgument_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_MemberAccessCommon_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_MemberAccessCommon_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<MemberAccessCommon> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<MemberAccessCommon>() {
      public MemberAccessCommon parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new MemberAccessCommon(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<MemberAccessCommon> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DISPATCH_RECEIVER_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression dispatchReceiver_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
     */
    public boolean hasDispatchReceiver() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getDispatchReceiver() {
      return dispatchReceiver_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getDispatchReceiverOrBuilder() {
      return dispatchReceiver_;
    }

    public static final int EXTENSION_RECEIVER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression extensionReceiver_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
     */
    public boolean hasExtensionReceiver() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExtensionReceiver() {
      return extensionReceiver_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExtensionReceiverOrBuilder() {
      return extensionReceiver_;
    }

    public static final int VALUE_ARGUMENT_FIELD_NUMBER = 3;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression> valueArgument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression> getValueArgumentList() {
      return valueArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpressionOrBuilder> 
        getValueArgumentOrBuilderList() {
      return valueArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
     */
    public int getValueArgumentCount() {
      return valueArgument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression getValueArgument(int index) {
      return valueArgument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpressionOrBuilder getValueArgumentOrBuilder(
        int index) {
      return valueArgument_.get(index);
    }

    public static final int TYPE_ARGUMENTS_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments typeArguments_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
     */
    public boolean hasTypeArguments() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments getTypeArguments() {
      return typeArguments_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArgumentsOrBuilder getTypeArgumentsOrBuilder() {
      return typeArguments_;
    }

    private void initFields() {
      dispatchReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      extensionReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      valueArgument_ = java.util.Collections.emptyList();
      typeArguments_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTypeArguments()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasDispatchReceiver()) {
        if (!getDispatchReceiver().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExtensionReceiver()) {
        if (!getExtensionReceiver().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getValueArgumentCount(); i++) {
        if (!getValueArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getTypeArguments().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, dispatchReceiver_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, extensionReceiver_);
      }
      for (int i = 0; i < valueArgument_.size(); i++) {
        output.writeMessage(3, valueArgument_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, typeArguments_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, dispatchReceiver_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, extensionReceiver_);
      }
      for (int i = 0; i < valueArgument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, valueArgument_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, typeArguments_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_MemberAccessCommon_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_MemberAccessCommon_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDispatchReceiverFieldBuilder();
          getExtensionReceiverFieldBuilder();
          getValueArgumentFieldBuilder();
          getTypeArgumentsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (dispatchReceiverBuilder_ == null) {
          dispatchReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          dispatchReceiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (extensionReceiverBuilder_ == null) {
          extensionReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          extensionReceiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (valueArgumentBuilder_ == null) {
          valueArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          valueArgumentBuilder_.clear();
        }
        if (typeArgumentsBuilder_ == null) {
          typeArguments_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.getDefaultInstance();
        } else {
          typeArgumentsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_MemberAccessCommon_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (dispatchReceiverBuilder_ == null) {
          result.dispatchReceiver_ = dispatchReceiver_;
        } else {
          result.dispatchReceiver_ = dispatchReceiverBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (extensionReceiverBuilder_ == null) {
          result.extensionReceiver_ = extensionReceiver_;
        } else {
          result.extensionReceiver_ = extensionReceiverBuilder_.build();
        }
        if (valueArgumentBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            valueArgument_ = java.util.Collections.unmodifiableList(valueArgument_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.valueArgument_ = valueArgument_;
        } else {
          result.valueArgument_ = valueArgumentBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (typeArgumentsBuilder_ == null) {
          result.typeArguments_ = typeArguments_;
        } else {
          result.typeArguments_ = typeArgumentsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance()) return this;
        if (other.hasDispatchReceiver()) {
          mergeDispatchReceiver(other.getDispatchReceiver());
        }
        if (other.hasExtensionReceiver()) {
          mergeExtensionReceiver(other.getExtensionReceiver());
        }
        if (valueArgumentBuilder_ == null) {
          if (!other.valueArgument_.isEmpty()) {
            if (valueArgument_.isEmpty()) {
              valueArgument_ = other.valueArgument_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureValueArgumentIsMutable();
              valueArgument_.addAll(other.valueArgument_);
            }
            onChanged();
          }
        } else {
          if (!other.valueArgument_.isEmpty()) {
            if (valueArgumentBuilder_.isEmpty()) {
              valueArgumentBuilder_.dispose();
              valueArgumentBuilder_ = null;
              valueArgument_ = other.valueArgument_;
              bitField0_ = (bitField0_ & ~0x00000004);
              valueArgumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getValueArgumentFieldBuilder() : null;
            } else {
              valueArgumentBuilder_.addAllMessages(other.valueArgument_);
            }
          }
        }
        if (other.hasTypeArguments()) {
          mergeTypeArguments(other.getTypeArguments());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTypeArguments()) {
          
          return false;
        }
        if (hasDispatchReceiver()) {
          if (!getDispatchReceiver().isInitialized()) {
            
            return false;
          }
        }
        if (hasExtensionReceiver()) {
          if (!getExtensionReceiver().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getValueArgumentCount(); i++) {
          if (!getValueArgument(i).isInitialized()) {
            
            return false;
          }
        }
        if (!getTypeArguments().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression dispatchReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> dispatchReceiverBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
       */
      public boolean hasDispatchReceiver() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getDispatchReceiver() {
        if (dispatchReceiverBuilder_ == null) {
          return dispatchReceiver_;
        } else {
          return dispatchReceiverBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
       */
      public Builder setDispatchReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (dispatchReceiverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dispatchReceiver_ = value;
          onChanged();
        } else {
          dispatchReceiverBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
       */
      public Builder setDispatchReceiver(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (dispatchReceiverBuilder_ == null) {
          dispatchReceiver_ = builderForValue.build();
          onChanged();
        } else {
          dispatchReceiverBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
       */
      public Builder mergeDispatchReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (dispatchReceiverBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              dispatchReceiver_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            dispatchReceiver_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(dispatchReceiver_).mergeFrom(value).buildPartial();
          } else {
            dispatchReceiver_ = value;
          }
          onChanged();
        } else {
          dispatchReceiverBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
       */
      public Builder clearDispatchReceiver() {
        if (dispatchReceiverBuilder_ == null) {
          dispatchReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          dispatchReceiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getDispatchReceiverBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getDispatchReceiverFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getDispatchReceiverOrBuilder() {
        if (dispatchReceiverBuilder_ != null) {
          return dispatchReceiverBuilder_.getMessageOrBuilder();
        } else {
          return dispatchReceiver_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression dispatch_receiver = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getDispatchReceiverFieldBuilder() {
        if (dispatchReceiverBuilder_ == null) {
          dispatchReceiverBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getDispatchReceiver(),
                  getParentForChildren(),
                  isClean());
          dispatchReceiver_ = null;
        }
        return dispatchReceiverBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression extensionReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> extensionReceiverBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
       */
      public boolean hasExtensionReceiver() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExtensionReceiver() {
        if (extensionReceiverBuilder_ == null) {
          return extensionReceiver_;
        } else {
          return extensionReceiverBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
       */
      public Builder setExtensionReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (extensionReceiverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          extensionReceiver_ = value;
          onChanged();
        } else {
          extensionReceiverBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
       */
      public Builder setExtensionReceiver(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (extensionReceiverBuilder_ == null) {
          extensionReceiver_ = builderForValue.build();
          onChanged();
        } else {
          extensionReceiverBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
       */
      public Builder mergeExtensionReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (extensionReceiverBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              extensionReceiver_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            extensionReceiver_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(extensionReceiver_).mergeFrom(value).buildPartial();
          } else {
            extensionReceiver_ = value;
          }
          onChanged();
        } else {
          extensionReceiverBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
       */
      public Builder clearExtensionReceiver() {
        if (extensionReceiverBuilder_ == null) {
          extensionReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          extensionReceiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getExtensionReceiverBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getExtensionReceiverFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExtensionReceiverOrBuilder() {
        if (extensionReceiverBuilder_ != null) {
          return extensionReceiverBuilder_.getMessageOrBuilder();
        } else {
          return extensionReceiver_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression extension_receiver = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getExtensionReceiverFieldBuilder() {
        if (extensionReceiverBuilder_ == null) {
          extensionReceiverBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getExtensionReceiver(),
                  getParentForChildren(),
                  isClean());
          extensionReceiver_ = null;
        }
        return extensionReceiverBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression> valueArgument_ =
        java.util.Collections.emptyList();
      private void ensureValueArgumentIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          valueArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression>(valueArgument_);
          bitField0_ |= 0x00000004;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpressionOrBuilder> valueArgumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression> getValueArgumentList() {
        if (valueArgumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(valueArgument_);
        } else {
          return valueArgumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public int getValueArgumentCount() {
        if (valueArgumentBuilder_ == null) {
          return valueArgument_.size();
        } else {
          return valueArgumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression getValueArgument(int index) {
        if (valueArgumentBuilder_ == null) {
          return valueArgument_.get(index);
        } else {
          return valueArgumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public Builder setValueArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression value) {
        if (valueArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueArgumentIsMutable();
          valueArgument_.set(index, value);
          onChanged();
        } else {
          valueArgumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public Builder setValueArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder builderForValue) {
        if (valueArgumentBuilder_ == null) {
          ensureValueArgumentIsMutable();
          valueArgument_.set(index, builderForValue.build());
          onChanged();
        } else {
          valueArgumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public Builder addValueArgument(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression value) {
        if (valueArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueArgumentIsMutable();
          valueArgument_.add(value);
          onChanged();
        } else {
          valueArgumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public Builder addValueArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression value) {
        if (valueArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueArgumentIsMutable();
          valueArgument_.add(index, value);
          onChanged();
        } else {
          valueArgumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public Builder addValueArgument(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder builderForValue) {
        if (valueArgumentBuilder_ == null) {
          ensureValueArgumentIsMutable();
          valueArgument_.add(builderForValue.build());
          onChanged();
        } else {
          valueArgumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public Builder addValueArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder builderForValue) {
        if (valueArgumentBuilder_ == null) {
          ensureValueArgumentIsMutable();
          valueArgument_.add(index, builderForValue.build());
          onChanged();
        } else {
          valueArgumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public Builder addAllValueArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression> values) {
        if (valueArgumentBuilder_ == null) {
          ensureValueArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, valueArgument_);
          onChanged();
        } else {
          valueArgumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public Builder clearValueArgument() {
        if (valueArgumentBuilder_ == null) {
          valueArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          valueArgumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public Builder removeValueArgument(int index) {
        if (valueArgumentBuilder_ == null) {
          ensureValueArgumentIsMutable();
          valueArgument_.remove(index);
          onChanged();
        } else {
          valueArgumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder getValueArgumentBuilder(
          int index) {
        return getValueArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpressionOrBuilder getValueArgumentOrBuilder(
          int index) {
        if (valueArgumentBuilder_ == null) {
          return valueArgument_.get(index);  } else {
          return valueArgumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpressionOrBuilder> 
           getValueArgumentOrBuilderList() {
        if (valueArgumentBuilder_ != null) {
          return valueArgumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(valueArgument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder addValueArgumentBuilder() {
        return getValueArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder addValueArgumentBuilder(
          int index) {
        return getValueArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression value_argument = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder> 
           getValueArgumentBuilderList() {
        return getValueArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpressionOrBuilder> 
          getValueArgumentFieldBuilder() {
        if (valueArgumentBuilder_ == null) {
          valueArgumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpressionOrBuilder>(
                  valueArgument_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          valueArgument_ = null;
        }
        return valueArgumentBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments typeArguments_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArgumentsOrBuilder> typeArgumentsBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
       */
      public boolean hasTypeArguments() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments getTypeArguments() {
        if (typeArgumentsBuilder_ == null) {
          return typeArguments_;
        } else {
          return typeArgumentsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
       */
      public Builder setTypeArguments(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments value) {
        if (typeArgumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeArguments_ = value;
          onChanged();
        } else {
          typeArgumentsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
       */
      public Builder setTypeArguments(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.Builder builderForValue) {
        if (typeArgumentsBuilder_ == null) {
          typeArguments_ = builderForValue.build();
          onChanged();
        } else {
          typeArgumentsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
       */
      public Builder mergeTypeArguments(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments value) {
        if (typeArgumentsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              typeArguments_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.getDefaultInstance()) {
            typeArguments_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.newBuilder(typeArguments_).mergeFrom(value).buildPartial();
          } else {
            typeArguments_ = value;
          }
          onChanged();
        } else {
          typeArgumentsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
       */
      public Builder clearTypeArguments() {
        if (typeArgumentsBuilder_ == null) {
          typeArguments_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.getDefaultInstance();
          onChanged();
        } else {
          typeArgumentsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.Builder getTypeArgumentsBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getTypeArgumentsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArgumentsOrBuilder getTypeArgumentsOrBuilder() {
        if (typeArgumentsBuilder_ != null) {
          return typeArgumentsBuilder_.getMessageOrBuilder();
        } else {
          return typeArguments_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.TypeArguments type_arguments = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArgumentsOrBuilder> 
          getTypeArgumentsFieldBuilder() {
        if (typeArgumentsBuilder_ == null) {
          typeArgumentsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArguments.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.TypeArgumentsOrBuilder>(
                  getTypeArguments(),
                  getParentForChildren(),
                  isClean());
          typeArguments_ = null;
        }
        return typeArgumentsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon)
    }

    static {
      defaultInstance = new MemberAccessCommon(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon)
  }

  public interface IrCallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall.Primitive kind = 1;</code>
     */
    boolean hasKind();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall.Primitive kind = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive getKind();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    boolean hasMemberAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
     */
    boolean hasSuper();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSuper();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSuperOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall}
   */
  public static final class IrCall extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall)
      IrCallOrBuilder {
    // Use IrCall.newBuilder() to construct.
    private IrCall(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrCall(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrCall defaultInstance;
    public static IrCall getDefaultInstance() {
      return defaultInstance;
    }

    public IrCall getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrCall(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive value = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                kind_ = value;
              }
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = memberAccess_.toBuilder();
              }
              memberAccess_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memberAccess_);
                memberAccess_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = super_.toBuilder();
              }
              super_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(super_);
                super_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCall_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrCall> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrCall>() {
      public IrCall parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrCall(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrCall> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall.Primitive}
     */
    public enum Primitive
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>NOT_PRIMITIVE = 1;</code>
       */
      NOT_PRIMITIVE(0, 1),
      /**
       * <code>NULLARY = 2;</code>
       */
      NULLARY(1, 2),
      /**
       * <code>UNARY = 3;</code>
       */
      UNARY(2, 3),
      /**
       * <code>BINARY = 4;</code>
       */
      BINARY(3, 4),
      ;

      /**
       * <code>NOT_PRIMITIVE = 1;</code>
       */
      public static final int NOT_PRIMITIVE_VALUE = 1;
      /**
       * <code>NULLARY = 2;</code>
       */
      public static final int NULLARY_VALUE = 2;
      /**
       * <code>UNARY = 3;</code>
       */
      public static final int UNARY_VALUE = 3;
      /**
       * <code>BINARY = 4;</code>
       */
      public static final int BINARY_VALUE = 4;


      public final int getNumber() { return value; }

      public static Primitive valueOf(int value) {
        switch (value) {
          case 1: return NOT_PRIMITIVE;
          case 2: return NULLARY;
          case 3: return UNARY;
          case 4: return BINARY;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Primitive>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Primitive>
          internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Primitive>() {
              public Primitive findValueByNumber(int number) {
                return Primitive.valueOf(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDescriptor().getEnumTypes().get(0);
      }

      private static final Primitive[] VALUES = values();

      public static Primitive valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Primitive(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall.Primitive)
    }

    private int bitField0_;
    public static final int KIND_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive kind_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall.Primitive kind = 1;</code>
     */
    public boolean hasKind() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall.Primitive kind = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive getKind() {
      return kind_;
    }

    public static final int SYMBOL_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int MEMBER_ACCESS_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon memberAccess_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    public boolean hasMemberAccess() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess() {
      return memberAccess_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder() {
      return memberAccess_;
    }

    public static final int SUPER_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol super_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
     */
    public boolean hasSuper() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSuper() {
      return super_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSuperOrBuilder() {
      return super_;
    }

    private void initFields() {
      kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive.NOT_PRIMITIVE;
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
      super_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasKind()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMemberAccess()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMemberAccess().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasSuper()) {
        if (!getSuper().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, kind_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, symbol_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, memberAccess_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, super_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(1, kind_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, symbol_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, memberAccess_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, super_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCall_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getMemberAccessFieldBuilder();
          getSuperFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive.NOT_PRIMITIVE;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (memberAccessBuilder_ == null) {
          memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
        } else {
          memberAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (superBuilder_ == null) {
          super_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          superBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCall_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.kind_ = kind_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (memberAccessBuilder_ == null) {
          result.memberAccess_ = memberAccess_;
        } else {
          result.memberAccess_ = memberAccessBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (superBuilder_ == null) {
          result.super_ = super_;
        } else {
          result.super_ = superBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance()) return this;
        if (other.hasKind()) {
          setKind(other.getKind());
        }
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasMemberAccess()) {
          mergeMemberAccess(other.getMemberAccess());
        }
        if (other.hasSuper()) {
          mergeSuper(other.getSuper());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasKind()) {
          
          return false;
        }
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasMemberAccess()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (!getMemberAccess().isInitialized()) {
          
          return false;
        }
        if (hasSuper()) {
          if (!getSuper().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive.NOT_PRIMITIVE;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall.Primitive kind = 1;</code>
       */
      public boolean hasKind() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall.Primitive kind = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive getKind() {
        return kind_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall.Primitive kind = 1;</code>
       */
      public Builder setKind(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        kind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall.Primitive kind = 1;</code>
       */
      public Builder clearKind() {
        bitField0_ = (bitField0_ & ~0x00000001);
        kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Primitive.NOT_PRIMITIVE;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder> memberAccessBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public boolean hasMemberAccess() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess() {
        if (memberAccessBuilder_ == null) {
          return memberAccess_;
        } else {
          return memberAccessBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public Builder setMemberAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon value) {
        if (memberAccessBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memberAccess_ = value;
          onChanged();
        } else {
          memberAccessBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public Builder setMemberAccess(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder builderForValue) {
        if (memberAccessBuilder_ == null) {
          memberAccess_ = builderForValue.build();
          onChanged();
        } else {
          memberAccessBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public Builder mergeMemberAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon value) {
        if (memberAccessBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              memberAccess_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance()) {
            memberAccess_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.newBuilder(memberAccess_).mergeFrom(value).buildPartial();
          } else {
            memberAccess_ = value;
          }
          onChanged();
        } else {
          memberAccessBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public Builder clearMemberAccess() {
        if (memberAccessBuilder_ == null) {
          memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
          onChanged();
        } else {
          memberAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder getMemberAccessBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMemberAccessFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder() {
        if (memberAccessBuilder_ != null) {
          return memberAccessBuilder_.getMessageOrBuilder();
        } else {
          return memberAccess_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder> 
          getMemberAccessFieldBuilder() {
        if (memberAccessBuilder_ == null) {
          memberAccessBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder>(
                  getMemberAccess(),
                  getParentForChildren(),
                  isClean());
          memberAccess_ = null;
        }
        return memberAccessBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol super_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> superBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
       */
      public boolean hasSuper() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSuper() {
        if (superBuilder_ == null) {
          return super_;
        } else {
          return superBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
       */
      public Builder setSuper(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (superBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          super_ = value;
          onChanged();
        } else {
          superBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
       */
      public Builder setSuper(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (superBuilder_ == null) {
          super_ = builderForValue.build();
          onChanged();
        } else {
          superBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
       */
      public Builder mergeSuper(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (superBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              super_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            super_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(super_).mergeFrom(value).buildPartial();
          } else {
            super_ = value;
          }
          onChanged();
        } else {
          superBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
       */
      public Builder clearSuper() {
        if (superBuilder_ == null) {
          super_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          superBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSuperBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getSuperFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSuperOrBuilder() {
        if (superBuilder_ != null) {
          return superBuilder_.getMessageOrBuilder();
        } else {
          return super_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSuperFieldBuilder() {
        if (superBuilder_ == null) {
          superBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSuper(),
                  getParentForChildren(),
                  isClean());
          super_ = null;
        }
        return superBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall)
    }

    static {
      defaultInstance = new IrCall(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall)
  }

  public interface IrFunctionReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>optional string origin = 2;</code>
     */
    boolean hasOrigin();
    /**
     * <code>optional string origin = 2;</code>
     */
    java.lang.String getOrigin();
    /**
     * <code>optional string origin = 2;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getOriginBytes();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    boolean hasMemberAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference}
   */
  public static final class IrFunctionReference extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference)
      IrFunctionReferenceOrBuilder {
    // Use IrFunctionReference.newBuilder() to construct.
    private IrFunctionReference(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrFunctionReference(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrFunctionReference defaultInstance;
    public static IrFunctionReference getDefaultInstance() {
      return defaultInstance;
    }

    public IrFunctionReference getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrFunctionReference(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              origin_ = bs;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = memberAccess_.toBuilder();
              }
              memberAccess_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memberAccess_);
                memberAccess_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionReference_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrFunctionReference> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrFunctionReference>() {
      public IrFunctionReference parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrFunctionReference(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrFunctionReference> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int ORIGIN_FIELD_NUMBER = 2;
    private java.lang.Object origin_;
    /**
     * <code>optional string origin = 2;</code>
     */
    public boolean hasOrigin() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string origin = 2;</code>
     */
    public java.lang.String getOrigin() {
      java.lang.Object ref = origin_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          origin_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string origin = 2;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getOriginBytes() {
      java.lang.Object ref = origin_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        origin_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int MEMBER_ACCESS_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon memberAccess_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    public boolean hasMemberAccess() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess() {
      return memberAccess_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder() {
      return memberAccess_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      origin_ = "";
      memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMemberAccess()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMemberAccess().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getOriginBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, memberAccess_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(2, getOriginBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, memberAccess_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReferenceOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionReference_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getMemberAccessFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        origin_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (memberAccessBuilder_ == null) {
          memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
        } else {
          memberAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionReference_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.origin_ = origin_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (memberAccessBuilder_ == null) {
          result.memberAccess_ = memberAccess_;
        } else {
          result.memberAccess_ = memberAccessBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasOrigin()) {
          bitField0_ |= 0x00000002;
          origin_ = other.origin_;
          onChanged();
        }
        if (other.hasMemberAccess()) {
          mergeMemberAccess(other.getMemberAccess());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasMemberAccess()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (!getMemberAccess().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private java.lang.Object origin_ = "";
      /**
       * <code>optional string origin = 2;</code>
       */
      public boolean hasOrigin() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string origin = 2;</code>
       */
      public java.lang.String getOrigin() {
        java.lang.Object ref = origin_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            origin_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string origin = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getOriginBytes() {
        java.lang.Object ref = origin_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          origin_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string origin = 2;</code>
       */
      public Builder setOrigin(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        origin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string origin = 2;</code>
       */
      public Builder clearOrigin() {
        bitField0_ = (bitField0_ & ~0x00000002);
        origin_ = getDefaultInstance().getOrigin();
        onChanged();
        return this;
      }
      /**
       * <code>optional string origin = 2;</code>
       */
      public Builder setOriginBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        origin_ = value;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder> memberAccessBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public boolean hasMemberAccess() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess() {
        if (memberAccessBuilder_ == null) {
          return memberAccess_;
        } else {
          return memberAccessBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public Builder setMemberAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon value) {
        if (memberAccessBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memberAccess_ = value;
          onChanged();
        } else {
          memberAccessBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public Builder setMemberAccess(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder builderForValue) {
        if (memberAccessBuilder_ == null) {
          memberAccess_ = builderForValue.build();
          onChanged();
        } else {
          memberAccessBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public Builder mergeMemberAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon value) {
        if (memberAccessBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              memberAccess_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance()) {
            memberAccess_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.newBuilder(memberAccess_).mergeFrom(value).buildPartial();
          } else {
            memberAccess_ = value;
          }
          onChanged();
        } else {
          memberAccessBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public Builder clearMemberAccess() {
        if (memberAccessBuilder_ == null) {
          memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
          onChanged();
        } else {
          memberAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder getMemberAccessBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMemberAccessFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder() {
        if (memberAccessBuilder_ != null) {
          return memberAccessBuilder_.getMessageOrBuilder();
        } else {
          return memberAccess_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder> 
          getMemberAccessFieldBuilder() {
        if (memberAccessBuilder_ == null) {
          memberAccessBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder>(
                  getMemberAccess(),
                  getParentForChildren(),
                  isClean());
          memberAccess_ = null;
        }
        return memberAccessBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference)
    }

    static {
      defaultInstance = new IrFunctionReference(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference)
  }

  public interface IrPropertyReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
     */
    boolean hasField();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getField();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getFieldOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
     */
    boolean hasGetter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getGetter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getGetterOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
     */
    boolean hasSetter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSetter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSetterOrBuilder();

    /**
     * <code>optional string origin = 4;</code>
     */
    boolean hasOrigin();
    /**
     * <code>optional string origin = 4;</code>
     */
    java.lang.String getOrigin();
    /**
     * <code>optional string origin = 4;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getOriginBytes();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
     */
    boolean hasMemberAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference}
   */
  public static final class IrPropertyReference extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference)
      IrPropertyReferenceOrBuilder {
    // Use IrPropertyReference.newBuilder() to construct.
    private IrPropertyReference(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrPropertyReference(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrPropertyReference defaultInstance;
    public static IrPropertyReference getDefaultInstance() {
      return defaultInstance;
    }

    public IrPropertyReference getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrPropertyReference(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = field_.toBuilder();
              }
              field_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(field_);
                field_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = getter_.toBuilder();
              }
              getter_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getter_);
                getter_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = setter_.toBuilder();
              }
              setter_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(setter_);
                setter_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              origin_ = bs;
              break;
            }
            case 42: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = memberAccess_.toBuilder();
              }
              memberAccess_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memberAccess_);
                memberAccess_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrPropertyReference_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrPropertyReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrPropertyReference> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrPropertyReference>() {
      public IrPropertyReference parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrPropertyReference(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrPropertyReference> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FIELD_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol field_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
     */
    public boolean hasField() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getField() {
      return field_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getFieldOrBuilder() {
      return field_;
    }

    public static final int GETTER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getter_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
     */
    public boolean hasGetter() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getGetter() {
      return getter_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getGetterOrBuilder() {
      return getter_;
    }

    public static final int SETTER_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol setter_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
     */
    public boolean hasSetter() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSetter() {
      return setter_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSetterOrBuilder() {
      return setter_;
    }

    public static final int ORIGIN_FIELD_NUMBER = 4;
    private java.lang.Object origin_;
    /**
     * <code>optional string origin = 4;</code>
     */
    public boolean hasOrigin() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string origin = 4;</code>
     */
    public java.lang.String getOrigin() {
      java.lang.Object ref = origin_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          origin_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string origin = 4;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getOriginBytes() {
      java.lang.Object ref = origin_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        origin_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int MEMBER_ACCESS_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon memberAccess_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
     */
    public boolean hasMemberAccess() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess() {
      return memberAccess_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder() {
      return memberAccess_;
    }

    private void initFields() {
      field_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      getter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      setter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      origin_ = "";
      memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMemberAccess()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasField()) {
        if (!getField().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGetter()) {
        if (!getGetter().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSetter()) {
        if (!getSetter().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getMemberAccess().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, field_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getter_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, setter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getOriginBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, memberAccess_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, field_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getter_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, setter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(4, getOriginBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, memberAccess_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReferenceOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrPropertyReference_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrPropertyReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFieldFieldBuilder();
          getGetterFieldBuilder();
          getSetterFieldBuilder();
          getMemberAccessFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (fieldBuilder_ == null) {
          field_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          fieldBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (getterBuilder_ == null) {
          getter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          getterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (setterBuilder_ == null) {
          setter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          setterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        origin_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        if (memberAccessBuilder_ == null) {
          memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
        } else {
          memberAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrPropertyReference_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (fieldBuilder_ == null) {
          result.field_ = field_;
        } else {
          result.field_ = fieldBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (getterBuilder_ == null) {
          result.getter_ = getter_;
        } else {
          result.getter_ = getterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (setterBuilder_ == null) {
          result.setter_ = setter_;
        } else {
          result.setter_ = setterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.origin_ = origin_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (memberAccessBuilder_ == null) {
          result.memberAccess_ = memberAccess_;
        } else {
          result.memberAccess_ = memberAccessBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.getDefaultInstance()) return this;
        if (other.hasField()) {
          mergeField(other.getField());
        }
        if (other.hasGetter()) {
          mergeGetter(other.getGetter());
        }
        if (other.hasSetter()) {
          mergeSetter(other.getSetter());
        }
        if (other.hasOrigin()) {
          bitField0_ |= 0x00000008;
          origin_ = other.origin_;
          onChanged();
        }
        if (other.hasMemberAccess()) {
          mergeMemberAccess(other.getMemberAccess());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMemberAccess()) {
          
          return false;
        }
        if (hasField()) {
          if (!getField().isInitialized()) {
            
            return false;
          }
        }
        if (hasGetter()) {
          if (!getGetter().isInitialized()) {
            
            return false;
          }
        }
        if (hasSetter()) {
          if (!getSetter().isInitialized()) {
            
            return false;
          }
        }
        if (!getMemberAccess().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol field_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> fieldBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
       */
      public boolean hasField() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getField() {
        if (fieldBuilder_ == null) {
          return field_;
        } else {
          return fieldBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
       */
      public Builder setField(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (fieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          field_ = value;
          onChanged();
        } else {
          fieldBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
       */
      public Builder setField(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (fieldBuilder_ == null) {
          field_ = builderForValue.build();
          onChanged();
        } else {
          fieldBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
       */
      public Builder mergeField(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (fieldBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              field_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            field_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(field_).mergeFrom(value).buildPartial();
          } else {
            field_ = value;
          }
          onChanged();
        } else {
          fieldBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
       */
      public Builder clearField() {
        if (fieldBuilder_ == null) {
          field_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          fieldBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getFieldBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFieldFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getFieldOrBuilder() {
        if (fieldBuilder_ != null) {
          return fieldBuilder_.getMessageOrBuilder();
        } else {
          return field_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol field = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getFieldFieldBuilder() {
        if (fieldBuilder_ == null) {
          fieldBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getField(),
                  getParentForChildren(),
                  isClean());
          field_ = null;
        }
        return fieldBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> getterBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
       */
      public boolean hasGetter() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getGetter() {
        if (getterBuilder_ == null) {
          return getter_;
        } else {
          return getterBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
       */
      public Builder setGetter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (getterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getter_ = value;
          onChanged();
        } else {
          getterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
       */
      public Builder setGetter(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (getterBuilder_ == null) {
          getter_ = builderForValue.build();
          onChanged();
        } else {
          getterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
       */
      public Builder mergeGetter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (getterBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              getter_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            getter_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(getter_).mergeFrom(value).buildPartial();
          } else {
            getter_ = value;
          }
          onChanged();
        } else {
          getterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
       */
      public Builder clearGetter() {
        if (getterBuilder_ == null) {
          getter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          getterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getGetterBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getGetterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getGetterOrBuilder() {
        if (getterBuilder_ != null) {
          return getterBuilder_.getMessageOrBuilder();
        } else {
          return getter_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol getter = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getGetterFieldBuilder() {
        if (getterBuilder_ == null) {
          getterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getGetter(),
                  getParentForChildren(),
                  isClean());
          getter_ = null;
        }
        return getterBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol setter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> setterBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
       */
      public boolean hasSetter() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSetter() {
        if (setterBuilder_ == null) {
          return setter_;
        } else {
          return setterBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
       */
      public Builder setSetter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (setterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          setter_ = value;
          onChanged();
        } else {
          setterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
       */
      public Builder setSetter(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (setterBuilder_ == null) {
          setter_ = builderForValue.build();
          onChanged();
        } else {
          setterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
       */
      public Builder mergeSetter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (setterBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              setter_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            setter_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(setter_).mergeFrom(value).buildPartial();
          } else {
            setter_ = value;
          }
          onChanged();
        } else {
          setterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
       */
      public Builder clearSetter() {
        if (setterBuilder_ == null) {
          setter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          setterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSetterBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSetterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSetterOrBuilder() {
        if (setterBuilder_ != null) {
          return setterBuilder_.getMessageOrBuilder();
        } else {
          return setter_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol setter = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSetterFieldBuilder() {
        if (setterBuilder_ == null) {
          setterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSetter(),
                  getParentForChildren(),
                  isClean());
          setter_ = null;
        }
        return setterBuilder_;
      }

      private java.lang.Object origin_ = "";
      /**
       * <code>optional string origin = 4;</code>
       */
      public boolean hasOrigin() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string origin = 4;</code>
       */
      public java.lang.String getOrigin() {
        java.lang.Object ref = origin_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            origin_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string origin = 4;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getOriginBytes() {
        java.lang.Object ref = origin_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          origin_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string origin = 4;</code>
       */
      public Builder setOrigin(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        origin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string origin = 4;</code>
       */
      public Builder clearOrigin() {
        bitField0_ = (bitField0_ & ~0x00000008);
        origin_ = getDefaultInstance().getOrigin();
        onChanged();
        return this;
      }
      /**
       * <code>optional string origin = 4;</code>
       */
      public Builder setOriginBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        origin_ = value;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder> memberAccessBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
       */
      public boolean hasMemberAccess() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess() {
        if (memberAccessBuilder_ == null) {
          return memberAccess_;
        } else {
          return memberAccessBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
       */
      public Builder setMemberAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon value) {
        if (memberAccessBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memberAccess_ = value;
          onChanged();
        } else {
          memberAccessBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
       */
      public Builder setMemberAccess(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder builderForValue) {
        if (memberAccessBuilder_ == null) {
          memberAccess_ = builderForValue.build();
          onChanged();
        } else {
          memberAccessBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
       */
      public Builder mergeMemberAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon value) {
        if (memberAccessBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              memberAccess_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance()) {
            memberAccess_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.newBuilder(memberAccess_).mergeFrom(value).buildPartial();
          } else {
            memberAccess_ = value;
          }
          onChanged();
        } else {
          memberAccessBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
       */
      public Builder clearMemberAccess() {
        if (memberAccessBuilder_ == null) {
          memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
          onChanged();
        } else {
          memberAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder getMemberAccessBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMemberAccessFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder() {
        if (memberAccessBuilder_ != null) {
          return memberAccessBuilder_.getMessageOrBuilder();
        } else {
          return memberAccess_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder> 
          getMemberAccessFieldBuilder() {
        if (memberAccessBuilder_ == null) {
          memberAccessBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder>(
                  getMemberAccess(),
                  getParentForChildren(),
                  isClean());
          memberAccess_ = null;
        }
        return memberAccessBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference)
    }

    static {
      defaultInstance = new IrPropertyReference(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference)
  }

  public interface IrCompositeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> 
        getStatementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getStatement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    int getStatementCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
        getStatementOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getStatementOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite}
   */
  public static final class IrComposite extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite)
      IrCompositeOrBuilder {
    // Use IrComposite.newBuilder() to construct.
    private IrComposite(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrComposite(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrComposite defaultInstance;
    public static IrComposite getDefaultInstance() {
      return defaultInstance;
    }

    public IrComposite getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrComposite(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                statement_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement>();
                mutable_bitField0_ |= 0x00000001;
              }
              statement_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          statement_ = java.util.Collections.unmodifiableList(statement_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrComposite_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrComposite_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrComposite> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrComposite>() {
      public IrComposite parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrComposite(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrComposite> getParserForType() {
      return PARSER;
    }

    public static final int STATEMENT_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> statement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> getStatementList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
        getStatementOrBuilderList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    public int getStatementCount() {
      return statement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getStatement(int index) {
      return statement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getStatementOrBuilder(
        int index) {
      return statement_.get(index);
    }

    private void initFields() {
      statement_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getStatementCount(); i++) {
        if (!getStatement(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < statement_.size(); i++) {
        output.writeMessage(1, statement_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < statement_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, statement_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCompositeOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrComposite_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrComposite_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStatementFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          statementBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrComposite_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite(this);
        int from_bitField0_ = bitField0_;
        if (statementBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            statement_ = java.util.Collections.unmodifiableList(statement_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.statement_ = statement_;
        } else {
          result.statement_ = statementBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.getDefaultInstance()) return this;
        if (statementBuilder_ == null) {
          if (!other.statement_.isEmpty()) {
            if (statement_.isEmpty()) {
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureStatementIsMutable();
              statement_.addAll(other.statement_);
            }
            onChanged();
          }
        } else {
          if (!other.statement_.isEmpty()) {
            if (statementBuilder_.isEmpty()) {
              statementBuilder_.dispose();
              statementBuilder_ = null;
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000001);
              statementBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStatementFieldBuilder() : null;
            } else {
              statementBuilder_.addAllMessages(other.statement_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getStatementCount(); i++) {
          if (!getStatement(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> statement_ =
        java.util.Collections.emptyList();
      private void ensureStatementIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          statement_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement>(statement_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> statementBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> getStatementList() {
        if (statementBuilder_ == null) {
          return java.util.Collections.unmodifiableList(statement_);
        } else {
          return statementBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public int getStatementCount() {
        if (statementBuilder_ == null) {
          return statement_.size();
        } else {
          return statementBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getStatement(int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);
        } else {
          return statementBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.set(index, value);
          onChanged();
        } else {
          statementBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.set(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder addStatement(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(value);
          onChanged();
        } else {
          statementBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(index, value);
          onChanged();
        } else {
          statementBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder addStatement(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder addAllStatement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> values) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, statement_);
          onChanged();
        } else {
          statementBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder clearStatement() {
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          statementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder removeStatement(int index) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.remove(index);
          onChanged();
        } else {
          statementBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder getStatementBuilder(
          int index) {
        return getStatementFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getStatementOrBuilder(
          int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);  } else {
          return statementBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
           getStatementOrBuilderList() {
        if (statementBuilder_ != null) {
          return statementBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(statement_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder addStatementBuilder() {
        return getStatementFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder addStatementBuilder(
          int index) {
        return getStatementFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder> 
           getStatementBuilderList() {
        return getStatementFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
          getStatementFieldBuilder() {
        if (statementBuilder_ == null) {
          statementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder>(
                  statement_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        return statementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite)
    }

    static {
      defaultInstance = new IrComposite(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite)
  }

  public interface IrClassReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
     */
    boolean hasClassSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getClassSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getClassSymbolOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
     */
    boolean hasClassType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getClassType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getClassTypeOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference}
   */
  public static final class IrClassReference extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference)
      IrClassReferenceOrBuilder {
    // Use IrClassReference.newBuilder() to construct.
    private IrClassReference(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrClassReference(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrClassReference defaultInstance;
    public static IrClassReference getDefaultInstance() {
      return defaultInstance;
    }

    public IrClassReference getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrClassReference(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = classSymbol_.toBuilder();
              }
              classSymbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(classSymbol_);
                classSymbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = classType_.toBuilder();
              }
              classType_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(classType_);
                classType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClassReference_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClassReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrClassReference> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrClassReference>() {
      public IrClassReference parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrClassReference(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrClassReference> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CLASS_SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol classSymbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
     */
    public boolean hasClassSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getClassSymbol() {
      return classSymbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getClassSymbolOrBuilder() {
      return classSymbol_;
    }

    public static final int CLASS_TYPE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex classType_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
     */
    public boolean hasClassType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getClassType() {
      return classType_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getClassTypeOrBuilder() {
      return classType_;
    }

    private void initFields() {
      classSymbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      classType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasClassSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasClassType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getClassSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getClassType().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, classSymbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, classType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, classSymbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, classType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReferenceOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClassReference_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClassReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getClassSymbolFieldBuilder();
          getClassTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (classSymbolBuilder_ == null) {
          classSymbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          classSymbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (classTypeBuilder_ == null) {
          classType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
        } else {
          classTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClassReference_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (classSymbolBuilder_ == null) {
          result.classSymbol_ = classSymbol_;
        } else {
          result.classSymbol_ = classSymbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (classTypeBuilder_ == null) {
          result.classType_ = classType_;
        } else {
          result.classType_ = classTypeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.getDefaultInstance()) return this;
        if (other.hasClassSymbol()) {
          mergeClassSymbol(other.getClassSymbol());
        }
        if (other.hasClassType()) {
          mergeClassType(other.getClassType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasClassSymbol()) {
          
          return false;
        }
        if (!hasClassType()) {
          
          return false;
        }
        if (!getClassSymbol().isInitialized()) {
          
          return false;
        }
        if (!getClassType().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol classSymbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> classSymbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
       */
      public boolean hasClassSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getClassSymbol() {
        if (classSymbolBuilder_ == null) {
          return classSymbol_;
        } else {
          return classSymbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
       */
      public Builder setClassSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (classSymbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          classSymbol_ = value;
          onChanged();
        } else {
          classSymbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
       */
      public Builder setClassSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (classSymbolBuilder_ == null) {
          classSymbol_ = builderForValue.build();
          onChanged();
        } else {
          classSymbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
       */
      public Builder mergeClassSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (classSymbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              classSymbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            classSymbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(classSymbol_).mergeFrom(value).buildPartial();
          } else {
            classSymbol_ = value;
          }
          onChanged();
        } else {
          classSymbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
       */
      public Builder clearClassSymbol() {
        if (classSymbolBuilder_ == null) {
          classSymbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          classSymbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getClassSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getClassSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getClassSymbolOrBuilder() {
        if (classSymbolBuilder_ != null) {
          return classSymbolBuilder_.getMessageOrBuilder();
        } else {
          return classSymbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol class_symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getClassSymbolFieldBuilder() {
        if (classSymbolBuilder_ == null) {
          classSymbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getClassSymbol(),
                  getParentForChildren(),
                  isClean());
          classSymbol_ = null;
        }
        return classSymbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex classType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> classTypeBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
       */
      public boolean hasClassType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getClassType() {
        if (classTypeBuilder_ == null) {
          return classType_;
        } else {
          return classTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
       */
      public Builder setClassType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (classTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          classType_ = value;
          onChanged();
        } else {
          classTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
       */
      public Builder setClassType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (classTypeBuilder_ == null) {
          classType_ = builderForValue.build();
          onChanged();
        } else {
          classTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
       */
      public Builder mergeClassType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (classTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              classType_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) {
            classType_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder(classType_).mergeFrom(value).buildPartial();
          } else {
            classType_ = value;
          }
          onChanged();
        } else {
          classTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
       */
      public Builder clearClassType() {
        if (classTypeBuilder_ == null) {
          classType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
          onChanged();
        } else {
          classTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getClassTypeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getClassTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getClassTypeOrBuilder() {
        if (classTypeBuilder_ != null) {
          return classTypeBuilder_.getMessageOrBuilder();
        } else {
          return classType_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex class_type = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getClassTypeFieldBuilder() {
        if (classTypeBuilder_ == null) {
          classTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  getClassType(),
                  getParentForChildren(),
                  isClean());
          classType_ = null;
        }
        return classTypeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference)
    }

    static {
      defaultInstance = new IrClassReference(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference)
  }

  public interface IrConstOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool null = 1;</code>
     */
    boolean hasNull();
    /**
     * <code>optional bool null = 1;</code>
     */
    boolean getNull();

    /**
     * <code>optional bool boolean = 2;</code>
     */
    boolean hasBoolean();
    /**
     * <code>optional bool boolean = 2;</code>
     */
    boolean getBoolean();

    /**
     * <code>optional int32 char = 3;</code>
     */
    boolean hasChar();
    /**
     * <code>optional int32 char = 3;</code>
     */
    int getChar();

    /**
     * <code>optional int32 byte = 4;</code>
     */
    boolean hasByte();
    /**
     * <code>optional int32 byte = 4;</code>
     */
    int getByte();

    /**
     * <code>optional int32 short = 5;</code>
     */
    boolean hasShort();
    /**
     * <code>optional int32 short = 5;</code>
     */
    int getShort();

    /**
     * <code>optional int32 int = 6;</code>
     */
    boolean hasInt();
    /**
     * <code>optional int32 int = 6;</code>
     */
    int getInt();

    /**
     * <code>optional int64 long = 7;</code>
     */
    boolean hasLong();
    /**
     * <code>optional int64 long = 7;</code>
     */
    long getLong();

    /**
     * <code>optional float float = 8;</code>
     */
    boolean hasFloat();
    /**
     * <code>optional float float = 8;</code>
     */
    float getFloat();

    /**
     * <code>optional double double = 9;</code>
     */
    boolean hasDouble();
    /**
     * <code>optional double double = 9;</code>
     */
    double getDouble();

    /**
     * <code>optional string string = 10;</code>
     */
    boolean hasString();
    /**
     * <code>optional string string = 10;</code>
     */
    java.lang.String getString();
    /**
     * <code>optional string string = 10;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst}
   */
  public static final class IrConst extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst)
      IrConstOrBuilder {
    // Use IrConst.newBuilder() to construct.
    private IrConst(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrConst(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrConst defaultInstance;
    public static IrConst getDefaultInstance() {
      return defaultInstance;
    }

    public IrConst getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrConst(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              valueCase_ = 1;
              value_ = input.readBool();
              break;
            }
            case 16: {
              valueCase_ = 2;
              value_ = input.readBool();
              break;
            }
            case 24: {
              valueCase_ = 3;
              value_ = input.readInt32();
              break;
            }
            case 32: {
              valueCase_ = 4;
              value_ = input.readInt32();
              break;
            }
            case 40: {
              valueCase_ = 5;
              value_ = input.readInt32();
              break;
            }
            case 48: {
              valueCase_ = 6;
              value_ = input.readInt32();
              break;
            }
            case 56: {
              valueCase_ = 7;
              value_ = input.readInt64();
              break;
            }
            case 69: {
              valueCase_ = 8;
              value_ = input.readFloat();
              break;
            }
            case 73: {
              valueCase_ = 9;
              value_ = input.readDouble();
              break;
            }
            case 82: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              valueCase_ = 10;
              value_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConst_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConst_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrConst> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrConst>() {
      public IrConst parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrConst(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrConst> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      NULL(1),
      BOOLEAN(2),
      CHAR(3),
      BYTE(4),
      SHORT(5),
      INT(6),
      LONG(7),
      FLOAT(8),
      DOUBLE(9),
      STRING(10),
      VALUE_NOT_SET(0);
      private int value = 0;
      private ValueCase(int value) {
        this.value = value;
      }
      public static ValueCase valueOf(int value) {
        switch (value) {
          case 1: return NULL;
          case 2: return BOOLEAN;
          case 3: return CHAR;
          case 4: return BYTE;
          case 5: return SHORT;
          case 6: return INT;
          case 7: return LONG;
          case 8: return FLOAT;
          case 9: return DOUBLE;
          case 10: return STRING;
          case 0: return VALUE_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValueCase
    getValueCase() {
      return ValueCase.valueOf(
          valueCase_);
    }

    public static final int NULL_FIELD_NUMBER = 1;
    /**
     * <code>optional bool null = 1;</code>
     */
    public boolean hasNull() {
      return valueCase_ == 1;
    }
    /**
     * <code>optional bool null = 1;</code>
     */
    public boolean getNull() {
      if (valueCase_ == 1) {
        return (java.lang.Boolean) value_;
      }
      return false;
    }

    public static final int BOOLEAN_FIELD_NUMBER = 2;
    /**
     * <code>optional bool boolean = 2;</code>
     */
    public boolean hasBoolean() {
      return valueCase_ == 2;
    }
    /**
     * <code>optional bool boolean = 2;</code>
     */
    public boolean getBoolean() {
      if (valueCase_ == 2) {
        return (java.lang.Boolean) value_;
      }
      return false;
    }

    public static final int CHAR_FIELD_NUMBER = 3;
    /**
     * <code>optional int32 char = 3;</code>
     */
    public boolean hasChar() {
      return valueCase_ == 3;
    }
    /**
     * <code>optional int32 char = 3;</code>
     */
    public int getChar() {
      if (valueCase_ == 3) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int BYTE_FIELD_NUMBER = 4;
    /**
     * <code>optional int32 byte = 4;</code>
     */
    public boolean hasByte() {
      return valueCase_ == 4;
    }
    /**
     * <code>optional int32 byte = 4;</code>
     */
    public int getByte() {
      if (valueCase_ == 4) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int SHORT_FIELD_NUMBER = 5;
    /**
     * <code>optional int32 short = 5;</code>
     */
    public boolean hasShort() {
      return valueCase_ == 5;
    }
    /**
     * <code>optional int32 short = 5;</code>
     */
    public int getShort() {
      if (valueCase_ == 5) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int INT_FIELD_NUMBER = 6;
    /**
     * <code>optional int32 int = 6;</code>
     */
    public boolean hasInt() {
      return valueCase_ == 6;
    }
    /**
     * <code>optional int32 int = 6;</code>
     */
    public int getInt() {
      if (valueCase_ == 6) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int LONG_FIELD_NUMBER = 7;
    /**
     * <code>optional int64 long = 7;</code>
     */
    public boolean hasLong() {
      return valueCase_ == 7;
    }
    /**
     * <code>optional int64 long = 7;</code>
     */
    public long getLong() {
      if (valueCase_ == 7) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int FLOAT_FIELD_NUMBER = 8;
    /**
     * <code>optional float float = 8;</code>
     */
    public boolean hasFloat() {
      return valueCase_ == 8;
    }
    /**
     * <code>optional float float = 8;</code>
     */
    public float getFloat() {
      if (valueCase_ == 8) {
        return (java.lang.Float) value_;
      }
      return 0F;
    }

    public static final int DOUBLE_FIELD_NUMBER = 9;
    /**
     * <code>optional double double = 9;</code>
     */
    public boolean hasDouble() {
      return valueCase_ == 9;
    }
    /**
     * <code>optional double double = 9;</code>
     */
    public double getDouble() {
      if (valueCase_ == 9) {
        return (java.lang.Double) value_;
      }
      return 0D;
    }

    public static final int STRING_FIELD_NUMBER = 10;
    /**
     * <code>optional string string = 10;</code>
     */
    public boolean hasString() {
      return valueCase_ == 10;
    }
    /**
     * <code>optional string string = 10;</code>
     */
    public java.lang.String getString() {
      java.lang.Object ref = "";
      if (valueCase_ == 10) {
        ref = value_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8() && (valueCase_ == 10)) {
          value_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string string = 10;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes() {
      java.lang.Object ref = "";
      if (valueCase_ == 10) {
        ref = value_;
      }
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (valueCase_ == 10) {
          value_ = b;
        }
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (valueCase_ == 1) {
        output.writeBool(
            1, (boolean)((java.lang.Boolean) value_));
      }
      if (valueCase_ == 2) {
        output.writeBool(
            2, (boolean)((java.lang.Boolean) value_));
      }
      if (valueCase_ == 3) {
        output.writeInt32(
            3, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 4) {
        output.writeInt32(
            4, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 5) {
        output.writeInt32(
            5, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 6) {
        output.writeInt32(
            6, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 7) {
        output.writeInt64(
            7, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 8) {
        output.writeFloat(
            8, (float)((java.lang.Float) value_));
      }
      if (valueCase_ == 9) {
        output.writeDouble(
            9, (double)((java.lang.Double) value_));
      }
      if (valueCase_ == 10) {
        output.writeBytes(10, getStringBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (valueCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(
              1, (boolean)((java.lang.Boolean) value_));
      }
      if (valueCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(
              2, (boolean)((java.lang.Boolean) value_));
      }
      if (valueCase_ == 3) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(
              3, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 4) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(
              4, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 5) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(
              5, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 6) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(
              6, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 7) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt64Size(
              7, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 8) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeFloatSize(
              8, (float)((java.lang.Float) value_));
      }
      if (valueCase_ == 9) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeDoubleSize(
              9, (double)((java.lang.Double) value_));
      }
      if (valueCase_ == 10) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(10, getStringBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConst_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConst_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        valueCase_ = 0;
        value_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConst_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (valueCase_ == 1) {
          result.value_ = value_;
        }
        if (valueCase_ == 2) {
          result.value_ = value_;
        }
        if (valueCase_ == 3) {
          result.value_ = value_;
        }
        if (valueCase_ == 4) {
          result.value_ = value_;
        }
        if (valueCase_ == 5) {
          result.value_ = value_;
        }
        if (valueCase_ == 6) {
          result.value_ = value_;
        }
        if (valueCase_ == 7) {
          result.value_ = value_;
        }
        if (valueCase_ == 8) {
          result.value_ = value_;
        }
        if (valueCase_ == 9) {
          result.value_ = value_;
        }
        if (valueCase_ == 10) {
          result.value_ = value_;
        }
        result.bitField0_ = to_bitField0_;
        result.valueCase_ = valueCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.getDefaultInstance()) return this;
        switch (other.getValueCase()) {
          case NULL: {
            setNull(other.getNull());
            break;
          }
          case BOOLEAN: {
            setBoolean(other.getBoolean());
            break;
          }
          case CHAR: {
            setChar(other.getChar());
            break;
          }
          case BYTE: {
            setByte(other.getByte());
            break;
          }
          case SHORT: {
            setShort(other.getShort());
            break;
          }
          case INT: {
            setInt(other.getInt());
            break;
          }
          case LONG: {
            setLong(other.getLong());
            break;
          }
          case FLOAT: {
            setFloat(other.getFloat());
            break;
          }
          case DOUBLE: {
            setDouble(other.getDouble());
            break;
          }
          case STRING: {
            valueCase_ = 10;
            value_ = other.value_;
            onChanged();
            break;
          }
          case VALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int valueCase_ = 0;
      private java.lang.Object value_;
      public ValueCase
          getValueCase() {
        return ValueCase.valueOf(
            valueCase_);
      }

      public Builder clearValue() {
        valueCase_ = 0;
        value_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       * <code>optional bool null = 1;</code>
       */
      public boolean hasNull() {
        return valueCase_ == 1;
      }
      /**
       * <code>optional bool null = 1;</code>
       */
      public boolean getNull() {
        if (valueCase_ == 1) {
          return (java.lang.Boolean) value_;
        }
        return false;
      }
      /**
       * <code>optional bool null = 1;</code>
       */
      public Builder setNull(boolean value) {
        valueCase_ = 1;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool null = 1;</code>
       */
      public Builder clearNull() {
        if (valueCase_ == 1) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional bool boolean = 2;</code>
       */
      public boolean hasBoolean() {
        return valueCase_ == 2;
      }
      /**
       * <code>optional bool boolean = 2;</code>
       */
      public boolean getBoolean() {
        if (valueCase_ == 2) {
          return (java.lang.Boolean) value_;
        }
        return false;
      }
      /**
       * <code>optional bool boolean = 2;</code>
       */
      public Builder setBoolean(boolean value) {
        valueCase_ = 2;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool boolean = 2;</code>
       */
      public Builder clearBoolean() {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional int32 char = 3;</code>
       */
      public boolean hasChar() {
        return valueCase_ == 3;
      }
      /**
       * <code>optional int32 char = 3;</code>
       */
      public int getChar() {
        if (valueCase_ == 3) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>optional int32 char = 3;</code>
       */
      public Builder setChar(int value) {
        valueCase_ = 3;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 char = 3;</code>
       */
      public Builder clearChar() {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional int32 byte = 4;</code>
       */
      public boolean hasByte() {
        return valueCase_ == 4;
      }
      /**
       * <code>optional int32 byte = 4;</code>
       */
      public int getByte() {
        if (valueCase_ == 4) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>optional int32 byte = 4;</code>
       */
      public Builder setByte(int value) {
        valueCase_ = 4;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 byte = 4;</code>
       */
      public Builder clearByte() {
        if (valueCase_ == 4) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional int32 short = 5;</code>
       */
      public boolean hasShort() {
        return valueCase_ == 5;
      }
      /**
       * <code>optional int32 short = 5;</code>
       */
      public int getShort() {
        if (valueCase_ == 5) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>optional int32 short = 5;</code>
       */
      public Builder setShort(int value) {
        valueCase_ = 5;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 short = 5;</code>
       */
      public Builder clearShort() {
        if (valueCase_ == 5) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional int32 int = 6;</code>
       */
      public boolean hasInt() {
        return valueCase_ == 6;
      }
      /**
       * <code>optional int32 int = 6;</code>
       */
      public int getInt() {
        if (valueCase_ == 6) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>optional int32 int = 6;</code>
       */
      public Builder setInt(int value) {
        valueCase_ = 6;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 int = 6;</code>
       */
      public Builder clearInt() {
        if (valueCase_ == 6) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional int64 long = 7;</code>
       */
      public boolean hasLong() {
        return valueCase_ == 7;
      }
      /**
       * <code>optional int64 long = 7;</code>
       */
      public long getLong() {
        if (valueCase_ == 7) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>optional int64 long = 7;</code>
       */
      public Builder setLong(long value) {
        valueCase_ = 7;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 long = 7;</code>
       */
      public Builder clearLong() {
        if (valueCase_ == 7) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional float float = 8;</code>
       */
      public boolean hasFloat() {
        return valueCase_ == 8;
      }
      /**
       * <code>optional float float = 8;</code>
       */
      public float getFloat() {
        if (valueCase_ == 8) {
          return (java.lang.Float) value_;
        }
        return 0F;
      }
      /**
       * <code>optional float float = 8;</code>
       */
      public Builder setFloat(float value) {
        valueCase_ = 8;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float float = 8;</code>
       */
      public Builder clearFloat() {
        if (valueCase_ == 8) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional double double = 9;</code>
       */
      public boolean hasDouble() {
        return valueCase_ == 9;
      }
      /**
       * <code>optional double double = 9;</code>
       */
      public double getDouble() {
        if (valueCase_ == 9) {
          return (java.lang.Double) value_;
        }
        return 0D;
      }
      /**
       * <code>optional double double = 9;</code>
       */
      public Builder setDouble(double value) {
        valueCase_ = 9;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double double = 9;</code>
       */
      public Builder clearDouble() {
        if (valueCase_ == 9) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional string string = 10;</code>
       */
      public boolean hasString() {
        return valueCase_ == 10;
      }
      /**
       * <code>optional string string = 10;</code>
       */
      public java.lang.String getString() {
        java.lang.Object ref = "";
        if (valueCase_ == 10) {
          ref = value_;
        }
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (valueCase_ == 10) {
            if (bs.isValidUtf8()) {
              value_ = s;
            }
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string string = 10;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getStringBytes() {
        java.lang.Object ref = "";
        if (valueCase_ == 10) {
          ref = value_;
        }
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (valueCase_ == 10) {
            value_ = b;
          }
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string string = 10;</code>
       */
      public Builder setString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  valueCase_ = 10;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string string = 10;</code>
       */
      public Builder clearString() {
        if (valueCase_ == 10) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional string string = 10;</code>
       */
      public Builder setStringBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  valueCase_ = 10;
        value_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst)
    }

    static {
      defaultInstance = new IrConst(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst)
  }

  public interface IrContinueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 loop_id = 1;</code>
     */
    boolean hasLoopId();
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    int getLoopId();

    /**
     * <code>optional string label = 2;</code>
     */
    boolean hasLabel();
    /**
     * <code>optional string label = 2;</code>
     */
    java.lang.String getLabel();
    /**
     * <code>optional string label = 2;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getLabelBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue}
   */
  public static final class IrContinue extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue)
      IrContinueOrBuilder {
    // Use IrContinue.newBuilder() to construct.
    private IrContinue(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrContinue(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrContinue defaultInstance;
    public static IrContinue getDefaultInstance() {
      return defaultInstance;
    }

    public IrContinue getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrContinue(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              loopId_ = input.readInt32();
              break;
            }
            case 18: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              label_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrContinue_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrContinue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrContinue> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrContinue>() {
      public IrContinue parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrContinue(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrContinue> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LOOP_ID_FIELD_NUMBER = 1;
    private int loopId_;
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    public boolean hasLoopId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    public int getLoopId() {
      return loopId_;
    }

    public static final int LABEL_FIELD_NUMBER = 2;
    private java.lang.Object label_;
    /**
     * <code>optional string label = 2;</code>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string label = 2;</code>
     */
    public java.lang.String getLabel() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          label_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string label = 2;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getLabelBytes() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        label_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      loopId_ = 0;
      label_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasLoopId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, loopId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getLabelBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, loopId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(2, getLabelBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinueOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrContinue_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrContinue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        loopId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        label_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrContinue_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.loopId_ = loopId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.label_ = label_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.getDefaultInstance()) return this;
        if (other.hasLoopId()) {
          setLoopId(other.getLoopId());
        }
        if (other.hasLabel()) {
          bitField0_ |= 0x00000002;
          label_ = other.label_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLoopId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int loopId_ ;
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public boolean hasLoopId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public int getLoopId() {
        return loopId_;
      }
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public Builder setLoopId(int value) {
        bitField0_ |= 0x00000001;
        loopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public Builder clearLoopId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        loopId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object label_ = "";
      /**
       * <code>optional string label = 2;</code>
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string label = 2;</code>
       */
      public java.lang.String getLabel() {
        java.lang.Object ref = label_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            label_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string label = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getLabelBytes() {
        java.lang.Object ref = label_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          label_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string label = 2;</code>
       */
      public Builder setLabel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        label_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string label = 2;</code>
       */
      public Builder clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000002);
        label_ = getDefaultInstance().getLabel();
        onChanged();
        return this;
      }
      /**
       * <code>optional string label = 2;</code>
       */
      public Builder setLabelBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        label_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue)
    }

    static {
      defaultInstance = new IrContinue(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue)
  }

  public interface IrDelegatingConstructorCallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    boolean hasMemberAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall}
   */
  public static final class IrDelegatingConstructorCall extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall)
      IrDelegatingConstructorCallOrBuilder {
    // Use IrDelegatingConstructorCall.newBuilder() to construct.
    private IrDelegatingConstructorCall(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrDelegatingConstructorCall(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrDelegatingConstructorCall defaultInstance;
    public static IrDelegatingConstructorCall getDefaultInstance() {
      return defaultInstance;
    }

    public IrDelegatingConstructorCall getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrDelegatingConstructorCall(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = memberAccess_.toBuilder();
              }
              memberAccess_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memberAccess_);
                memberAccess_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDelegatingConstructorCall_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDelegatingConstructorCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrDelegatingConstructorCall> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrDelegatingConstructorCall>() {
      public IrDelegatingConstructorCall parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrDelegatingConstructorCall(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrDelegatingConstructorCall> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int MEMBER_ACCESS_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon memberAccess_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    public boolean hasMemberAccess() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess() {
      return memberAccess_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder() {
      return memberAccess_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMemberAccess()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMemberAccess().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, memberAccess_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, memberAccess_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCallOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDelegatingConstructorCall_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDelegatingConstructorCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getMemberAccessFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (memberAccessBuilder_ == null) {
          memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
        } else {
          memberAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDelegatingConstructorCall_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (memberAccessBuilder_ == null) {
          result.memberAccess_ = memberAccess_;
        } else {
          result.memberAccess_ = memberAccessBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasMemberAccess()) {
          mergeMemberAccess(other.getMemberAccess());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasMemberAccess()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (!getMemberAccess().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder> memberAccessBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public boolean hasMemberAccess() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess() {
        if (memberAccessBuilder_ == null) {
          return memberAccess_;
        } else {
          return memberAccessBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public Builder setMemberAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon value) {
        if (memberAccessBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memberAccess_ = value;
          onChanged();
        } else {
          memberAccessBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public Builder setMemberAccess(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder builderForValue) {
        if (memberAccessBuilder_ == null) {
          memberAccess_ = builderForValue.build();
          onChanged();
        } else {
          memberAccessBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public Builder mergeMemberAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon value) {
        if (memberAccessBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              memberAccess_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance()) {
            memberAccess_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.newBuilder(memberAccess_).mergeFrom(value).buildPartial();
          } else {
            memberAccess_ = value;
          }
          onChanged();
        } else {
          memberAccessBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public Builder clearMemberAccess() {
        if (memberAccessBuilder_ == null) {
          memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
          onChanged();
        } else {
          memberAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder getMemberAccessBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMemberAccessFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder() {
        if (memberAccessBuilder_ != null) {
          return memberAccessBuilder_.getMessageOrBuilder();
        } else {
          return memberAccess_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder> 
          getMemberAccessFieldBuilder() {
        if (memberAccessBuilder_ == null) {
          memberAccessBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder>(
                  getMemberAccess(),
                  getParentForChildren(),
                  isClean());
          memberAccess_ = null;
        }
        return memberAccessBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall)
    }

    static {
      defaultInstance = new IrDelegatingConstructorCall(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall)
  }

  public interface IrDoWhileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    boolean hasLoop();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop getLoop();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder getLoopOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile}
   */
  public static final class IrDoWhile extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile)
      IrDoWhileOrBuilder {
    // Use IrDoWhile.newBuilder() to construct.
    private IrDoWhile(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrDoWhile(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrDoWhile defaultInstance;
    public static IrDoWhile getDefaultInstance() {
      return defaultInstance;
    }

    public IrDoWhile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrDoWhile(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = loop_.toBuilder();
              }
              loop_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(loop_);
                loop_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDoWhile_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDoWhile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrDoWhile> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrDoWhile>() {
      public IrDoWhile parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrDoWhile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrDoWhile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LOOP_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop loop_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    public boolean hasLoop() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop getLoop() {
      return loop_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder getLoopOrBuilder() {
      return loop_;
    }

    private void initFields() {
      loop_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasLoop()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getLoop().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, loop_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, loop_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhileOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDoWhile_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDoWhile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLoopFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (loopBuilder_ == null) {
          loop_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance();
        } else {
          loopBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDoWhile_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (loopBuilder_ == null) {
          result.loop_ = loop_;
        } else {
          result.loop_ = loopBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.getDefaultInstance()) return this;
        if (other.hasLoop()) {
          mergeLoop(other.getLoop());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLoop()) {
          
          return false;
        }
        if (!getLoop().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop loop_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder> loopBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public boolean hasLoop() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop getLoop() {
        if (loopBuilder_ == null) {
          return loop_;
        } else {
          return loopBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public Builder setLoop(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop value) {
        if (loopBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          loop_ = value;
          onChanged();
        } else {
          loopBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public Builder setLoop(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder builderForValue) {
        if (loopBuilder_ == null) {
          loop_ = builderForValue.build();
          onChanged();
        } else {
          loopBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public Builder mergeLoop(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop value) {
        if (loopBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              loop_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance()) {
            loop_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.newBuilder(loop_).mergeFrom(value).buildPartial();
          } else {
            loop_ = value;
          }
          onChanged();
        } else {
          loopBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public Builder clearLoop() {
        if (loopBuilder_ == null) {
          loop_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance();
          onChanged();
        } else {
          loopBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder getLoopBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLoopFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder getLoopOrBuilder() {
        if (loopBuilder_ != null) {
          return loopBuilder_.getMessageOrBuilder();
        } else {
          return loop_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder> 
          getLoopFieldBuilder() {
        if (loopBuilder_ == null) {
          loopBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder>(
                  getLoop(),
                  getParentForChildren(),
                  isClean());
          loop_ = null;
        }
        return loopBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile)
    }

    static {
      defaultInstance = new IrDoWhile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile)
  }

  public interface IrEnumConstructorCallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    boolean hasMemberAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall}
   */
  public static final class IrEnumConstructorCall extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall)
      IrEnumConstructorCallOrBuilder {
    // Use IrEnumConstructorCall.newBuilder() to construct.
    private IrEnumConstructorCall(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrEnumConstructorCall(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrEnumConstructorCall defaultInstance;
    public static IrEnumConstructorCall getDefaultInstance() {
      return defaultInstance;
    }

    public IrEnumConstructorCall getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrEnumConstructorCall(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = memberAccess_.toBuilder();
              }
              memberAccess_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memberAccess_);
                memberAccess_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumConstructorCall_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumConstructorCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrEnumConstructorCall> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrEnumConstructorCall>() {
      public IrEnumConstructorCall parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrEnumConstructorCall(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrEnumConstructorCall> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int MEMBER_ACCESS_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon memberAccess_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    public boolean hasMemberAccess() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess() {
      return memberAccess_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder() {
      return memberAccess_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMemberAccess()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMemberAccess().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, memberAccess_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, memberAccess_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCallOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumConstructorCall_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumConstructorCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getMemberAccessFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (memberAccessBuilder_ == null) {
          memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
        } else {
          memberAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumConstructorCall_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (memberAccessBuilder_ == null) {
          result.memberAccess_ = memberAccess_;
        } else {
          result.memberAccess_ = memberAccessBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasMemberAccess()) {
          mergeMemberAccess(other.getMemberAccess());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasMemberAccess()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (!getMemberAccess().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder> memberAccessBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public boolean hasMemberAccess() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon getMemberAccess() {
        if (memberAccessBuilder_ == null) {
          return memberAccess_;
        } else {
          return memberAccessBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public Builder setMemberAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon value) {
        if (memberAccessBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memberAccess_ = value;
          onChanged();
        } else {
          memberAccessBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public Builder setMemberAccess(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder builderForValue) {
        if (memberAccessBuilder_ == null) {
          memberAccess_ = builderForValue.build();
          onChanged();
        } else {
          memberAccessBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public Builder mergeMemberAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon value) {
        if (memberAccessBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              memberAccess_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance()) {
            memberAccess_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.newBuilder(memberAccess_).mergeFrom(value).buildPartial();
          } else {
            memberAccess_ = value;
          }
          onChanged();
        } else {
          memberAccessBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public Builder clearMemberAccess() {
        if (memberAccessBuilder_ == null) {
          memberAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.getDefaultInstance();
          onChanged();
        } else {
          memberAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder getMemberAccessBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMemberAccessFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder getMemberAccessOrBuilder() {
        if (memberAccessBuilder_ != null) {
          return memberAccessBuilder_.getMessageOrBuilder();
        } else {
          return memberAccess_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.MemberAccessCommon member_access = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder> 
          getMemberAccessFieldBuilder() {
        if (memberAccessBuilder_ == null) {
          memberAccessBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.MemberAccessCommonOrBuilder>(
                  getMemberAccess(),
                  getParentForChildren(),
                  isClean());
          memberAccess_ = null;
        }
        return memberAccessBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall)
    }

    static {
      defaultInstance = new IrEnumConstructorCall(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall)
  }

  public interface IrGetClassOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    boolean hasArgument();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getArgument();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getArgumentOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass}
   */
  public static final class IrGetClass extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass)
      IrGetClassOrBuilder {
    // Use IrGetClass.newBuilder() to construct.
    private IrGetClass(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrGetClass(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrGetClass defaultInstance;
    public static IrGetClass getDefaultInstance() {
      return defaultInstance;
    }

    public IrGetClass getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrGetClass(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = argument_.toBuilder();
              }
              argument_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(argument_);
                argument_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetClass_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetClass_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrGetClass> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrGetClass>() {
      public IrGetClass parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrGetClass(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrGetClass> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ARGUMENT_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression argument_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    public boolean hasArgument() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getArgument() {
      return argument_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getArgumentOrBuilder() {
      return argument_;
    }

    private void initFields() {
      argument_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasArgument()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getArgument().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, argument_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, argument_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClassOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetClass_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetClass_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getArgumentFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (argumentBuilder_ == null) {
          argument_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          argumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetClass_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (argumentBuilder_ == null) {
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.getDefaultInstance()) return this;
        if (other.hasArgument()) {
          mergeArgument(other.getArgument());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasArgument()) {
          
          return false;
        }
        if (!getArgument().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression argument_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> argumentBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public boolean hasArgument() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getArgument() {
        if (argumentBuilder_ == null) {
          return argument_;
        } else {
          return argumentBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder setArgument(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          argument_ = value;
          onChanged();
        } else {
          argumentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder setArgument(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          argument_ = builderForValue.build();
          onChanged();
        } else {
          argumentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder mergeArgument(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (argumentBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              argument_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            argument_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(argument_).mergeFrom(value).buildPartial();
          } else {
            argument_ = value;
          }
          onChanged();
        } else {
          argumentBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          argumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getArgumentBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getArgumentFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getArgumentOrBuilder() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilder();
        } else {
          return argument_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getArgument(),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass)
    }

    static {
      defaultInstance = new IrGetClass(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass)
  }

  public interface IrGetEnumValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue}
   */
  public static final class IrGetEnumValue extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue)
      IrGetEnumValueOrBuilder {
    // Use IrGetEnumValue.newBuilder() to construct.
    private IrGetEnumValue(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrGetEnumValue(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrGetEnumValue defaultInstance;
    public static IrGetEnumValue getDefaultInstance() {
      return defaultInstance;
    }

    public IrGetEnumValue getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrGetEnumValue(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetEnumValue_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetEnumValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrGetEnumValue> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrGetEnumValue>() {
      public IrGetEnumValue parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrGetEnumValue(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrGetEnumValue> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, symbol_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, symbol_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValueOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetEnumValue_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetEnumValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetEnumValue_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue)
    }

    static {
      defaultInstance = new IrGetEnumValue(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue)
  }

  public interface FieldAccessCommonOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
     */
    boolean hasSuper();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSuper();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSuperOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
     */
    boolean hasReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getReceiverOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon}
   */
  public static final class FieldAccessCommon extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon)
      FieldAccessCommonOrBuilder {
    // Use FieldAccessCommon.newBuilder() to construct.
    private FieldAccessCommon(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FieldAccessCommon(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FieldAccessCommon defaultInstance;
    public static FieldAccessCommon getDefaultInstance() {
      return defaultInstance;
    }

    public FieldAccessCommon getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FieldAccessCommon(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = super_.toBuilder();
              }
              super_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(super_);
                super_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = receiver_.toBuilder();
              }
              receiver_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(receiver_);
                receiver_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FieldAccessCommon_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FieldAccessCommon_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<FieldAccessCommon> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<FieldAccessCommon>() {
      public FieldAccessCommon parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new FieldAccessCommon(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<FieldAccessCommon> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int SUPER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol super_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
     */
    public boolean hasSuper() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSuper() {
      return super_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSuperOrBuilder() {
      return super_;
    }

    public static final int RECEIVER_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression receiver_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
     */
    public boolean hasReceiver() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getReceiver() {
      return receiver_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getReceiverOrBuilder() {
      return receiver_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      super_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      receiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasSuper()) {
        if (!getSuper().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReceiver()) {
        if (!getReceiver().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, super_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, receiver_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, super_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, receiver_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FieldAccessCommon_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FieldAccessCommon_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getSuperFieldBuilder();
          getReceiverFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (superBuilder_ == null) {
          super_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          superBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (receiverBuilder_ == null) {
          receiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          receiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FieldAccessCommon_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (superBuilder_ == null) {
          result.super_ = super_;
        } else {
          result.super_ = superBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (receiverBuilder_ == null) {
          result.receiver_ = receiver_;
        } else {
          result.receiver_ = receiverBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasSuper()) {
          mergeSuper(other.getSuper());
        }
        if (other.hasReceiver()) {
          mergeReceiver(other.getReceiver());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (hasSuper()) {
          if (!getSuper().isInitialized()) {
            
            return false;
          }
        }
        if (hasReceiver()) {
          if (!getReceiver().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol super_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> superBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
       */
      public boolean hasSuper() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSuper() {
        if (superBuilder_ == null) {
          return super_;
        } else {
          return superBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
       */
      public Builder setSuper(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (superBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          super_ = value;
          onChanged();
        } else {
          superBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
       */
      public Builder setSuper(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (superBuilder_ == null) {
          super_ = builderForValue.build();
          onChanged();
        } else {
          superBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
       */
      public Builder mergeSuper(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (superBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              super_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            super_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(super_).mergeFrom(value).buildPartial();
          } else {
            super_ = value;
          }
          onChanged();
        } else {
          superBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
       */
      public Builder clearSuper() {
        if (superBuilder_ == null) {
          super_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          superBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSuperBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getSuperFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSuperOrBuilder() {
        if (superBuilder_ != null) {
          return superBuilder_.getMessageOrBuilder();
        } else {
          return super_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol super = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSuperFieldBuilder() {
        if (superBuilder_ == null) {
          superBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSuper(),
                  getParentForChildren(),
                  isClean());
          super_ = null;
        }
        return superBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression receiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> receiverBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
       */
      public boolean hasReceiver() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getReceiver() {
        if (receiverBuilder_ == null) {
          return receiver_;
        } else {
          return receiverBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
       */
      public Builder setReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (receiverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          receiver_ = value;
          onChanged();
        } else {
          receiverBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
       */
      public Builder setReceiver(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (receiverBuilder_ == null) {
          receiver_ = builderForValue.build();
          onChanged();
        } else {
          receiverBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
       */
      public Builder mergeReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (receiverBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              receiver_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            receiver_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(receiver_).mergeFrom(value).buildPartial();
          } else {
            receiver_ = value;
          }
          onChanged();
        } else {
          receiverBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
       */
      public Builder clearReceiver() {
        if (receiverBuilder_ == null) {
          receiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          receiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getReceiverBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getReceiverFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getReceiverOrBuilder() {
        if (receiverBuilder_ != null) {
          return receiverBuilder_.getMessageOrBuilder();
        } else {
          return receiver_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression receiver = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getReceiverFieldBuilder() {
        if (receiverBuilder_ == null) {
          receiverBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getReceiver(),
                  getParentForChildren(),
                  isClean());
          receiver_ = null;
        }
        return receiverBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon)
    }

    static {
      defaultInstance = new FieldAccessCommon(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon)
  }

  public interface IrGetFieldOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    boolean hasFieldAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon getFieldAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder getFieldAccessOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField}
   */
  public static final class IrGetField extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField)
      IrGetFieldOrBuilder {
    // Use IrGetField.newBuilder() to construct.
    private IrGetField(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrGetField(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrGetField defaultInstance;
    public static IrGetField getDefaultInstance() {
      return defaultInstance;
    }

    public IrGetField getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrGetField(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = fieldAccess_.toBuilder();
              }
              fieldAccess_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fieldAccess_);
                fieldAccess_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetField_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetField_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrGetField> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrGetField>() {
      public IrGetField parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrGetField(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrGetField> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FIELD_ACCESS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon fieldAccess_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    public boolean hasFieldAccess() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon getFieldAccess() {
      return fieldAccess_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder getFieldAccessOrBuilder() {
      return fieldAccess_;
    }

    private void initFields() {
      fieldAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFieldAccess()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFieldAccess().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, fieldAccess_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, fieldAccess_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetFieldOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetField_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetField_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFieldAccessFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (fieldAccessBuilder_ == null) {
          fieldAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance();
        } else {
          fieldAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetField_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (fieldAccessBuilder_ == null) {
          result.fieldAccess_ = fieldAccess_;
        } else {
          result.fieldAccess_ = fieldAccessBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.getDefaultInstance()) return this;
        if (other.hasFieldAccess()) {
          mergeFieldAccess(other.getFieldAccess());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFieldAccess()) {
          
          return false;
        }
        if (!getFieldAccess().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon fieldAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder> fieldAccessBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public boolean hasFieldAccess() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon getFieldAccess() {
        if (fieldAccessBuilder_ == null) {
          return fieldAccess_;
        } else {
          return fieldAccessBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public Builder setFieldAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon value) {
        if (fieldAccessBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fieldAccess_ = value;
          onChanged();
        } else {
          fieldAccessBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public Builder setFieldAccess(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder builderForValue) {
        if (fieldAccessBuilder_ == null) {
          fieldAccess_ = builderForValue.build();
          onChanged();
        } else {
          fieldAccessBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public Builder mergeFieldAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon value) {
        if (fieldAccessBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              fieldAccess_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance()) {
            fieldAccess_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.newBuilder(fieldAccess_).mergeFrom(value).buildPartial();
          } else {
            fieldAccess_ = value;
          }
          onChanged();
        } else {
          fieldAccessBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public Builder clearFieldAccess() {
        if (fieldAccessBuilder_ == null) {
          fieldAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance();
          onChanged();
        } else {
          fieldAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder getFieldAccessBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFieldAccessFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder getFieldAccessOrBuilder() {
        if (fieldAccessBuilder_ != null) {
          return fieldAccessBuilder_.getMessageOrBuilder();
        } else {
          return fieldAccess_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder> 
          getFieldAccessFieldBuilder() {
        if (fieldAccessBuilder_ == null) {
          fieldAccessBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder>(
                  getFieldAccess(),
                  getParentForChildren(),
                  isClean());
          fieldAccess_ = null;
        }
        return fieldAccessBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField)
    }

    static {
      defaultInstance = new IrGetField(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField)
  }

  public interface IrGetValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue}
   */
  public static final class IrGetValue extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue)
      IrGetValueOrBuilder {
    // Use IrGetValue.newBuilder() to construct.
    private IrGetValue(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrGetValue(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrGetValue defaultInstance;
    public static IrGetValue getDefaultInstance() {
      return defaultInstance;
    }

    public IrGetValue getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrGetValue(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetValue_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrGetValue> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrGetValue>() {
      public IrGetValue parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrGetValue(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrGetValue> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValueOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetValue_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetValue_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue)
    }

    static {
      defaultInstance = new IrGetValue(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue)
  }

  public interface IrGetObjectOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject}
   */
  public static final class IrGetObject extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject)
      IrGetObjectOrBuilder {
    // Use IrGetObject.newBuilder() to construct.
    private IrGetObject(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrGetObject(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrGetObject defaultInstance;
    public static IrGetObject getDefaultInstance() {
      return defaultInstance;
    }

    public IrGetObject getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrGetObject(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetObject_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetObject_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrGetObject> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrGetObject>() {
      public IrGetObject parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrGetObject(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrGetObject> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObjectOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetObject_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetObject_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetObject_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject)
    }

    static {
      defaultInstance = new IrGetObject(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject)
  }

  public interface IrInstanceInitializerCallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall}
   */
  public static final class IrInstanceInitializerCall extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall)
      IrInstanceInitializerCallOrBuilder {
    // Use IrInstanceInitializerCall.newBuilder() to construct.
    private IrInstanceInitializerCall(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrInstanceInitializerCall(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrInstanceInitializerCall defaultInstance;
    public static IrInstanceInitializerCall getDefaultInstance() {
      return defaultInstance;
    }

    public IrInstanceInitializerCall getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrInstanceInitializerCall(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrInstanceInitializerCall_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrInstanceInitializerCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrInstanceInitializerCall> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrInstanceInitializerCall>() {
      public IrInstanceInitializerCall parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrInstanceInitializerCall(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrInstanceInitializerCall> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCallOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrInstanceInitializerCall_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrInstanceInitializerCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrInstanceInitializerCall_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall)
    }

    static {
      defaultInstance = new IrInstanceInitializerCall(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall)
  }

  public interface LoopOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 loop_id = 1;</code>
     */
    boolean hasLoopId();
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    int getLoopId();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
     */
    boolean hasCondition();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getCondition();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getConditionOrBuilder();

    /**
     * <code>optional string label = 3;</code>
     */
    boolean hasLabel();
    /**
     * <code>optional string label = 3;</code>
     */
    java.lang.String getLabel();
    /**
     * <code>optional string label = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getLabelBytes();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
     */
    boolean hasBody();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getBody();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getBodyOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop}
   */
  public static final class Loop extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop)
      LoopOrBuilder {
    // Use Loop.newBuilder() to construct.
    private Loop(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Loop(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Loop defaultInstance;
    public static Loop getDefaultInstance() {
      return defaultInstance;
    }

    public Loop getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Loop(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              loopId_ = input.readInt32();
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = condition_.toBuilder();
              }
              condition_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(condition_);
                condition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              label_ = bs;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = body_.toBuilder();
              }
              body_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(body_);
                body_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Loop_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Loop_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Loop> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Loop>() {
      public Loop parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Loop(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Loop> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LOOP_ID_FIELD_NUMBER = 1;
    private int loopId_;
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    public boolean hasLoopId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    public int getLoopId() {
      return loopId_;
    }

    public static final int CONDITION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression condition_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
     */
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getCondition() {
      return condition_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getConditionOrBuilder() {
      return condition_;
    }

    public static final int LABEL_FIELD_NUMBER = 3;
    private java.lang.Object label_;
    /**
     * <code>optional string label = 3;</code>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string label = 3;</code>
     */
    public java.lang.String getLabel() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          label_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string label = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getLabelBytes() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        label_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int BODY_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression body_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
     */
    public boolean hasBody() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getBody() {
      return body_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getBodyOrBuilder() {
      return body_;
    }

    private void initFields() {
      loopId_ = 0;
      condition_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      label_ = "";
      body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasLoopId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCondition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCondition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasBody()) {
        if (!getBody().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, loopId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, condition_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getLabelBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, body_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, loopId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, condition_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(3, getLabelBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, body_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Loop_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Loop_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getConditionFieldBuilder();
          getBodyFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        loopId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (conditionBuilder_ == null) {
          condition_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          conditionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        label_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        if (bodyBuilder_ == null) {
          body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          bodyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Loop_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.loopId_ = loopId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (conditionBuilder_ == null) {
          result.condition_ = condition_;
        } else {
          result.condition_ = conditionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.label_ = label_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (bodyBuilder_ == null) {
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance()) return this;
        if (other.hasLoopId()) {
          setLoopId(other.getLoopId());
        }
        if (other.hasCondition()) {
          mergeCondition(other.getCondition());
        }
        if (other.hasLabel()) {
          bitField0_ |= 0x00000004;
          label_ = other.label_;
          onChanged();
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLoopId()) {
          
          return false;
        }
        if (!hasCondition()) {
          
          return false;
        }
        if (!getCondition().isInitialized()) {
          
          return false;
        }
        if (hasBody()) {
          if (!getBody().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int loopId_ ;
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public boolean hasLoopId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public int getLoopId() {
        return loopId_;
      }
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public Builder setLoopId(int value) {
        bitField0_ |= 0x00000001;
        loopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 loop_id = 1;</code>
       */
      public Builder clearLoopId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        loopId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression condition_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> conditionBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
       */
      public boolean hasCondition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getCondition() {
        if (conditionBuilder_ == null) {
          return condition_;
        } else {
          return conditionBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
       */
      public Builder setCondition(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (conditionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          condition_ = value;
          onChanged();
        } else {
          conditionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
       */
      public Builder setCondition(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (conditionBuilder_ == null) {
          condition_ = builderForValue.build();
          onChanged();
        } else {
          conditionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
       */
      public Builder mergeCondition(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (conditionBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              condition_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            condition_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(condition_).mergeFrom(value).buildPartial();
          } else {
            condition_ = value;
          }
          onChanged();
        } else {
          conditionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
       */
      public Builder clearCondition() {
        if (conditionBuilder_ == null) {
          condition_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          conditionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getConditionBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getConditionFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getConditionOrBuilder() {
        if (conditionBuilder_ != null) {
          return conditionBuilder_.getMessageOrBuilder();
        } else {
          return condition_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getConditionFieldBuilder() {
        if (conditionBuilder_ == null) {
          conditionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getCondition(),
                  getParentForChildren(),
                  isClean());
          condition_ = null;
        }
        return conditionBuilder_;
      }

      private java.lang.Object label_ = "";
      /**
       * <code>optional string label = 3;</code>
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string label = 3;</code>
       */
      public java.lang.String getLabel() {
        java.lang.Object ref = label_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            label_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string label = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getLabelBytes() {
        java.lang.Object ref = label_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          label_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string label = 3;</code>
       */
      public Builder setLabel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        label_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string label = 3;</code>
       */
      public Builder clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000004);
        label_ = getDefaultInstance().getLabel();
        onChanged();
        return this;
      }
      /**
       * <code>optional string label = 3;</code>
       */
      public Builder setLabelBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        label_ = value;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> bodyBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
       */
      public boolean hasBody() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getBody() {
        if (bodyBuilder_ == null) {
          return body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
       */
      public Builder setBody(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          bodyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (bodyBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              body_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            body_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(body_).mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          bodyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          bodyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getBodyBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression body = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop)
    }

    static {
      defaultInstance = new Loop(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop)
  }

  public interface IrReturnOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
     */
    boolean hasReturnTarget();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getReturnTarget();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getReturnTargetOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    boolean hasValue();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn}
   */
  public static final class IrReturn extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn)
      IrReturnOrBuilder {
    // Use IrReturn.newBuilder() to construct.
    private IrReturn(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrReturn(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrReturn defaultInstance;
    public static IrReturn getDefaultInstance() {
      return defaultInstance;
    }

    public IrReturn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrReturn(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = returnTarget_.toBuilder();
              }
              returnTarget_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(returnTarget_);
                returnTarget_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = value_.toBuilder();
              }
              value_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(value_);
                value_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrReturn_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrReturn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrReturn> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrReturn>() {
      public IrReturn parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrReturn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrReturn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int RETURN_TARGET_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol returnTarget_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
     */
    public boolean hasReturnTarget() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getReturnTarget() {
      return returnTarget_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getReturnTargetOrBuilder() {
      return returnTarget_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue() {
      return value_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder() {
      return value_;
    }

    private void initFields() {
      returnTarget_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasReturnTarget()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getReturnTarget().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getValue().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, returnTarget_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, returnTarget_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturnOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrReturn_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrReturn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getReturnTargetFieldBuilder();
          getValueFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (returnTargetBuilder_ == null) {
          returnTarget_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          returnTargetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (valueBuilder_ == null) {
          value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrReturn_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (returnTargetBuilder_ == null) {
          result.returnTarget_ = returnTarget_;
        } else {
          result.returnTarget_ = returnTargetBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (valueBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = valueBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.getDefaultInstance()) return this;
        if (other.hasReturnTarget()) {
          mergeReturnTarget(other.getReturnTarget());
        }
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasReturnTarget()) {
          
          return false;
        }
        if (!hasValue()) {
          
          return false;
        }
        if (!getReturnTarget().isInitialized()) {
          
          return false;
        }
        if (!getValue().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol returnTarget_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> returnTargetBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
       */
      public boolean hasReturnTarget() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getReturnTarget() {
        if (returnTargetBuilder_ == null) {
          return returnTarget_;
        } else {
          return returnTargetBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
       */
      public Builder setReturnTarget(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (returnTargetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          returnTarget_ = value;
          onChanged();
        } else {
          returnTargetBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
       */
      public Builder setReturnTarget(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (returnTargetBuilder_ == null) {
          returnTarget_ = builderForValue.build();
          onChanged();
        } else {
          returnTargetBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
       */
      public Builder mergeReturnTarget(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (returnTargetBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              returnTarget_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            returnTarget_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(returnTarget_).mergeFrom(value).buildPartial();
          } else {
            returnTarget_ = value;
          }
          onChanged();
        } else {
          returnTargetBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
       */
      public Builder clearReturnTarget() {
        if (returnTargetBuilder_ == null) {
          returnTarget_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          returnTargetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getReturnTargetBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getReturnTargetFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getReturnTargetOrBuilder() {
        if (returnTargetBuilder_ != null) {
          return returnTargetBuilder_.getMessageOrBuilder();
        } else {
          return returnTarget_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol return_target = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getReturnTargetFieldBuilder() {
        if (returnTargetBuilder_ == null) {
          returnTargetBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getReturnTarget(),
                  getParentForChildren(),
                  isClean());
          returnTarget_ = null;
        }
        return returnTargetBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> valueBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue() {
        if (valueBuilder_ == null) {
          return value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder setValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder setValue(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder mergeValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              value_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            value_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(value_).mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          valueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder clearValue() {
        if (valueBuilder_ == null) {
          value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getValueBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn)
    }

    static {
      defaultInstance = new IrReturn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn)
  }

  public interface IrSetFieldOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    boolean hasFieldAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon getFieldAccess();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder getFieldAccessOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    boolean hasValue();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField}
   */
  public static final class IrSetField extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField)
      IrSetFieldOrBuilder {
    // Use IrSetField.newBuilder() to construct.
    private IrSetField(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrSetField(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrSetField defaultInstance;
    public static IrSetField getDefaultInstance() {
      return defaultInstance;
    }

    public IrSetField getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrSetField(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = fieldAccess_.toBuilder();
              }
              fieldAccess_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fieldAccess_);
                fieldAccess_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = value_.toBuilder();
              }
              value_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(value_);
                value_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetField_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetField_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrSetField> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrSetField>() {
      public IrSetField parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrSetField(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrSetField> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FIELD_ACCESS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon fieldAccess_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    public boolean hasFieldAccess() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon getFieldAccess() {
      return fieldAccess_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder getFieldAccessOrBuilder() {
      return fieldAccess_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue() {
      return value_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder() {
      return value_;
    }

    private void initFields() {
      fieldAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance();
      value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFieldAccess()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFieldAccess().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getValue().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, fieldAccess_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, fieldAccess_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetFieldOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetField_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetField_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFieldAccessFieldBuilder();
          getValueFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (fieldAccessBuilder_ == null) {
          fieldAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance();
        } else {
          fieldAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (valueBuilder_ == null) {
          value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetField_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (fieldAccessBuilder_ == null) {
          result.fieldAccess_ = fieldAccess_;
        } else {
          result.fieldAccess_ = fieldAccessBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (valueBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = valueBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.getDefaultInstance()) return this;
        if (other.hasFieldAccess()) {
          mergeFieldAccess(other.getFieldAccess());
        }
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFieldAccess()) {
          
          return false;
        }
        if (!hasValue()) {
          
          return false;
        }
        if (!getFieldAccess().isInitialized()) {
          
          return false;
        }
        if (!getValue().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon fieldAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder> fieldAccessBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public boolean hasFieldAccess() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon getFieldAccess() {
        if (fieldAccessBuilder_ == null) {
          return fieldAccess_;
        } else {
          return fieldAccessBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public Builder setFieldAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon value) {
        if (fieldAccessBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fieldAccess_ = value;
          onChanged();
        } else {
          fieldAccessBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public Builder setFieldAccess(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder builderForValue) {
        if (fieldAccessBuilder_ == null) {
          fieldAccess_ = builderForValue.build();
          onChanged();
        } else {
          fieldAccessBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public Builder mergeFieldAccess(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon value) {
        if (fieldAccessBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              fieldAccess_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance()) {
            fieldAccess_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.newBuilder(fieldAccess_).mergeFrom(value).buildPartial();
          } else {
            fieldAccess_ = value;
          }
          onChanged();
        } else {
          fieldAccessBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public Builder clearFieldAccess() {
        if (fieldAccessBuilder_ == null) {
          fieldAccess_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.getDefaultInstance();
          onChanged();
        } else {
          fieldAccessBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder getFieldAccessBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFieldAccessFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder getFieldAccessOrBuilder() {
        if (fieldAccessBuilder_ != null) {
          return fieldAccessBuilder_.getMessageOrBuilder();
        } else {
          return fieldAccess_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.FieldAccessCommon field_access = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder> 
          getFieldAccessFieldBuilder() {
        if (fieldAccessBuilder_ == null) {
          fieldAccessBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommon.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.FieldAccessCommonOrBuilder>(
                  getFieldAccess(),
                  getParentForChildren(),
                  isClean());
          fieldAccess_ = null;
        }
        return fieldAccessBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> valueBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue() {
        if (valueBuilder_ == null) {
          return value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder setValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder setValue(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder mergeValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              value_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            value_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(value_).mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          valueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder clearValue() {
        if (valueBuilder_ == null) {
          value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getValueBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField)
    }

    static {
      defaultInstance = new IrSetField(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField)
  }

  public interface IrSetVariableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    boolean hasValue();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable}
   */
  public static final class IrSetVariable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable)
      IrSetVariableOrBuilder {
    // Use IrSetVariable.newBuilder() to construct.
    private IrSetVariable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrSetVariable(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrSetVariable defaultInstance;
    public static IrSetVariable getDefaultInstance() {
      return defaultInstance;
    }

    public IrSetVariable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrSetVariable(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = value_.toBuilder();
              }
              value_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(value_);
                value_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetVariable_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetVariable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrSetVariable> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrSetVariable>() {
      public IrSetVariable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrSetVariable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrSetVariable> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue() {
      return value_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder() {
      return value_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getValue().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetVariable_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetVariable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getValueFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (valueBuilder_ == null) {
          value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetVariable_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (valueBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = valueBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasValue()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (!getValue().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> valueBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue() {
        if (valueBuilder_ == null) {
          return value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder setValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder setValue(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder mergeValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              value_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            value_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(value_).mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          valueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public Builder clearValue() {
        if (valueBuilder_ == null) {
          value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getValueBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable)
    }

    static {
      defaultInstance = new IrSetVariable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable)
  }

  public interface IrSpreadElementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    boolean hasExpression();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    boolean hasCoordinates();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement}
   */
  public static final class IrSpreadElement extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement)
      IrSpreadElementOrBuilder {
    // Use IrSpreadElement.newBuilder() to construct.
    private IrSpreadElement(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrSpreadElement(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrSpreadElement defaultInstance;
    public static IrSpreadElement getDefaultInstance() {
      return defaultInstance;
    }

    public IrSpreadElement getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrSpreadElement(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = expression_.toBuilder();
              }
              expression_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(expression_);
                expression_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = coordinates_.toBuilder();
              }
              coordinates_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(coordinates_);
                coordinates_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSpreadElement_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSpreadElement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrSpreadElement> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrSpreadElement>() {
      public IrSpreadElement parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrSpreadElement(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrSpreadElement> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int EXPRESSION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression expression_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    public boolean hasExpression() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression() {
      return expression_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder() {
      return expression_;
    }

    public static final int COORDINATES_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates coordinates_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    public boolean hasCoordinates() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates() {
      return coordinates_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder() {
      return coordinates_;
    }

    private void initFields() {
      expression_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasExpression()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCoordinates()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getExpression().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCoordinates().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, expression_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, coordinates_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, expression_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, coordinates_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElementOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSpreadElement_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSpreadElement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getExpressionFieldBuilder();
          getCoordinatesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (expressionBuilder_ == null) {
          expression_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          expressionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (coordinatesBuilder_ == null) {
          coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
        } else {
          coordinatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSpreadElement_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (expressionBuilder_ == null) {
          result.expression_ = expression_;
        } else {
          result.expression_ = expressionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (coordinatesBuilder_ == null) {
          result.coordinates_ = coordinates_;
        } else {
          result.coordinates_ = coordinatesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.getDefaultInstance()) return this;
        if (other.hasExpression()) {
          mergeExpression(other.getExpression());
        }
        if (other.hasCoordinates()) {
          mergeCoordinates(other.getCoordinates());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasExpression()) {
          
          return false;
        }
        if (!hasCoordinates()) {
          
          return false;
        }
        if (!getExpression().isInitialized()) {
          
          return false;
        }
        if (!getCoordinates().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression expression_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public boolean hasExpression() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression() {
        if (expressionBuilder_ == null) {
          return expression_;
        } else {
          return expressionBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          expressionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (expressionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              expression_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            expression_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(expression_).mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          expressionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder clearExpression() {
        if (expressionBuilder_ == null) {
          expression_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          expressionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getExpressionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder() {
        if (expressionBuilder_ != null) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          return expression_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getExpression(),
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        return expressionBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder> coordinatesBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public boolean hasCoordinates() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates() {
        if (coordinatesBuilder_ == null) {
          return coordinates_;
        } else {
          return coordinatesBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public Builder setCoordinates(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates value) {
        if (coordinatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          coordinates_ = value;
          onChanged();
        } else {
          coordinatesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public Builder setCoordinates(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder builderForValue) {
        if (coordinatesBuilder_ == null) {
          coordinates_ = builderForValue.build();
          onChanged();
        } else {
          coordinatesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public Builder mergeCoordinates(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates value) {
        if (coordinatesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              coordinates_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance()) {
            coordinates_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.newBuilder(coordinates_).mergeFrom(value).buildPartial();
          } else {
            coordinates_ = value;
          }
          onChanged();
        } else {
          coordinatesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public Builder clearCoordinates() {
        if (coordinatesBuilder_ == null) {
          coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
          onChanged();
        } else {
          coordinatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder getCoordinatesBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getCoordinatesFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder() {
        if (coordinatesBuilder_ != null) {
          return coordinatesBuilder_.getMessageOrBuilder();
        } else {
          return coordinates_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder> 
          getCoordinatesFieldBuilder() {
        if (coordinatesBuilder_ == null) {
          coordinatesBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder>(
                  getCoordinates(),
                  getParentForChildren(),
                  isClean());
          coordinates_ = null;
        }
        return coordinatesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement)
    }

    static {
      defaultInstance = new IrSpreadElement(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement)
  }

  public interface IrStringConcatOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    int getArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
        getArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getArgumentOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat}
   */
  public static final class IrStringConcat extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat)
      IrStringConcatOrBuilder {
    // Use IrStringConcat.newBuilder() to construct.
    private IrStringConcat(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrStringConcat(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrStringConcat defaultInstance;
    public static IrStringConcat getDefaultInstance() {
      return defaultInstance;
    }

    public IrStringConcat getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrStringConcat(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                argument_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression>();
                mutable_bitField0_ |= 0x00000001;
              }
              argument_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          argument_ = java.util.Collections.unmodifiableList(argument_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStringConcat_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStringConcat_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrStringConcat> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrStringConcat>() {
      public IrStringConcat parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrStringConcat(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrStringConcat> getParserForType() {
      return PARSER;
    }

    public static final int ARGUMENT_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }

    private void initFields() {
      argument_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getArgumentCount(); i++) {
        if (!getArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < argument_.size(); i++) {
        output.writeMessage(1, argument_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < argument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, argument_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcatOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStringConcat_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStringConcat_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getArgumentFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStringConcat_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat(this);
        int from_bitField0_ = bitField0_;
        if (argumentBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            argument_ = java.util.Collections.unmodifiableList(argument_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.getDefaultInstance()) return this;
        if (argumentBuilder_ == null) {
          if (!other.argument_.isEmpty()) {
            if (argument_.isEmpty()) {
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgumentIsMutable();
              argument_.addAll(other.argument_);
            }
            onChanged();
          }
        } else {
          if (!other.argument_.isEmpty()) {
            if (argumentBuilder_.isEmpty()) {
              argumentBuilder_.dispose();
              argumentBuilder_ = null;
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArgumentFieldBuilder() : null;
            } else {
              argumentBuilder_.addAllMessages(other.argument_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getArgumentCount(); i++) {
          if (!getArgument(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression> argument_ =
        java.util.Collections.emptyList();
      private void ensureArgumentIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          argument_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression>(argument_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> argumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression> getArgumentList() {
        if (argumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(argument_);
        } else {
          return argumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public int getArgumentCount() {
        if (argumentBuilder_ == null) {
          return argument_.size();
        } else {
          return argumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getArgument(int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);
        } else {
          return argumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.set(index, value);
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(index, value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression> values) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, argument_);
          onChanged();
        } else {
          argumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public Builder removeArgument(int index) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.remove(index);
          onChanged();
        } else {
          argumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getArgumentOrBuilder(
          int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);  } else {
          return argumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
           getArgumentOrBuilderList() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(argument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder addArgumentBuilder() {
        return getArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder addArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder> 
           getArgumentBuilderList() {
        return getArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  argument_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat)
    }

    static {
      defaultInstance = new IrStringConcat(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat)
  }

  public interface IrThrowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
     */
    boolean hasValue();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow}
   */
  public static final class IrThrow extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow)
      IrThrowOrBuilder {
    // Use IrThrow.newBuilder() to construct.
    private IrThrow(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrThrow(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrThrow defaultInstance;
    public static IrThrow getDefaultInstance() {
      return defaultInstance;
    }

    public IrThrow getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrThrow(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = value_.toBuilder();
              }
              value_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(value_);
                value_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrThrow_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrThrow_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrThrow> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrThrow>() {
      public IrThrow parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrThrow(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrThrow> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VALUE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue() {
      return value_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder() {
      return value_;
    }

    private void initFields() {
      value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getValue().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrowOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrThrow_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrThrow_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getValueFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (valueBuilder_ == null) {
          value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrThrow_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (valueBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = valueBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.getDefaultInstance()) return this;
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasValue()) {
          
          return false;
        }
        if (!getValue().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> valueBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getValue() {
        if (valueBuilder_ == null) {
          return value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
       */
      public Builder setValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
       */
      public Builder setValue(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
       */
      public Builder mergeValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              value_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            value_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(value_).mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          valueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
       */
      public Builder clearValue() {
        if (valueBuilder_ == null) {
          value_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getValueBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression value = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow)
    }

    static {
      defaultInstance = new IrThrow(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow)
  }

  public interface IrTryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
     */
    boolean hasResult();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getResult();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getResultOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> 
        getCatchList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getCatch(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
     */
    int getCatchCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
        getCatchOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getCatchOrBuilder(
        int index);

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
     */
    boolean hasFinally();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getFinally();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getFinallyOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry}
   */
  public static final class IrTry extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry)
      IrTryOrBuilder {
    // Use IrTry.newBuilder() to construct.
    private IrTry(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrTry(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrTry defaultInstance;
    public static IrTry getDefaultInstance() {
      return defaultInstance;
    }

    public IrTry getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrTry(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = result_.toBuilder();
              }
              result_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(result_);
                result_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                catch_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement>();
                mutable_bitField0_ |= 0x00000002;
              }
              catch_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = finally_.toBuilder();
              }
              finally_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(finally_);
                finally_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          catch_ = java.util.Collections.unmodifiableList(catch_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTry_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrTry> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrTry>() {
      public IrTry parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrTry(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrTry> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int RESULT_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression result_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getResult() {
      return result_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getResultOrBuilder() {
      return result_;
    }

    public static final int CATCH_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> catch_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> getCatchList() {
      return catch_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
        getCatchOrBuilderList() {
      return catch_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
     */
    public int getCatchCount() {
      return catch_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getCatch(int index) {
      return catch_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getCatchOrBuilder(
        int index) {
      return catch_.get(index);
    }

    public static final int FINALLY_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression finally_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
     */
    public boolean hasFinally() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getFinally() {
      return finally_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getFinallyOrBuilder() {
      return finally_;
    }

    private void initFields() {
      result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      catch_ = java.util.Collections.emptyList();
      finally_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getResult().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getCatchCount(); i++) {
        if (!getCatch(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasFinally()) {
        if (!getFinally().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, result_);
      }
      for (int i = 0; i < catch_.size(); i++) {
        output.writeMessage(2, catch_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, finally_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, result_);
      }
      for (int i = 0; i < catch_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, catch_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, finally_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTry_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getResultFieldBuilder();
          getCatchFieldBuilder();
          getFinallyFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (resultBuilder_ == null) {
          result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          resultBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (catchBuilder_ == null) {
          catch_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          catchBuilder_.clear();
        }
        if (finallyBuilder_ == null) {
          finally_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          finallyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTry_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (resultBuilder_ == null) {
          result.result_ = result_;
        } else {
          result.result_ = resultBuilder_.build();
        }
        if (catchBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            catch_ = java.util.Collections.unmodifiableList(catch_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.catch_ = catch_;
        } else {
          result.catch_ = catchBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        if (finallyBuilder_ == null) {
          result.finally_ = finally_;
        } else {
          result.finally_ = finallyBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.getDefaultInstance()) return this;
        if (other.hasResult()) {
          mergeResult(other.getResult());
        }
        if (catchBuilder_ == null) {
          if (!other.catch_.isEmpty()) {
            if (catch_.isEmpty()) {
              catch_ = other.catch_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCatchIsMutable();
              catch_.addAll(other.catch_);
            }
            onChanged();
          }
        } else {
          if (!other.catch_.isEmpty()) {
            if (catchBuilder_.isEmpty()) {
              catchBuilder_.dispose();
              catchBuilder_ = null;
              catch_ = other.catch_;
              bitField0_ = (bitField0_ & ~0x00000002);
              catchBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCatchFieldBuilder() : null;
            } else {
              catchBuilder_.addAllMessages(other.catch_);
            }
          }
        }
        if (other.hasFinally()) {
          mergeFinally(other.getFinally());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        if (!getResult().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getCatchCount(); i++) {
          if (!getCatch(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasFinally()) {
          if (!getFinally().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> resultBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getResult() {
        if (resultBuilder_ == null) {
          return result_;
        } else {
          return resultBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
       */
      public Builder setResult(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (resultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          result_ = value;
          onChanged();
        } else {
          resultBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
       */
      public Builder setResult(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (resultBuilder_ == null) {
          result_ = builderForValue.build();
          onChanged();
        } else {
          resultBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
       */
      public Builder mergeResult(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (resultBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              result_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            result_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(result_).mergeFrom(value).buildPartial();
          } else {
            result_ = value;
          }
          onChanged();
        } else {
          resultBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
       */
      public Builder clearResult() {
        if (resultBuilder_ == null) {
          result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          resultBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getResultBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getResultFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getResultOrBuilder() {
        if (resultBuilder_ != null) {
          return resultBuilder_.getMessageOrBuilder();
        } else {
          return result_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getResultFieldBuilder() {
        if (resultBuilder_ == null) {
          resultBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getResult(),
                  getParentForChildren(),
                  isClean());
          result_ = null;
        }
        return resultBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> catch_ =
        java.util.Collections.emptyList();
      private void ensureCatchIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          catch_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement>(catch_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> catchBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> getCatchList() {
        if (catchBuilder_ == null) {
          return java.util.Collections.unmodifiableList(catch_);
        } else {
          return catchBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public int getCatchCount() {
        if (catchBuilder_ == null) {
          return catch_.size();
        } else {
          return catchBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getCatch(int index) {
        if (catchBuilder_ == null) {
          return catch_.get(index);
        } else {
          return catchBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public Builder setCatch(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (catchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCatchIsMutable();
          catch_.set(index, value);
          onChanged();
        } else {
          catchBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public Builder setCatch(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (catchBuilder_ == null) {
          ensureCatchIsMutable();
          catch_.set(index, builderForValue.build());
          onChanged();
        } else {
          catchBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public Builder addCatch(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (catchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCatchIsMutable();
          catch_.add(value);
          onChanged();
        } else {
          catchBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public Builder addCatch(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (catchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCatchIsMutable();
          catch_.add(index, value);
          onChanged();
        } else {
          catchBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public Builder addCatch(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (catchBuilder_ == null) {
          ensureCatchIsMutable();
          catch_.add(builderForValue.build());
          onChanged();
        } else {
          catchBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public Builder addCatch(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (catchBuilder_ == null) {
          ensureCatchIsMutable();
          catch_.add(index, builderForValue.build());
          onChanged();
        } else {
          catchBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public Builder addAllCatch(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> values) {
        if (catchBuilder_ == null) {
          ensureCatchIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, catch_);
          onChanged();
        } else {
          catchBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public Builder clearCatch() {
        if (catchBuilder_ == null) {
          catch_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          catchBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public Builder removeCatch(int index) {
        if (catchBuilder_ == null) {
          ensureCatchIsMutable();
          catch_.remove(index);
          onChanged();
        } else {
          catchBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder getCatchBuilder(
          int index) {
        return getCatchFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getCatchOrBuilder(
          int index) {
        if (catchBuilder_ == null) {
          return catch_.get(index);  } else {
          return catchBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
           getCatchOrBuilderList() {
        if (catchBuilder_ != null) {
          return catchBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(catch_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder addCatchBuilder() {
        return getCatchFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder addCatchBuilder(
          int index) {
        return getCatchFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement catch = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder> 
           getCatchBuilderList() {
        return getCatchFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
          getCatchFieldBuilder() {
        if (catchBuilder_ == null) {
          catchBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder>(
                  catch_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          catch_ = null;
        }
        return catchBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression finally_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> finallyBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
       */
      public boolean hasFinally() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getFinally() {
        if (finallyBuilder_ == null) {
          return finally_;
        } else {
          return finallyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
       */
      public Builder setFinally(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (finallyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          finally_ = value;
          onChanged();
        } else {
          finallyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
       */
      public Builder setFinally(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (finallyBuilder_ == null) {
          finally_ = builderForValue.build();
          onChanged();
        } else {
          finallyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
       */
      public Builder mergeFinally(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (finallyBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              finally_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            finally_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(finally_).mergeFrom(value).buildPartial();
          } else {
            finally_ = value;
          }
          onChanged();
        } else {
          finallyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
       */
      public Builder clearFinally() {
        if (finallyBuilder_ == null) {
          finally_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          finallyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getFinallyBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFinallyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getFinallyOrBuilder() {
        if (finallyBuilder_ != null) {
          return finallyBuilder_.getMessageOrBuilder();
        } else {
          return finally_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression finally = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getFinallyFieldBuilder() {
        if (finallyBuilder_ == null) {
          finallyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getFinally(),
                  getParentForChildren(),
                  isClean());
          finally_ = null;
        }
        return finallyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry)
    }

    static {
      defaultInstance = new IrTry(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry)
  }

  public interface IrTypeOpOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOperator operator = 1;</code>
     */
    boolean hasOperator();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOperator operator = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator getOperator();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
     */
    boolean hasOperand();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getOperand();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getOperandOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
     */
    boolean hasArgument();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getArgument();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getArgumentOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp}
   */
  public static final class IrTypeOp extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp)
      IrTypeOpOrBuilder {
    // Use IrTypeOp.newBuilder() to construct.
    private IrTypeOp(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrTypeOp(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrTypeOp defaultInstance;
    public static IrTypeOp getDefaultInstance() {
      return defaultInstance;
    }

    public IrTypeOp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrTypeOp(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator value = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                operator_ = value;
              }
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = operand_.toBuilder();
              }
              operand_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(operand_);
                operand_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = argument_.toBuilder();
              }
              argument_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(argument_);
                argument_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeOp_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeOp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrTypeOp> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrTypeOp>() {
      public IrTypeOp parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrTypeOp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrTypeOp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int OPERATOR_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator operator_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOperator operator = 1;</code>
     */
    public boolean hasOperator() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOperator operator = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator getOperator() {
      return operator_;
    }

    public static final int OPERAND_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex operand_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
     */
    public boolean hasOperand() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getOperand() {
      return operand_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getOperandOrBuilder() {
      return operand_;
    }

    public static final int ARGUMENT_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression argument_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
     */
    public boolean hasArgument() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getArgument() {
      return argument_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getArgumentOrBuilder() {
      return argument_;
    }

    private void initFields() {
      operator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator.CAST;
      operand_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      argument_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasOperator()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOperand()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasArgument()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getOperand().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getArgument().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, operator_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, operand_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, argument_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(1, operator_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, operand_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, argument_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOpOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeOp_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeOp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOperandFieldBuilder();
          getArgumentFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        operator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator.CAST;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (operandBuilder_ == null) {
          operand_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
        } else {
          operandBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (argumentBuilder_ == null) {
          argument_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          argumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeOp_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.operator_ = operator_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (operandBuilder_ == null) {
          result.operand_ = operand_;
        } else {
          result.operand_ = operandBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (argumentBuilder_ == null) {
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.getDefaultInstance()) return this;
        if (other.hasOperator()) {
          setOperator(other.getOperator());
        }
        if (other.hasOperand()) {
          mergeOperand(other.getOperand());
        }
        if (other.hasArgument()) {
          mergeArgument(other.getArgument());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasOperator()) {
          
          return false;
        }
        if (!hasOperand()) {
          
          return false;
        }
        if (!hasArgument()) {
          
          return false;
        }
        if (!getOperand().isInitialized()) {
          
          return false;
        }
        if (!getArgument().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator operator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator.CAST;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOperator operator = 1;</code>
       */
      public boolean hasOperator() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOperator operator = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator getOperator() {
        return operator_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOperator operator = 1;</code>
       */
      public Builder setOperator(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        operator_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOperator operator = 1;</code>
       */
      public Builder clearOperator() {
        bitField0_ = (bitField0_ & ~0x00000001);
        operator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOperator.CAST;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex operand_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> operandBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
       */
      public boolean hasOperand() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getOperand() {
        if (operandBuilder_ == null) {
          return operand_;
        } else {
          return operandBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
       */
      public Builder setOperand(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (operandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operand_ = value;
          onChanged();
        } else {
          operandBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
       */
      public Builder setOperand(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (operandBuilder_ == null) {
          operand_ = builderForValue.build();
          onChanged();
        } else {
          operandBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
       */
      public Builder mergeOperand(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (operandBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              operand_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) {
            operand_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder(operand_).mergeFrom(value).buildPartial();
          } else {
            operand_ = value;
          }
          onChanged();
        } else {
          operandBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
       */
      public Builder clearOperand() {
        if (operandBuilder_ == null) {
          operand_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
          onChanged();
        } else {
          operandBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getOperandBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getOperandFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getOperandOrBuilder() {
        if (operandBuilder_ != null) {
          return operandBuilder_.getMessageOrBuilder();
        } else {
          return operand_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex operand = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getOperandFieldBuilder() {
        if (operandBuilder_ == null) {
          operandBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  getOperand(),
                  getParentForChildren(),
                  isClean());
          operand_ = null;
        }
        return operandBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression argument_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> argumentBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
       */
      public boolean hasArgument() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getArgument() {
        if (argumentBuilder_ == null) {
          return argument_;
        } else {
          return argumentBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
       */
      public Builder setArgument(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          argument_ = value;
          onChanged();
        } else {
          argumentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
       */
      public Builder setArgument(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          argument_ = builderForValue.build();
          onChanged();
        } else {
          argumentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
       */
      public Builder mergeArgument(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (argumentBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              argument_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            argument_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(argument_).mergeFrom(value).buildPartial();
          } else {
            argument_ = value;
          }
          onChanged();
        } else {
          argumentBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          argumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getArgumentBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getArgumentFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getArgumentOrBuilder() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilder();
        } else {
          return argument_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression argument = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getArgument(),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp)
    }

    static {
      defaultInstance = new IrTypeOp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp)
  }

  public interface IrVarargOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
     */
    boolean hasElementType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getElementType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getElementTypeOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement> 
        getElementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement getElement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
     */
    int getElementCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElementOrBuilder> 
        getElementOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElementOrBuilder getElementOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg}
   */
  public static final class IrVararg extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg)
      IrVarargOrBuilder {
    // Use IrVararg.newBuilder() to construct.
    private IrVararg(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrVararg(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrVararg defaultInstance;
    public static IrVararg getDefaultInstance() {
      return defaultInstance;
    }

    public IrVararg getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrVararg(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = elementType_.toBuilder();
              }
              elementType_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(elementType_);
                elementType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                element_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement>();
                mutable_bitField0_ |= 0x00000002;
              }
              element_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          element_ = java.util.Collections.unmodifiableList(element_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVararg_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVararg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrVararg> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrVararg>() {
      public IrVararg parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrVararg(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrVararg> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ELEMENT_TYPE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex elementType_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
     */
    public boolean hasElementType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getElementType() {
      return elementType_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getElementTypeOrBuilder() {
      return elementType_;
    }

    public static final int ELEMENT_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement> element_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement> getElementList() {
      return element_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElementOrBuilder> 
        getElementOrBuilderList() {
      return element_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
     */
    public int getElementCount() {
      return element_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement getElement(int index) {
      return element_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElementOrBuilder getElementOrBuilder(
        int index) {
      return element_.get(index);
    }

    private void initFields() {
      elementType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      element_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasElementType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getElementType().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getElementCount(); i++) {
        if (!getElement(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, elementType_);
      }
      for (int i = 0; i < element_.size(); i++) {
        output.writeMessage(2, element_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, elementType_);
      }
      for (int i = 0; i < element_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, element_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVararg_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVararg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getElementTypeFieldBuilder();
          getElementFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (elementTypeBuilder_ == null) {
          elementType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
        } else {
          elementTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (elementBuilder_ == null) {
          element_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          elementBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVararg_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (elementTypeBuilder_ == null) {
          result.elementType_ = elementType_;
        } else {
          result.elementType_ = elementTypeBuilder_.build();
        }
        if (elementBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            element_ = java.util.Collections.unmodifiableList(element_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.element_ = element_;
        } else {
          result.element_ = elementBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.getDefaultInstance()) return this;
        if (other.hasElementType()) {
          mergeElementType(other.getElementType());
        }
        if (elementBuilder_ == null) {
          if (!other.element_.isEmpty()) {
            if (element_.isEmpty()) {
              element_ = other.element_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureElementIsMutable();
              element_.addAll(other.element_);
            }
            onChanged();
          }
        } else {
          if (!other.element_.isEmpty()) {
            if (elementBuilder_.isEmpty()) {
              elementBuilder_.dispose();
              elementBuilder_ = null;
              element_ = other.element_;
              bitField0_ = (bitField0_ & ~0x00000002);
              elementBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getElementFieldBuilder() : null;
            } else {
              elementBuilder_.addAllMessages(other.element_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasElementType()) {
          
          return false;
        }
        if (!getElementType().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getElementCount(); i++) {
          if (!getElement(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex elementType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> elementTypeBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
       */
      public boolean hasElementType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getElementType() {
        if (elementTypeBuilder_ == null) {
          return elementType_;
        } else {
          return elementTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
       */
      public Builder setElementType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (elementTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          elementType_ = value;
          onChanged();
        } else {
          elementTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
       */
      public Builder setElementType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (elementTypeBuilder_ == null) {
          elementType_ = builderForValue.build();
          onChanged();
        } else {
          elementTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
       */
      public Builder mergeElementType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (elementTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              elementType_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) {
            elementType_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder(elementType_).mergeFrom(value).buildPartial();
          } else {
            elementType_ = value;
          }
          onChanged();
        } else {
          elementTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
       */
      public Builder clearElementType() {
        if (elementTypeBuilder_ == null) {
          elementType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
          onChanged();
        } else {
          elementTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getElementTypeBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getElementTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getElementTypeOrBuilder() {
        if (elementTypeBuilder_ != null) {
          return elementTypeBuilder_.getMessageOrBuilder();
        } else {
          return elementType_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex element_type = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getElementTypeFieldBuilder() {
        if (elementTypeBuilder_ == null) {
          elementTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  getElementType(),
                  getParentForChildren(),
                  isClean());
          elementType_ = null;
        }
        return elementTypeBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement> element_ =
        java.util.Collections.emptyList();
      private void ensureElementIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          element_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement>(element_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElementOrBuilder> elementBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement> getElementList() {
        if (elementBuilder_ == null) {
          return java.util.Collections.unmodifiableList(element_);
        } else {
          return elementBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public int getElementCount() {
        if (elementBuilder_ == null) {
          return element_.size();
        } else {
          return elementBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement getElement(int index) {
        if (elementBuilder_ == null) {
          return element_.get(index);
        } else {
          return elementBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public Builder setElement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement value) {
        if (elementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureElementIsMutable();
          element_.set(index, value);
          onChanged();
        } else {
          elementBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public Builder setElement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder builderForValue) {
        if (elementBuilder_ == null) {
          ensureElementIsMutable();
          element_.set(index, builderForValue.build());
          onChanged();
        } else {
          elementBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public Builder addElement(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement value) {
        if (elementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureElementIsMutable();
          element_.add(value);
          onChanged();
        } else {
          elementBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public Builder addElement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement value) {
        if (elementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureElementIsMutable();
          element_.add(index, value);
          onChanged();
        } else {
          elementBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public Builder addElement(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder builderForValue) {
        if (elementBuilder_ == null) {
          ensureElementIsMutable();
          element_.add(builderForValue.build());
          onChanged();
        } else {
          elementBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public Builder addElement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder builderForValue) {
        if (elementBuilder_ == null) {
          ensureElementIsMutable();
          element_.add(index, builderForValue.build());
          onChanged();
        } else {
          elementBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public Builder addAllElement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement> values) {
        if (elementBuilder_ == null) {
          ensureElementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, element_);
          onChanged();
        } else {
          elementBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public Builder clearElement() {
        if (elementBuilder_ == null) {
          element_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          elementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public Builder removeElement(int index) {
        if (elementBuilder_ == null) {
          ensureElementIsMutable();
          element_.remove(index);
          onChanged();
        } else {
          elementBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder getElementBuilder(
          int index) {
        return getElementFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElementOrBuilder getElementOrBuilder(
          int index) {
        if (elementBuilder_ == null) {
          return element_.get(index);  } else {
          return elementBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElementOrBuilder> 
           getElementOrBuilderList() {
        if (elementBuilder_ != null) {
          return elementBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(element_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder addElementBuilder() {
        return getElementFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder addElementBuilder(
          int index) {
        return getElementFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement element = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder> 
           getElementBuilderList() {
        return getElementFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElementOrBuilder> 
          getElementFieldBuilder() {
        if (elementBuilder_ == null) {
          elementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElementOrBuilder>(
                  element_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          element_ = null;
        }
        return elementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg)
    }

    static {
      defaultInstance = new IrVararg(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg)
  }

  public interface IrVarargElementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    boolean hasExpression();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
     */
    boolean hasSpreadElement();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement getSpreadElement();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElementOrBuilder getSpreadElementOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement}
   */
  public static final class IrVarargElement extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement)
      IrVarargElementOrBuilder {
    // Use IrVarargElement.newBuilder() to construct.
    private IrVarargElement(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrVarargElement(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrVarargElement defaultInstance;
    public static IrVarargElement getDefaultInstance() {
      return defaultInstance;
    }

    public IrVarargElement getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrVarargElement(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (varargElementCase_ == 1) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) varargElement_).toBuilder();
              }
              varargElement_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) varargElement_);
                varargElement_ = subBuilder.buildPartial();
              }
              varargElementCase_ = 1;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.Builder subBuilder = null;
              if (varargElementCase_ == 2) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) varargElement_).toBuilder();
              }
              varargElement_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) varargElement_);
                varargElement_ = subBuilder.buildPartial();
              }
              varargElementCase_ = 2;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVarargElement_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVarargElement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrVarargElement> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrVarargElement>() {
      public IrVarargElement parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrVarargElement(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrVarargElement> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int varargElementCase_ = 0;
    private java.lang.Object varargElement_;
    public enum VarargElementCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      EXPRESSION(1),
      SPREAD_ELEMENT(2),
      VARARGELEMENT_NOT_SET(0);
      private int value = 0;
      private VarargElementCase(int value) {
        this.value = value;
      }
      public static VarargElementCase valueOf(int value) {
        switch (value) {
          case 1: return EXPRESSION;
          case 2: return SPREAD_ELEMENT;
          case 0: return VARARGELEMENT_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public VarargElementCase
    getVarargElementCase() {
      return VarargElementCase.valueOf(
          varargElementCase_);
    }

    public static final int EXPRESSION_FIELD_NUMBER = 1;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    public boolean hasExpression() {
      return varargElementCase_ == 1;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression() {
      if (varargElementCase_ == 1) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) varargElement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder() {
      if (varargElementCase_ == 1) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) varargElement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }

    public static final int SPREAD_ELEMENT_FIELD_NUMBER = 2;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
     */
    public boolean hasSpreadElement() {
      return varargElementCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement getSpreadElement() {
      if (varargElementCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) varargElement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElementOrBuilder getSpreadElementOrBuilder() {
      if (varargElementCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) varargElement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.getDefaultInstance();
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSpreadElement()) {
        if (!getSpreadElement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (varargElementCase_ == 1) {
        output.writeMessage(1, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) varargElement_);
      }
      if (varargElementCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) varargElement_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (varargElementCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) varargElement_);
      }
      if (varargElementCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) varargElement_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElementOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVarargElement_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVarargElement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        varargElementCase_ = 0;
        varargElement_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVarargElement_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (varargElementCase_ == 1) {
          if (expressionBuilder_ == null) {
            result.varargElement_ = varargElement_;
          } else {
            result.varargElement_ = expressionBuilder_.build();
          }
        }
        if (varargElementCase_ == 2) {
          if (spreadElementBuilder_ == null) {
            result.varargElement_ = varargElement_;
          } else {
            result.varargElement_ = spreadElementBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.varargElementCase_ = varargElementCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement.getDefaultInstance()) return this;
        switch (other.getVarargElementCase()) {
          case EXPRESSION: {
            mergeExpression(other.getExpression());
            break;
          }
          case SPREAD_ELEMENT: {
            mergeSpreadElement(other.getSpreadElement());
            break;
          }
          case VARARGELEMENT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasExpression()) {
          if (!getExpression().isInitialized()) {
            
            return false;
          }
        }
        if (hasSpreadElement()) {
          if (!getSpreadElement().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargElement) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int varargElementCase_ = 0;
      private java.lang.Object varargElement_;
      public VarargElementCase
          getVarargElementCase() {
        return VarargElementCase.valueOf(
            varargElementCase_);
      }

      public Builder clearVarargElement() {
        varargElementCase_ = 0;
        varargElement_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public boolean hasExpression() {
        return varargElementCase_ == 1;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression() {
        if (expressionBuilder_ == null) {
          if (varargElementCase_ == 1) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) varargElement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          if (varargElementCase_ == 1) {
            return expressionBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          varargElement_ = value;
          onChanged();
        } else {
          expressionBuilder_.setMessage(value);
        }
        varargElementCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          varargElement_ = builderForValue.build();
          onChanged();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        varargElementCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (expressionBuilder_ == null) {
          if (varargElementCase_ == 1 &&
              varargElement_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            varargElement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) varargElement_)
                .mergeFrom(value).buildPartial();
          } else {
            varargElement_ = value;
          }
          onChanged();
        } else {
          if (varargElementCase_ == 1) {
            expressionBuilder_.mergeFrom(value);
          }
          expressionBuilder_.setMessage(value);
        }
        varargElementCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder clearExpression() {
        if (expressionBuilder_ == null) {
          if (varargElementCase_ == 1) {
            varargElementCase_ = 0;
            varargElement_ = null;
            onChanged();
          }
        } else {
          if (varargElementCase_ == 1) {
            varargElementCase_ = 0;
            varargElement_ = null;
          }
          expressionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getExpressionBuilder() {
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder() {
        if ((varargElementCase_ == 1) && (expressionBuilder_ != null)) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          if (varargElementCase_ == 1) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) varargElement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          if (!(varargElementCase_ == 1)) {
            varargElement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          }
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) varargElement_,
                  getParentForChildren(),
                  isClean());
          varargElement_ = null;
        }
        varargElementCase_ = 1;
        return expressionBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElementOrBuilder> spreadElementBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
       */
      public boolean hasSpreadElement() {
        return varargElementCase_ == 2;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement getSpreadElement() {
        if (spreadElementBuilder_ == null) {
          if (varargElementCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) varargElement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.getDefaultInstance();
        } else {
          if (varargElementCase_ == 2) {
            return spreadElementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
       */
      public Builder setSpreadElement(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement value) {
        if (spreadElementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          varargElement_ = value;
          onChanged();
        } else {
          spreadElementBuilder_.setMessage(value);
        }
        varargElementCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
       */
      public Builder setSpreadElement(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.Builder builderForValue) {
        if (spreadElementBuilder_ == null) {
          varargElement_ = builderForValue.build();
          onChanged();
        } else {
          spreadElementBuilder_.setMessage(builderForValue.build());
        }
        varargElementCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
       */
      public Builder mergeSpreadElement(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement value) {
        if (spreadElementBuilder_ == null) {
          if (varargElementCase_ == 2 &&
              varargElement_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.getDefaultInstance()) {
            varargElement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) varargElement_)
                .mergeFrom(value).buildPartial();
          } else {
            varargElement_ = value;
          }
          onChanged();
        } else {
          if (varargElementCase_ == 2) {
            spreadElementBuilder_.mergeFrom(value);
          }
          spreadElementBuilder_.setMessage(value);
        }
        varargElementCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
       */
      public Builder clearSpreadElement() {
        if (spreadElementBuilder_ == null) {
          if (varargElementCase_ == 2) {
            varargElementCase_ = 0;
            varargElement_ = null;
            onChanged();
          }
        } else {
          if (varargElementCase_ == 2) {
            varargElementCase_ = 0;
            varargElement_ = null;
          }
          spreadElementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.Builder getSpreadElementBuilder() {
        return getSpreadElementFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElementOrBuilder getSpreadElementOrBuilder() {
        if ((varargElementCase_ == 2) && (spreadElementBuilder_ != null)) {
          return spreadElementBuilder_.getMessageOrBuilder();
        } else {
          if (varargElementCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) varargElement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSpreadElement spread_element = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElementOrBuilder> 
          getSpreadElementFieldBuilder() {
        if (spreadElementBuilder_ == null) {
          if (!(varargElementCase_ == 2)) {
            varargElement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.getDefaultInstance();
          }
          spreadElementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElementOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSpreadElement) varargElement_,
                  getParentForChildren(),
                  isClean());
          varargElement_ = null;
        }
        varargElementCase_ = 2;
        return spreadElementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement)
    }

    static {
      defaultInstance = new IrVarargElement(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVarargElement)
  }

  public interface IrWhenOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> 
        getBranchList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getBranch(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
     */
    int getBranchCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
        getBranchOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getBranchOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen}
   */
  public static final class IrWhen extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen)
      IrWhenOrBuilder {
    // Use IrWhen.newBuilder() to construct.
    private IrWhen(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrWhen(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrWhen defaultInstance;
    public static IrWhen getDefaultInstance() {
      return defaultInstance;
    }

    public IrWhen getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrWhen(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                branch_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement>();
                mutable_bitField0_ |= 0x00000001;
              }
              branch_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          branch_ = java.util.Collections.unmodifiableList(branch_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhen_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhen_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrWhen> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrWhen>() {
      public IrWhen parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrWhen(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrWhen> getParserForType() {
      return PARSER;
    }

    public static final int BRANCH_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> branch_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> getBranchList() {
      return branch_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
        getBranchOrBuilderList() {
      return branch_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
     */
    public int getBranchCount() {
      return branch_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getBranch(int index) {
      return branch_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getBranchOrBuilder(
        int index) {
      return branch_.get(index);
    }

    private void initFields() {
      branch_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getBranchCount(); i++) {
        if (!getBranch(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < branch_.size(); i++) {
        output.writeMessage(1, branch_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < branch_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, branch_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhenOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhen_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhen_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getBranchFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (branchBuilder_ == null) {
          branch_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          branchBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhen_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen(this);
        int from_bitField0_ = bitField0_;
        if (branchBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            branch_ = java.util.Collections.unmodifiableList(branch_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.branch_ = branch_;
        } else {
          result.branch_ = branchBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.getDefaultInstance()) return this;
        if (branchBuilder_ == null) {
          if (!other.branch_.isEmpty()) {
            if (branch_.isEmpty()) {
              branch_ = other.branch_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureBranchIsMutable();
              branch_.addAll(other.branch_);
            }
            onChanged();
          }
        } else {
          if (!other.branch_.isEmpty()) {
            if (branchBuilder_.isEmpty()) {
              branchBuilder_.dispose();
              branchBuilder_ = null;
              branch_ = other.branch_;
              bitField0_ = (bitField0_ & ~0x00000001);
              branchBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBranchFieldBuilder() : null;
            } else {
              branchBuilder_.addAllMessages(other.branch_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getBranchCount(); i++) {
          if (!getBranch(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> branch_ =
        java.util.Collections.emptyList();
      private void ensureBranchIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          branch_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement>(branch_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> branchBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> getBranchList() {
        if (branchBuilder_ == null) {
          return java.util.Collections.unmodifiableList(branch_);
        } else {
          return branchBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public int getBranchCount() {
        if (branchBuilder_ == null) {
          return branch_.size();
        } else {
          return branchBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getBranch(int index) {
        if (branchBuilder_ == null) {
          return branch_.get(index);
        } else {
          return branchBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public Builder setBranch(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (branchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBranchIsMutable();
          branch_.set(index, value);
          onChanged();
        } else {
          branchBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public Builder setBranch(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (branchBuilder_ == null) {
          ensureBranchIsMutable();
          branch_.set(index, builderForValue.build());
          onChanged();
        } else {
          branchBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public Builder addBranch(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (branchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBranchIsMutable();
          branch_.add(value);
          onChanged();
        } else {
          branchBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public Builder addBranch(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (branchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBranchIsMutable();
          branch_.add(index, value);
          onChanged();
        } else {
          branchBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public Builder addBranch(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (branchBuilder_ == null) {
          ensureBranchIsMutable();
          branch_.add(builderForValue.build());
          onChanged();
        } else {
          branchBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public Builder addBranch(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (branchBuilder_ == null) {
          ensureBranchIsMutable();
          branch_.add(index, builderForValue.build());
          onChanged();
        } else {
          branchBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public Builder addAllBranch(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> values) {
        if (branchBuilder_ == null) {
          ensureBranchIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, branch_);
          onChanged();
        } else {
          branchBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public Builder clearBranch() {
        if (branchBuilder_ == null) {
          branch_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          branchBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public Builder removeBranch(int index) {
        if (branchBuilder_ == null) {
          ensureBranchIsMutable();
          branch_.remove(index);
          onChanged();
        } else {
          branchBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder getBranchBuilder(
          int index) {
        return getBranchFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getBranchOrBuilder(
          int index) {
        if (branchBuilder_ == null) {
          return branch_.get(index);  } else {
          return branchBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
           getBranchOrBuilderList() {
        if (branchBuilder_ != null) {
          return branchBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(branch_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder addBranchBuilder() {
        return getBranchFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder addBranchBuilder(
          int index) {
        return getBranchFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement branch = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder> 
           getBranchBuilderList() {
        return getBranchFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
          getBranchFieldBuilder() {
        if (branchBuilder_ == null) {
          branchBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder>(
                  branch_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          branch_ = null;
        }
        return branchBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen)
    }

    static {
      defaultInstance = new IrWhen(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen)
  }

  public interface IrWhileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    boolean hasLoop();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop getLoop();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder getLoopOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile}
   */
  public static final class IrWhile extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile)
      IrWhileOrBuilder {
    // Use IrWhile.newBuilder() to construct.
    private IrWhile(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrWhile(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrWhile defaultInstance;
    public static IrWhile getDefaultInstance() {
      return defaultInstance;
    }

    public IrWhile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrWhile(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = loop_.toBuilder();
              }
              loop_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(loop_);
                loop_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhile_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrWhile> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrWhile>() {
      public IrWhile parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrWhile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrWhile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LOOP_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop loop_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    public boolean hasLoop() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop getLoop() {
      return loop_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder getLoopOrBuilder() {
      return loop_;
    }

    private void initFields() {
      loop_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasLoop()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getLoop().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, loop_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, loop_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhileOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhile_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLoopFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (loopBuilder_ == null) {
          loop_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance();
        } else {
          loopBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhile_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (loopBuilder_ == null) {
          result.loop_ = loop_;
        } else {
          result.loop_ = loopBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.getDefaultInstance()) return this;
        if (other.hasLoop()) {
          mergeLoop(other.getLoop());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLoop()) {
          
          return false;
        }
        if (!getLoop().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop loop_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder> loopBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public boolean hasLoop() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop getLoop() {
        if (loopBuilder_ == null) {
          return loop_;
        } else {
          return loopBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public Builder setLoop(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop value) {
        if (loopBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          loop_ = value;
          onChanged();
        } else {
          loopBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public Builder setLoop(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder builderForValue) {
        if (loopBuilder_ == null) {
          loop_ = builderForValue.build();
          onChanged();
        } else {
          loopBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public Builder mergeLoop(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop value) {
        if (loopBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              loop_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance()) {
            loop_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.newBuilder(loop_).mergeFrom(value).buildPartial();
          } else {
            loop_ = value;
          }
          onChanged();
        } else {
          loopBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public Builder clearLoop() {
        if (loopBuilder_ == null) {
          loop_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.getDefaultInstance();
          onChanged();
        } else {
          loopBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder getLoopBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLoopFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder getLoopOrBuilder() {
        if (loopBuilder_ != null) {
          return loopBuilder_.getMessageOrBuilder();
        } else {
          return loop_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Loop loop = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder> 
          getLoopFieldBuilder() {
        if (loopBuilder_ == null) {
          loopBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Loop.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.LoopOrBuilder>(
                  getLoop(),
                  getParentForChildren(),
                  isClean());
          loop_ = null;
        }
        return loopBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile)
    }

    static {
      defaultInstance = new IrWhile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile)
  }

  public interface IrOperationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
     */
    boolean hasBlock();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock getBlock();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockOrBuilder getBlockOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
     */
    boolean hasBreak();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak getBreak();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreakOrBuilder getBreakOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
     */
    boolean hasCall();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall getCall();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder getCallOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
     */
    boolean hasClassReference();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference getClassReference();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReferenceOrBuilder getClassReferenceOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
     */
    boolean hasComposite();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite getComposite();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCompositeOrBuilder getCompositeOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
     */
    boolean hasConst();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst getConst();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstOrBuilder getConstOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
     */
    boolean hasContinue();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue getContinue();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinueOrBuilder getContinueOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
     */
    boolean hasDelegatingConstructorCall();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall getDelegatingConstructorCall();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCallOrBuilder getDelegatingConstructorCallOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
     */
    boolean hasDoWhile();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile getDoWhile();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhileOrBuilder getDoWhileOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
     */
    boolean hasEnumConstructorCall();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall getEnumConstructorCall();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCallOrBuilder getEnumConstructorCallOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
     */
    boolean hasFunctionReference();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference getFunctionReference();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReferenceOrBuilder getFunctionReferenceOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
     */
    boolean hasGetClass();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass getGetClass();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClassOrBuilder getGetClassOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
     */
    boolean hasGetEnumValue();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue getGetEnumValue();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValueOrBuilder getGetEnumValueOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
     */
    boolean hasGetField();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField getGetField();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetFieldOrBuilder getGetFieldOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
     */
    boolean hasGetObject();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject getGetObject();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObjectOrBuilder getGetObjectOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
     */
    boolean hasGetValue();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue getGetValue();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValueOrBuilder getGetValueOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
     */
    boolean hasInstanceInitializerCall();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall getInstanceInitializerCall();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCallOrBuilder getInstanceInitializerCallOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
     */
    boolean hasPropertyReference();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference getPropertyReference();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReferenceOrBuilder getPropertyReferenceOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
     */
    boolean hasReturn();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn getReturn();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturnOrBuilder getReturnOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
     */
    boolean hasSetField();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField getSetField();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetFieldOrBuilder getSetFieldOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
     */
    boolean hasSetVariable();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable getSetVariable();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariableOrBuilder getSetVariableOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
     */
    boolean hasStringConcat();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat getStringConcat();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcatOrBuilder getStringConcatOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
     */
    boolean hasThrow();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow getThrow();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrowOrBuilder getThrowOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
     */
    boolean hasTry();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry getTry();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTryOrBuilder getTryOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
     */
    boolean hasTypeOp();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp getTypeOp();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOpOrBuilder getTypeOpOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
     */
    boolean hasVararg();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg getVararg();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargOrBuilder getVarargOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
     */
    boolean hasWhen();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen getWhen();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhenOrBuilder getWhenOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
     */
    boolean hasWhile();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile getWhile();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhileOrBuilder getWhileOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation}
   *
   * <pre>
   * TODO: we need an extension mechanism to accomodate new
   * IR operators in upcoming releases.
   * </pre>
   */
  public static final class IrOperation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation)
      IrOperationOrBuilder {
    // Use IrOperation.newBuilder() to construct.
    private IrOperation(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrOperation(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrOperation defaultInstance;
    public static IrOperation getDefaultInstance() {
      return defaultInstance;
    }

    public IrOperation getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrOperation(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.Builder subBuilder = null;
              if (operationCase_ == 1) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 1;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.Builder subBuilder = null;
              if (operationCase_ == 2) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 2;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder subBuilder = null;
              if (operationCase_ == 3) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 3;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.Builder subBuilder = null;
              if (operationCase_ == 4) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 4;
              break;
            }
            case 42: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.Builder subBuilder = null;
              if (operationCase_ == 5) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 5;
              break;
            }
            case 50: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.Builder subBuilder = null;
              if (operationCase_ == 6) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 6;
              break;
            }
            case 58: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.Builder subBuilder = null;
              if (operationCase_ == 7) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 7;
              break;
            }
            case 66: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.Builder subBuilder = null;
              if (operationCase_ == 8) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 8;
              break;
            }
            case 74: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.Builder subBuilder = null;
              if (operationCase_ == 9) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 9;
              break;
            }
            case 82: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.Builder subBuilder = null;
              if (operationCase_ == 10) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 10;
              break;
            }
            case 90: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.Builder subBuilder = null;
              if (operationCase_ == 11) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 11;
              break;
            }
            case 98: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.Builder subBuilder = null;
              if (operationCase_ == 12) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 12;
              break;
            }
            case 106: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.Builder subBuilder = null;
              if (operationCase_ == 13) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 13;
              break;
            }
            case 114: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.Builder subBuilder = null;
              if (operationCase_ == 14) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 14;
              break;
            }
            case 122: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.Builder subBuilder = null;
              if (operationCase_ == 15) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 15;
              break;
            }
            case 130: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.Builder subBuilder = null;
              if (operationCase_ == 16) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 16;
              break;
            }
            case 138: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.Builder subBuilder = null;
              if (operationCase_ == 17) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 17;
              break;
            }
            case 146: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.Builder subBuilder = null;
              if (operationCase_ == 18) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 18;
              break;
            }
            case 154: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.Builder subBuilder = null;
              if (operationCase_ == 19) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 19;
              break;
            }
            case 162: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.Builder subBuilder = null;
              if (operationCase_ == 20) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 20;
              break;
            }
            case 170: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.Builder subBuilder = null;
              if (operationCase_ == 21) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 21;
              break;
            }
            case 178: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.Builder subBuilder = null;
              if (operationCase_ == 22) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 22;
              break;
            }
            case 186: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.Builder subBuilder = null;
              if (operationCase_ == 23) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 23;
              break;
            }
            case 194: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.Builder subBuilder = null;
              if (operationCase_ == 24) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 24;
              break;
            }
            case 202: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.Builder subBuilder = null;
              if (operationCase_ == 25) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 25;
              break;
            }
            case 210: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.Builder subBuilder = null;
              if (operationCase_ == 26) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 26;
              break;
            }
            case 218: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.Builder subBuilder = null;
              if (operationCase_ == 27) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 27;
              break;
            }
            case 226: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.Builder subBuilder = null;
              if (operationCase_ == 28) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) operation_).toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 28;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrOperation_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrOperation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrOperation> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrOperation>() {
      public IrOperation parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrOperation(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrOperation> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int operationCase_ = 0;
    private java.lang.Object operation_;
    public enum OperationCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      BLOCK(1),
      BREAK(2),
      CALL(3),
      CLASS_REFERENCE(4),
      COMPOSITE(5),
      CONST(6),
      CONTINUE(7),
      DELEGATING_CONSTRUCTOR_CALL(8),
      DO_WHILE(9),
      ENUM_CONSTRUCTOR_CALL(10),
      FUNCTION_REFERENCE(11),
      GET_CLASS(12),
      GET_ENUM_VALUE(13),
      GET_FIELD(14),
      GET_OBJECT(15),
      GET_VALUE(16),
      INSTANCE_INITIALIZER_CALL(17),
      PROPERTY_REFERENCE(18),
      RETURN(19),
      SET_FIELD(20),
      SET_VARIABLE(21),
      STRING_CONCAT(22),
      THROW(23),
      TRY(24),
      TYPE_OP(25),
      VARARG(26),
      WHEN(27),
      WHILE(28),
      OPERATION_NOT_SET(0);
      private int value = 0;
      private OperationCase(int value) {
        this.value = value;
      }
      public static OperationCase valueOf(int value) {
        switch (value) {
          case 1: return BLOCK;
          case 2: return BREAK;
          case 3: return CALL;
          case 4: return CLASS_REFERENCE;
          case 5: return COMPOSITE;
          case 6: return CONST;
          case 7: return CONTINUE;
          case 8: return DELEGATING_CONSTRUCTOR_CALL;
          case 9: return DO_WHILE;
          case 10: return ENUM_CONSTRUCTOR_CALL;
          case 11: return FUNCTION_REFERENCE;
          case 12: return GET_CLASS;
          case 13: return GET_ENUM_VALUE;
          case 14: return GET_FIELD;
          case 15: return GET_OBJECT;
          case 16: return GET_VALUE;
          case 17: return INSTANCE_INITIALIZER_CALL;
          case 18: return PROPERTY_REFERENCE;
          case 19: return RETURN;
          case 20: return SET_FIELD;
          case 21: return SET_VARIABLE;
          case 22: return STRING_CONCAT;
          case 23: return THROW;
          case 24: return TRY;
          case 25: return TYPE_OP;
          case 26: return VARARG;
          case 27: return WHEN;
          case 28: return WHILE;
          case 0: return OPERATION_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public OperationCase
    getOperationCase() {
      return OperationCase.valueOf(
          operationCase_);
    }

    public static final int BLOCK_FIELD_NUMBER = 1;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
     */
    public boolean hasBlock() {
      return operationCase_ == 1;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock getBlock() {
      if (operationCase_ == 1) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockOrBuilder getBlockOrBuilder() {
      if (operationCase_ == 1) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.getDefaultInstance();
    }

    public static final int BREAK_FIELD_NUMBER = 2;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
     */
    public boolean hasBreak() {
      return operationCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak getBreak() {
      if (operationCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreakOrBuilder getBreakOrBuilder() {
      if (operationCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.getDefaultInstance();
    }

    public static final int CALL_FIELD_NUMBER = 3;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
     */
    public boolean hasCall() {
      return operationCase_ == 3;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall getCall() {
      if (operationCase_ == 3) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder getCallOrBuilder() {
      if (operationCase_ == 3) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance();
    }

    public static final int CLASS_REFERENCE_FIELD_NUMBER = 4;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
     */
    public boolean hasClassReference() {
      return operationCase_ == 4;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference getClassReference() {
      if (operationCase_ == 4) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReferenceOrBuilder getClassReferenceOrBuilder() {
      if (operationCase_ == 4) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.getDefaultInstance();
    }

    public static final int COMPOSITE_FIELD_NUMBER = 5;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
     */
    public boolean hasComposite() {
      return operationCase_ == 5;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite getComposite() {
      if (operationCase_ == 5) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCompositeOrBuilder getCompositeOrBuilder() {
      if (operationCase_ == 5) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.getDefaultInstance();
    }

    public static final int CONST_FIELD_NUMBER = 6;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
     */
    public boolean hasConst() {
      return operationCase_ == 6;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst getConst() {
      if (operationCase_ == 6) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstOrBuilder getConstOrBuilder() {
      if (operationCase_ == 6) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.getDefaultInstance();
    }

    public static final int CONTINUE_FIELD_NUMBER = 7;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
     */
    public boolean hasContinue() {
      return operationCase_ == 7;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue getContinue() {
      if (operationCase_ == 7) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinueOrBuilder getContinueOrBuilder() {
      if (operationCase_ == 7) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.getDefaultInstance();
    }

    public static final int DELEGATING_CONSTRUCTOR_CALL_FIELD_NUMBER = 8;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
     */
    public boolean hasDelegatingConstructorCall() {
      return operationCase_ == 8;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall getDelegatingConstructorCall() {
      if (operationCase_ == 8) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCallOrBuilder getDelegatingConstructorCallOrBuilder() {
      if (operationCase_ == 8) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.getDefaultInstance();
    }

    public static final int DO_WHILE_FIELD_NUMBER = 9;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
     */
    public boolean hasDoWhile() {
      return operationCase_ == 9;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile getDoWhile() {
      if (operationCase_ == 9) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhileOrBuilder getDoWhileOrBuilder() {
      if (operationCase_ == 9) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.getDefaultInstance();
    }

    public static final int ENUM_CONSTRUCTOR_CALL_FIELD_NUMBER = 10;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
     */
    public boolean hasEnumConstructorCall() {
      return operationCase_ == 10;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall getEnumConstructorCall() {
      if (operationCase_ == 10) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCallOrBuilder getEnumConstructorCallOrBuilder() {
      if (operationCase_ == 10) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.getDefaultInstance();
    }

    public static final int FUNCTION_REFERENCE_FIELD_NUMBER = 11;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
     */
    public boolean hasFunctionReference() {
      return operationCase_ == 11;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference getFunctionReference() {
      if (operationCase_ == 11) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReferenceOrBuilder getFunctionReferenceOrBuilder() {
      if (operationCase_ == 11) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.getDefaultInstance();
    }

    public static final int GET_CLASS_FIELD_NUMBER = 12;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
     */
    public boolean hasGetClass() {
      return operationCase_ == 12;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass getGetClass() {
      if (operationCase_ == 12) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClassOrBuilder getGetClassOrBuilder() {
      if (operationCase_ == 12) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.getDefaultInstance();
    }

    public static final int GET_ENUM_VALUE_FIELD_NUMBER = 13;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
     */
    public boolean hasGetEnumValue() {
      return operationCase_ == 13;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue getGetEnumValue() {
      if (operationCase_ == 13) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValueOrBuilder getGetEnumValueOrBuilder() {
      if (operationCase_ == 13) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.getDefaultInstance();
    }

    public static final int GET_FIELD_FIELD_NUMBER = 14;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
     */
    public boolean hasGetField() {
      return operationCase_ == 14;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField getGetField() {
      if (operationCase_ == 14) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetFieldOrBuilder getGetFieldOrBuilder() {
      if (operationCase_ == 14) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.getDefaultInstance();
    }

    public static final int GET_OBJECT_FIELD_NUMBER = 15;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
     */
    public boolean hasGetObject() {
      return operationCase_ == 15;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject getGetObject() {
      if (operationCase_ == 15) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObjectOrBuilder getGetObjectOrBuilder() {
      if (operationCase_ == 15) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.getDefaultInstance();
    }

    public static final int GET_VALUE_FIELD_NUMBER = 16;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
     */
    public boolean hasGetValue() {
      return operationCase_ == 16;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue getGetValue() {
      if (operationCase_ == 16) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValueOrBuilder getGetValueOrBuilder() {
      if (operationCase_ == 16) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.getDefaultInstance();
    }

    public static final int INSTANCE_INITIALIZER_CALL_FIELD_NUMBER = 17;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
     */
    public boolean hasInstanceInitializerCall() {
      return operationCase_ == 17;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall getInstanceInitializerCall() {
      if (operationCase_ == 17) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCallOrBuilder getInstanceInitializerCallOrBuilder() {
      if (operationCase_ == 17) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.getDefaultInstance();
    }

    public static final int PROPERTY_REFERENCE_FIELD_NUMBER = 18;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
     */
    public boolean hasPropertyReference() {
      return operationCase_ == 18;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference getPropertyReference() {
      if (operationCase_ == 18) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReferenceOrBuilder getPropertyReferenceOrBuilder() {
      if (operationCase_ == 18) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.getDefaultInstance();
    }

    public static final int RETURN_FIELD_NUMBER = 19;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
     */
    public boolean hasReturn() {
      return operationCase_ == 19;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn getReturn() {
      if (operationCase_ == 19) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturnOrBuilder getReturnOrBuilder() {
      if (operationCase_ == 19) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.getDefaultInstance();
    }

    public static final int SET_FIELD_FIELD_NUMBER = 20;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
     */
    public boolean hasSetField() {
      return operationCase_ == 20;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField getSetField() {
      if (operationCase_ == 20) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetFieldOrBuilder getSetFieldOrBuilder() {
      if (operationCase_ == 20) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.getDefaultInstance();
    }

    public static final int SET_VARIABLE_FIELD_NUMBER = 21;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
     */
    public boolean hasSetVariable() {
      return operationCase_ == 21;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable getSetVariable() {
      if (operationCase_ == 21) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariableOrBuilder getSetVariableOrBuilder() {
      if (operationCase_ == 21) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.getDefaultInstance();
    }

    public static final int STRING_CONCAT_FIELD_NUMBER = 22;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
     */
    public boolean hasStringConcat() {
      return operationCase_ == 22;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat getStringConcat() {
      if (operationCase_ == 22) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcatOrBuilder getStringConcatOrBuilder() {
      if (operationCase_ == 22) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.getDefaultInstance();
    }

    public static final int THROW_FIELD_NUMBER = 23;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
     */
    public boolean hasThrow() {
      return operationCase_ == 23;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow getThrow() {
      if (operationCase_ == 23) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrowOrBuilder getThrowOrBuilder() {
      if (operationCase_ == 23) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.getDefaultInstance();
    }

    public static final int TRY_FIELD_NUMBER = 24;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
     */
    public boolean hasTry() {
      return operationCase_ == 24;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry getTry() {
      if (operationCase_ == 24) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTryOrBuilder getTryOrBuilder() {
      if (operationCase_ == 24) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.getDefaultInstance();
    }

    public static final int TYPE_OP_FIELD_NUMBER = 25;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
     */
    public boolean hasTypeOp() {
      return operationCase_ == 25;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp getTypeOp() {
      if (operationCase_ == 25) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOpOrBuilder getTypeOpOrBuilder() {
      if (operationCase_ == 25) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.getDefaultInstance();
    }

    public static final int VARARG_FIELD_NUMBER = 26;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
     */
    public boolean hasVararg() {
      return operationCase_ == 26;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg getVararg() {
      if (operationCase_ == 26) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargOrBuilder getVarargOrBuilder() {
      if (operationCase_ == 26) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.getDefaultInstance();
    }

    public static final int WHEN_FIELD_NUMBER = 27;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
     */
    public boolean hasWhen() {
      return operationCase_ == 27;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen getWhen() {
      if (operationCase_ == 27) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhenOrBuilder getWhenOrBuilder() {
      if (operationCase_ == 27) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.getDefaultInstance();
    }

    public static final int WHILE_FIELD_NUMBER = 28;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
     */
    public boolean hasWhile() {
      return operationCase_ == 28;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile getWhile() {
      if (operationCase_ == 28) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhileOrBuilder getWhileOrBuilder() {
      if (operationCase_ == 28) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) operation_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.getDefaultInstance();
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasBlock()) {
        if (!getBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasBreak()) {
        if (!getBreak().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCall()) {
        if (!getCall().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasClassReference()) {
        if (!getClassReference().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasComposite()) {
        if (!getComposite().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasContinue()) {
        if (!getContinue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDelegatingConstructorCall()) {
        if (!getDelegatingConstructorCall().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDoWhile()) {
        if (!getDoWhile().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasEnumConstructorCall()) {
        if (!getEnumConstructorCall().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasFunctionReference()) {
        if (!getFunctionReference().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGetClass()) {
        if (!getGetClass().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGetEnumValue()) {
        if (!getGetEnumValue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGetField()) {
        if (!getGetField().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGetObject()) {
        if (!getGetObject().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGetValue()) {
        if (!getGetValue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasInstanceInitializerCall()) {
        if (!getInstanceInitializerCall().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPropertyReference()) {
        if (!getPropertyReference().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReturn()) {
        if (!getReturn().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSetField()) {
        if (!getSetField().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSetVariable()) {
        if (!getSetVariable().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasStringConcat()) {
        if (!getStringConcat().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasThrow()) {
        if (!getThrow().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTry()) {
        if (!getTry().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTypeOp()) {
        if (!getTypeOp().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasVararg()) {
        if (!getVararg().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasWhen()) {
        if (!getWhen().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasWhile()) {
        if (!getWhile().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (operationCase_ == 1) {
        output.writeMessage(1, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) operation_);
      }
      if (operationCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) operation_);
      }
      if (operationCase_ == 3) {
        output.writeMessage(3, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) operation_);
      }
      if (operationCase_ == 4) {
        output.writeMessage(4, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) operation_);
      }
      if (operationCase_ == 5) {
        output.writeMessage(5, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) operation_);
      }
      if (operationCase_ == 6) {
        output.writeMessage(6, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) operation_);
      }
      if (operationCase_ == 7) {
        output.writeMessage(7, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) operation_);
      }
      if (operationCase_ == 8) {
        output.writeMessage(8, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) operation_);
      }
      if (operationCase_ == 9) {
        output.writeMessage(9, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) operation_);
      }
      if (operationCase_ == 10) {
        output.writeMessage(10, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) operation_);
      }
      if (operationCase_ == 11) {
        output.writeMessage(11, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) operation_);
      }
      if (operationCase_ == 12) {
        output.writeMessage(12, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) operation_);
      }
      if (operationCase_ == 13) {
        output.writeMessage(13, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) operation_);
      }
      if (operationCase_ == 14) {
        output.writeMessage(14, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) operation_);
      }
      if (operationCase_ == 15) {
        output.writeMessage(15, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) operation_);
      }
      if (operationCase_ == 16) {
        output.writeMessage(16, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) operation_);
      }
      if (operationCase_ == 17) {
        output.writeMessage(17, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) operation_);
      }
      if (operationCase_ == 18) {
        output.writeMessage(18, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) operation_);
      }
      if (operationCase_ == 19) {
        output.writeMessage(19, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) operation_);
      }
      if (operationCase_ == 20) {
        output.writeMessage(20, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) operation_);
      }
      if (operationCase_ == 21) {
        output.writeMessage(21, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) operation_);
      }
      if (operationCase_ == 22) {
        output.writeMessage(22, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) operation_);
      }
      if (operationCase_ == 23) {
        output.writeMessage(23, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) operation_);
      }
      if (operationCase_ == 24) {
        output.writeMessage(24, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) operation_);
      }
      if (operationCase_ == 25) {
        output.writeMessage(25, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) operation_);
      }
      if (operationCase_ == 26) {
        output.writeMessage(26, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) operation_);
      }
      if (operationCase_ == 27) {
        output.writeMessage(27, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) operation_);
      }
      if (operationCase_ == 28) {
        output.writeMessage(28, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) operation_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (operationCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) operation_);
      }
      if (operationCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) operation_);
      }
      if (operationCase_ == 3) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) operation_);
      }
      if (operationCase_ == 4) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) operation_);
      }
      if (operationCase_ == 5) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) operation_);
      }
      if (operationCase_ == 6) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) operation_);
      }
      if (operationCase_ == 7) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(7, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) operation_);
      }
      if (operationCase_ == 8) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) operation_);
      }
      if (operationCase_ == 9) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(9, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) operation_);
      }
      if (operationCase_ == 10) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(10, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) operation_);
      }
      if (operationCase_ == 11) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(11, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) operation_);
      }
      if (operationCase_ == 12) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(12, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) operation_);
      }
      if (operationCase_ == 13) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(13, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) operation_);
      }
      if (operationCase_ == 14) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(14, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) operation_);
      }
      if (operationCase_ == 15) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(15, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) operation_);
      }
      if (operationCase_ == 16) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(16, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) operation_);
      }
      if (operationCase_ == 17) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(17, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) operation_);
      }
      if (operationCase_ == 18) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(18, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) operation_);
      }
      if (operationCase_ == 19) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(19, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) operation_);
      }
      if (operationCase_ == 20) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(20, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) operation_);
      }
      if (operationCase_ == 21) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(21, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) operation_);
      }
      if (operationCase_ == 22) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(22, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) operation_);
      }
      if (operationCase_ == 23) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(23, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) operation_);
      }
      if (operationCase_ == 24) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(24, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) operation_);
      }
      if (operationCase_ == 25) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(25, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) operation_);
      }
      if (operationCase_ == 26) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(26, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) operation_);
      }
      if (operationCase_ == 27) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(27, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) operation_);
      }
      if (operationCase_ == 28) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(28, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) operation_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation}
     *
     * <pre>
     * TODO: we need an extension mechanism to accomodate new
     * IR operators in upcoming releases.
     * </pre>
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperationOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrOperation_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrOperation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        operationCase_ = 0;
        operation_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrOperation_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (operationCase_ == 1) {
          if (blockBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = blockBuilder_.build();
          }
        }
        if (operationCase_ == 2) {
          if (breakBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = breakBuilder_.build();
          }
        }
        if (operationCase_ == 3) {
          if (callBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = callBuilder_.build();
          }
        }
        if (operationCase_ == 4) {
          if (classReferenceBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = classReferenceBuilder_.build();
          }
        }
        if (operationCase_ == 5) {
          if (compositeBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = compositeBuilder_.build();
          }
        }
        if (operationCase_ == 6) {
          if (constBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = constBuilder_.build();
          }
        }
        if (operationCase_ == 7) {
          if (continueBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = continueBuilder_.build();
          }
        }
        if (operationCase_ == 8) {
          if (delegatingConstructorCallBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = delegatingConstructorCallBuilder_.build();
          }
        }
        if (operationCase_ == 9) {
          if (doWhileBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = doWhileBuilder_.build();
          }
        }
        if (operationCase_ == 10) {
          if (enumConstructorCallBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = enumConstructorCallBuilder_.build();
          }
        }
        if (operationCase_ == 11) {
          if (functionReferenceBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = functionReferenceBuilder_.build();
          }
        }
        if (operationCase_ == 12) {
          if (getClassBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = getClassBuilder_.build();
          }
        }
        if (operationCase_ == 13) {
          if (getEnumValueBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = getEnumValueBuilder_.build();
          }
        }
        if (operationCase_ == 14) {
          if (getFieldBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = getFieldBuilder_.build();
          }
        }
        if (operationCase_ == 15) {
          if (getObjectBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = getObjectBuilder_.build();
          }
        }
        if (operationCase_ == 16) {
          if (getValueBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = getValueBuilder_.build();
          }
        }
        if (operationCase_ == 17) {
          if (instanceInitializerCallBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = instanceInitializerCallBuilder_.build();
          }
        }
        if (operationCase_ == 18) {
          if (propertyReferenceBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = propertyReferenceBuilder_.build();
          }
        }
        if (operationCase_ == 19) {
          if (returnBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = returnBuilder_.build();
          }
        }
        if (operationCase_ == 20) {
          if (setFieldBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = setFieldBuilder_.build();
          }
        }
        if (operationCase_ == 21) {
          if (setVariableBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = setVariableBuilder_.build();
          }
        }
        if (operationCase_ == 22) {
          if (stringConcatBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = stringConcatBuilder_.build();
          }
        }
        if (operationCase_ == 23) {
          if (throwBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = throwBuilder_.build();
          }
        }
        if (operationCase_ == 24) {
          if (tryBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = tryBuilder_.build();
          }
        }
        if (operationCase_ == 25) {
          if (typeOpBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = typeOpBuilder_.build();
          }
        }
        if (operationCase_ == 26) {
          if (varargBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = varargBuilder_.build();
          }
        }
        if (operationCase_ == 27) {
          if (whenBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = whenBuilder_.build();
          }
        }
        if (operationCase_ == 28) {
          if (whileBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = whileBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.operationCase_ = operationCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.getDefaultInstance()) return this;
        switch (other.getOperationCase()) {
          case BLOCK: {
            mergeBlock(other.getBlock());
            break;
          }
          case BREAK: {
            mergeBreak(other.getBreak());
            break;
          }
          case CALL: {
            mergeCall(other.getCall());
            break;
          }
          case CLASS_REFERENCE: {
            mergeClassReference(other.getClassReference());
            break;
          }
          case COMPOSITE: {
            mergeComposite(other.getComposite());
            break;
          }
          case CONST: {
            mergeConst(other.getConst());
            break;
          }
          case CONTINUE: {
            mergeContinue(other.getContinue());
            break;
          }
          case DELEGATING_CONSTRUCTOR_CALL: {
            mergeDelegatingConstructorCall(other.getDelegatingConstructorCall());
            break;
          }
          case DO_WHILE: {
            mergeDoWhile(other.getDoWhile());
            break;
          }
          case ENUM_CONSTRUCTOR_CALL: {
            mergeEnumConstructorCall(other.getEnumConstructorCall());
            break;
          }
          case FUNCTION_REFERENCE: {
            mergeFunctionReference(other.getFunctionReference());
            break;
          }
          case GET_CLASS: {
            mergeGetClass(other.getGetClass());
            break;
          }
          case GET_ENUM_VALUE: {
            mergeGetEnumValue(other.getGetEnumValue());
            break;
          }
          case GET_FIELD: {
            mergeGetField(other.getGetField());
            break;
          }
          case GET_OBJECT: {
            mergeGetObject(other.getGetObject());
            break;
          }
          case GET_VALUE: {
            mergeGetValue(other.getGetValue());
            break;
          }
          case INSTANCE_INITIALIZER_CALL: {
            mergeInstanceInitializerCall(other.getInstanceInitializerCall());
            break;
          }
          case PROPERTY_REFERENCE: {
            mergePropertyReference(other.getPropertyReference());
            break;
          }
          case RETURN: {
            mergeReturn(other.getReturn());
            break;
          }
          case SET_FIELD: {
            mergeSetField(other.getSetField());
            break;
          }
          case SET_VARIABLE: {
            mergeSetVariable(other.getSetVariable());
            break;
          }
          case STRING_CONCAT: {
            mergeStringConcat(other.getStringConcat());
            break;
          }
          case THROW: {
            mergeThrow(other.getThrow());
            break;
          }
          case TRY: {
            mergeTry(other.getTry());
            break;
          }
          case TYPE_OP: {
            mergeTypeOp(other.getTypeOp());
            break;
          }
          case VARARG: {
            mergeVararg(other.getVararg());
            break;
          }
          case WHEN: {
            mergeWhen(other.getWhen());
            break;
          }
          case WHILE: {
            mergeWhile(other.getWhile());
            break;
          }
          case OPERATION_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasBlock()) {
          if (!getBlock().isInitialized()) {
            
            return false;
          }
        }
        if (hasBreak()) {
          if (!getBreak().isInitialized()) {
            
            return false;
          }
        }
        if (hasCall()) {
          if (!getCall().isInitialized()) {
            
            return false;
          }
        }
        if (hasClassReference()) {
          if (!getClassReference().isInitialized()) {
            
            return false;
          }
        }
        if (hasComposite()) {
          if (!getComposite().isInitialized()) {
            
            return false;
          }
        }
        if (hasContinue()) {
          if (!getContinue().isInitialized()) {
            
            return false;
          }
        }
        if (hasDelegatingConstructorCall()) {
          if (!getDelegatingConstructorCall().isInitialized()) {
            
            return false;
          }
        }
        if (hasDoWhile()) {
          if (!getDoWhile().isInitialized()) {
            
            return false;
          }
        }
        if (hasEnumConstructorCall()) {
          if (!getEnumConstructorCall().isInitialized()) {
            
            return false;
          }
        }
        if (hasFunctionReference()) {
          if (!getFunctionReference().isInitialized()) {
            
            return false;
          }
        }
        if (hasGetClass()) {
          if (!getGetClass().isInitialized()) {
            
            return false;
          }
        }
        if (hasGetEnumValue()) {
          if (!getGetEnumValue().isInitialized()) {
            
            return false;
          }
        }
        if (hasGetField()) {
          if (!getGetField().isInitialized()) {
            
            return false;
          }
        }
        if (hasGetObject()) {
          if (!getGetObject().isInitialized()) {
            
            return false;
          }
        }
        if (hasGetValue()) {
          if (!getGetValue().isInitialized()) {
            
            return false;
          }
        }
        if (hasInstanceInitializerCall()) {
          if (!getInstanceInitializerCall().isInitialized()) {
            
            return false;
          }
        }
        if (hasPropertyReference()) {
          if (!getPropertyReference().isInitialized()) {
            
            return false;
          }
        }
        if (hasReturn()) {
          if (!getReturn().isInitialized()) {
            
            return false;
          }
        }
        if (hasSetField()) {
          if (!getSetField().isInitialized()) {
            
            return false;
          }
        }
        if (hasSetVariable()) {
          if (!getSetVariable().isInitialized()) {
            
            return false;
          }
        }
        if (hasStringConcat()) {
          if (!getStringConcat().isInitialized()) {
            
            return false;
          }
        }
        if (hasThrow()) {
          if (!getThrow().isInitialized()) {
            
            return false;
          }
        }
        if (hasTry()) {
          if (!getTry().isInitialized()) {
            
            return false;
          }
        }
        if (hasTypeOp()) {
          if (!getTypeOp().isInitialized()) {
            
            return false;
          }
        }
        if (hasVararg()) {
          if (!getVararg().isInitialized()) {
            
            return false;
          }
        }
        if (hasWhen()) {
          if (!getWhen().isInitialized()) {
            
            return false;
          }
        }
        if (hasWhile()) {
          if (!getWhile().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int operationCase_ = 0;
      private java.lang.Object operation_;
      public OperationCase
          getOperationCase() {
        return OperationCase.valueOf(
            operationCase_);
      }

      public Builder clearOperation() {
        operationCase_ = 0;
        operation_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockOrBuilder> blockBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
       */
      public boolean hasBlock() {
        return operationCase_ == 1;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock getBlock() {
        if (blockBuilder_ == null) {
          if (operationCase_ == 1) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.getDefaultInstance();
        } else {
          if (operationCase_ == 1) {
            return blockBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
       */
      public Builder setBlock(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock value) {
        if (blockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          blockBuilder_.setMessage(value);
        }
        operationCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
       */
      public Builder setBlock(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.Builder builderForValue) {
        if (blockBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          blockBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
       */
      public Builder mergeBlock(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock value) {
        if (blockBuilder_ == null) {
          if (operationCase_ == 1 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 1) {
            blockBuilder_.mergeFrom(value);
          }
          blockBuilder_.setMessage(value);
        }
        operationCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
       */
      public Builder clearBlock() {
        if (blockBuilder_ == null) {
          if (operationCase_ == 1) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 1) {
            operationCase_ = 0;
            operation_ = null;
          }
          blockBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.Builder getBlockBuilder() {
        return getBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockOrBuilder getBlockOrBuilder() {
        if ((operationCase_ == 1) && (blockBuilder_ != null)) {
          return blockBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 1) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlock block = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockOrBuilder> 
          getBlockFieldBuilder() {
        if (blockBuilder_ == null) {
          if (!(operationCase_ == 1)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.getDefaultInstance();
          }
          blockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlock) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 1;
        return blockBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreakOrBuilder> breakBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
       */
      public boolean hasBreak() {
        return operationCase_ == 2;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak getBreak() {
        if (breakBuilder_ == null) {
          if (operationCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.getDefaultInstance();
        } else {
          if (operationCase_ == 2) {
            return breakBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
       */
      public Builder setBreak(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak value) {
        if (breakBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          breakBuilder_.setMessage(value);
        }
        operationCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
       */
      public Builder setBreak(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.Builder builderForValue) {
        if (breakBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          breakBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
       */
      public Builder mergeBreak(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak value) {
        if (breakBuilder_ == null) {
          if (operationCase_ == 2 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 2) {
            breakBuilder_.mergeFrom(value);
          }
          breakBuilder_.setMessage(value);
        }
        operationCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
       */
      public Builder clearBreak() {
        if (breakBuilder_ == null) {
          if (operationCase_ == 2) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 2) {
            operationCase_ = 0;
            operation_ = null;
          }
          breakBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.Builder getBreakBuilder() {
        return getBreakFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreakOrBuilder getBreakOrBuilder() {
        if ((operationCase_ == 2) && (breakBuilder_ != null)) {
          return breakBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBreak break = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreakOrBuilder> 
          getBreakFieldBuilder() {
        if (breakBuilder_ == null) {
          if (!(operationCase_ == 2)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.getDefaultInstance();
          }
          breakBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreakOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBreak) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 2;
        return breakBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder> callBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
       */
      public boolean hasCall() {
        return operationCase_ == 3;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall getCall() {
        if (callBuilder_ == null) {
          if (operationCase_ == 3) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance();
        } else {
          if (operationCase_ == 3) {
            return callBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
       */
      public Builder setCall(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall value) {
        if (callBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          callBuilder_.setMessage(value);
        }
        operationCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
       */
      public Builder setCall(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder builderForValue) {
        if (callBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          callBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
       */
      public Builder mergeCall(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall value) {
        if (callBuilder_ == null) {
          if (operationCase_ == 3 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 3) {
            callBuilder_.mergeFrom(value);
          }
          callBuilder_.setMessage(value);
        }
        operationCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
       */
      public Builder clearCall() {
        if (callBuilder_ == null) {
          if (operationCase_ == 3) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 3) {
            operationCase_ = 0;
            operation_ = null;
          }
          callBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder getCallBuilder() {
        return getCallFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder getCallOrBuilder() {
        if ((operationCase_ == 3) && (callBuilder_ != null)) {
          return callBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 3) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCall call = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder> 
          getCallFieldBuilder() {
        if (callBuilder_ == null) {
          if (!(operationCase_ == 3)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.getDefaultInstance();
          }
          callBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCallOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCall) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 3;
        return callBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReferenceOrBuilder> classReferenceBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
       */
      public boolean hasClassReference() {
        return operationCase_ == 4;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference getClassReference() {
        if (classReferenceBuilder_ == null) {
          if (operationCase_ == 4) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.getDefaultInstance();
        } else {
          if (operationCase_ == 4) {
            return classReferenceBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
       */
      public Builder setClassReference(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference value) {
        if (classReferenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          classReferenceBuilder_.setMessage(value);
        }
        operationCase_ = 4;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
       */
      public Builder setClassReference(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.Builder builderForValue) {
        if (classReferenceBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          classReferenceBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 4;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
       */
      public Builder mergeClassReference(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference value) {
        if (classReferenceBuilder_ == null) {
          if (operationCase_ == 4 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 4) {
            classReferenceBuilder_.mergeFrom(value);
          }
          classReferenceBuilder_.setMessage(value);
        }
        operationCase_ = 4;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
       */
      public Builder clearClassReference() {
        if (classReferenceBuilder_ == null) {
          if (operationCase_ == 4) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 4) {
            operationCase_ = 0;
            operation_ = null;
          }
          classReferenceBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.Builder getClassReferenceBuilder() {
        return getClassReferenceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReferenceOrBuilder getClassReferenceOrBuilder() {
        if ((operationCase_ == 4) && (classReferenceBuilder_ != null)) {
          return classReferenceBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 4) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClassReference class_reference = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReferenceOrBuilder> 
          getClassReferenceFieldBuilder() {
        if (classReferenceBuilder_ == null) {
          if (!(operationCase_ == 4)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.getDefaultInstance();
          }
          classReferenceBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReferenceOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassReference) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 4;
        return classReferenceBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCompositeOrBuilder> compositeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
       */
      public boolean hasComposite() {
        return operationCase_ == 5;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite getComposite() {
        if (compositeBuilder_ == null) {
          if (operationCase_ == 5) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.getDefaultInstance();
        } else {
          if (operationCase_ == 5) {
            return compositeBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
       */
      public Builder setComposite(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite value) {
        if (compositeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          compositeBuilder_.setMessage(value);
        }
        operationCase_ = 5;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
       */
      public Builder setComposite(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.Builder builderForValue) {
        if (compositeBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          compositeBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 5;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
       */
      public Builder mergeComposite(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite value) {
        if (compositeBuilder_ == null) {
          if (operationCase_ == 5 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 5) {
            compositeBuilder_.mergeFrom(value);
          }
          compositeBuilder_.setMessage(value);
        }
        operationCase_ = 5;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
       */
      public Builder clearComposite() {
        if (compositeBuilder_ == null) {
          if (operationCase_ == 5) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 5) {
            operationCase_ = 0;
            operation_ = null;
          }
          compositeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.Builder getCompositeBuilder() {
        return getCompositeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCompositeOrBuilder getCompositeOrBuilder() {
        if ((operationCase_ == 5) && (compositeBuilder_ != null)) {
          return compositeBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 5) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrComposite composite = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCompositeOrBuilder> 
          getCompositeFieldBuilder() {
        if (compositeBuilder_ == null) {
          if (!(operationCase_ == 5)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.getDefaultInstance();
          }
          compositeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCompositeOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrComposite) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 5;
        return compositeBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstOrBuilder> constBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
       */
      public boolean hasConst() {
        return operationCase_ == 6;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst getConst() {
        if (constBuilder_ == null) {
          if (operationCase_ == 6) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.getDefaultInstance();
        } else {
          if (operationCase_ == 6) {
            return constBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
       */
      public Builder setConst(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst value) {
        if (constBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          constBuilder_.setMessage(value);
        }
        operationCase_ = 6;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
       */
      public Builder setConst(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.Builder builderForValue) {
        if (constBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          constBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 6;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
       */
      public Builder mergeConst(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst value) {
        if (constBuilder_ == null) {
          if (operationCase_ == 6 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 6) {
            constBuilder_.mergeFrom(value);
          }
          constBuilder_.setMessage(value);
        }
        operationCase_ = 6;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
       */
      public Builder clearConst() {
        if (constBuilder_ == null) {
          if (operationCase_ == 6) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 6) {
            operationCase_ = 0;
            operation_ = null;
          }
          constBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.Builder getConstBuilder() {
        return getConstFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstOrBuilder getConstOrBuilder() {
        if ((operationCase_ == 6) && (constBuilder_ != null)) {
          return constBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 6) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConst const = 6;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstOrBuilder> 
          getConstFieldBuilder() {
        if (constBuilder_ == null) {
          if (!(operationCase_ == 6)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.getDefaultInstance();
          }
          constBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConst) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 6;
        return constBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinueOrBuilder> continueBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
       */
      public boolean hasContinue() {
        return operationCase_ == 7;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue getContinue() {
        if (continueBuilder_ == null) {
          if (operationCase_ == 7) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.getDefaultInstance();
        } else {
          if (operationCase_ == 7) {
            return continueBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
       */
      public Builder setContinue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue value) {
        if (continueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          continueBuilder_.setMessage(value);
        }
        operationCase_ = 7;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
       */
      public Builder setContinue(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.Builder builderForValue) {
        if (continueBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          continueBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 7;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
       */
      public Builder mergeContinue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue value) {
        if (continueBuilder_ == null) {
          if (operationCase_ == 7 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 7) {
            continueBuilder_.mergeFrom(value);
          }
          continueBuilder_.setMessage(value);
        }
        operationCase_ = 7;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
       */
      public Builder clearContinue() {
        if (continueBuilder_ == null) {
          if (operationCase_ == 7) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 7) {
            operationCase_ = 0;
            operation_ = null;
          }
          continueBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.Builder getContinueBuilder() {
        return getContinueFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinueOrBuilder getContinueOrBuilder() {
        if ((operationCase_ == 7) && (continueBuilder_ != null)) {
          return continueBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 7) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrContinue continue = 7;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinueOrBuilder> 
          getContinueFieldBuilder() {
        if (continueBuilder_ == null) {
          if (!(operationCase_ == 7)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.getDefaultInstance();
          }
          continueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinueOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrContinue) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 7;
        return continueBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCallOrBuilder> delegatingConstructorCallBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
       */
      public boolean hasDelegatingConstructorCall() {
        return operationCase_ == 8;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall getDelegatingConstructorCall() {
        if (delegatingConstructorCallBuilder_ == null) {
          if (operationCase_ == 8) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.getDefaultInstance();
        } else {
          if (operationCase_ == 8) {
            return delegatingConstructorCallBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
       */
      public Builder setDelegatingConstructorCall(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall value) {
        if (delegatingConstructorCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          delegatingConstructorCallBuilder_.setMessage(value);
        }
        operationCase_ = 8;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
       */
      public Builder setDelegatingConstructorCall(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.Builder builderForValue) {
        if (delegatingConstructorCallBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          delegatingConstructorCallBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 8;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
       */
      public Builder mergeDelegatingConstructorCall(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall value) {
        if (delegatingConstructorCallBuilder_ == null) {
          if (operationCase_ == 8 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 8) {
            delegatingConstructorCallBuilder_.mergeFrom(value);
          }
          delegatingConstructorCallBuilder_.setMessage(value);
        }
        operationCase_ = 8;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
       */
      public Builder clearDelegatingConstructorCall() {
        if (delegatingConstructorCallBuilder_ == null) {
          if (operationCase_ == 8) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 8) {
            operationCase_ = 0;
            operation_ = null;
          }
          delegatingConstructorCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.Builder getDelegatingConstructorCallBuilder() {
        return getDelegatingConstructorCallFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCallOrBuilder getDelegatingConstructorCallOrBuilder() {
        if ((operationCase_ == 8) && (delegatingConstructorCallBuilder_ != null)) {
          return delegatingConstructorCallBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 8) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDelegatingConstructorCall delegating_constructor_call = 8;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCallOrBuilder> 
          getDelegatingConstructorCallFieldBuilder() {
        if (delegatingConstructorCallBuilder_ == null) {
          if (!(operationCase_ == 8)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.getDefaultInstance();
          }
          delegatingConstructorCallBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCallOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDelegatingConstructorCall) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 8;
        return delegatingConstructorCallBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhileOrBuilder> doWhileBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
       */
      public boolean hasDoWhile() {
        return operationCase_ == 9;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile getDoWhile() {
        if (doWhileBuilder_ == null) {
          if (operationCase_ == 9) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.getDefaultInstance();
        } else {
          if (operationCase_ == 9) {
            return doWhileBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
       */
      public Builder setDoWhile(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile value) {
        if (doWhileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          doWhileBuilder_.setMessage(value);
        }
        operationCase_ = 9;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
       */
      public Builder setDoWhile(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.Builder builderForValue) {
        if (doWhileBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          doWhileBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 9;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
       */
      public Builder mergeDoWhile(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile value) {
        if (doWhileBuilder_ == null) {
          if (operationCase_ == 9 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 9) {
            doWhileBuilder_.mergeFrom(value);
          }
          doWhileBuilder_.setMessage(value);
        }
        operationCase_ = 9;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
       */
      public Builder clearDoWhile() {
        if (doWhileBuilder_ == null) {
          if (operationCase_ == 9) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 9) {
            operationCase_ = 0;
            operation_ = null;
          }
          doWhileBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.Builder getDoWhileBuilder() {
        return getDoWhileFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhileOrBuilder getDoWhileOrBuilder() {
        if ((operationCase_ == 9) && (doWhileBuilder_ != null)) {
          return doWhileBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 9) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDoWhile do_while = 9;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhileOrBuilder> 
          getDoWhileFieldBuilder() {
        if (doWhileBuilder_ == null) {
          if (!(operationCase_ == 9)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.getDefaultInstance();
          }
          doWhileBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhileOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDoWhile) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 9;
        return doWhileBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCallOrBuilder> enumConstructorCallBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
       */
      public boolean hasEnumConstructorCall() {
        return operationCase_ == 10;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall getEnumConstructorCall() {
        if (enumConstructorCallBuilder_ == null) {
          if (operationCase_ == 10) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.getDefaultInstance();
        } else {
          if (operationCase_ == 10) {
            return enumConstructorCallBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
       */
      public Builder setEnumConstructorCall(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall value) {
        if (enumConstructorCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          enumConstructorCallBuilder_.setMessage(value);
        }
        operationCase_ = 10;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
       */
      public Builder setEnumConstructorCall(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.Builder builderForValue) {
        if (enumConstructorCallBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          enumConstructorCallBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 10;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
       */
      public Builder mergeEnumConstructorCall(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall value) {
        if (enumConstructorCallBuilder_ == null) {
          if (operationCase_ == 10 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 10) {
            enumConstructorCallBuilder_.mergeFrom(value);
          }
          enumConstructorCallBuilder_.setMessage(value);
        }
        operationCase_ = 10;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
       */
      public Builder clearEnumConstructorCall() {
        if (enumConstructorCallBuilder_ == null) {
          if (operationCase_ == 10) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 10) {
            operationCase_ = 0;
            operation_ = null;
          }
          enumConstructorCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.Builder getEnumConstructorCallBuilder() {
        return getEnumConstructorCallFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCallOrBuilder getEnumConstructorCallOrBuilder() {
        if ((operationCase_ == 10) && (enumConstructorCallBuilder_ != null)) {
          return enumConstructorCallBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 10) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumConstructorCall enum_constructor_call = 10;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCallOrBuilder> 
          getEnumConstructorCallFieldBuilder() {
        if (enumConstructorCallBuilder_ == null) {
          if (!(operationCase_ == 10)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.getDefaultInstance();
          }
          enumConstructorCallBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCallOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumConstructorCall) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 10;
        return enumConstructorCallBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReferenceOrBuilder> functionReferenceBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
       */
      public boolean hasFunctionReference() {
        return operationCase_ == 11;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference getFunctionReference() {
        if (functionReferenceBuilder_ == null) {
          if (operationCase_ == 11) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.getDefaultInstance();
        } else {
          if (operationCase_ == 11) {
            return functionReferenceBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
       */
      public Builder setFunctionReference(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference value) {
        if (functionReferenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          functionReferenceBuilder_.setMessage(value);
        }
        operationCase_ = 11;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
       */
      public Builder setFunctionReference(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.Builder builderForValue) {
        if (functionReferenceBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          functionReferenceBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 11;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
       */
      public Builder mergeFunctionReference(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference value) {
        if (functionReferenceBuilder_ == null) {
          if (operationCase_ == 11 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 11) {
            functionReferenceBuilder_.mergeFrom(value);
          }
          functionReferenceBuilder_.setMessage(value);
        }
        operationCase_ = 11;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
       */
      public Builder clearFunctionReference() {
        if (functionReferenceBuilder_ == null) {
          if (operationCase_ == 11) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 11) {
            operationCase_ = 0;
            operation_ = null;
          }
          functionReferenceBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.Builder getFunctionReferenceBuilder() {
        return getFunctionReferenceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReferenceOrBuilder getFunctionReferenceOrBuilder() {
        if ((operationCase_ == 11) && (functionReferenceBuilder_ != null)) {
          return functionReferenceBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 11) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionReference function_reference = 11;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReferenceOrBuilder> 
          getFunctionReferenceFieldBuilder() {
        if (functionReferenceBuilder_ == null) {
          if (!(operationCase_ == 11)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.getDefaultInstance();
          }
          functionReferenceBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReferenceOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionReference) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 11;
        return functionReferenceBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClassOrBuilder> getClassBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
       */
      public boolean hasGetClass() {
        return operationCase_ == 12;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass getGetClass() {
        if (getClassBuilder_ == null) {
          if (operationCase_ == 12) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.getDefaultInstance();
        } else {
          if (operationCase_ == 12) {
            return getClassBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
       */
      public Builder setGetClass(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass value) {
        if (getClassBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          getClassBuilder_.setMessage(value);
        }
        operationCase_ = 12;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
       */
      public Builder setGetClass(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.Builder builderForValue) {
        if (getClassBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          getClassBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 12;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
       */
      public Builder mergeGetClass(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass value) {
        if (getClassBuilder_ == null) {
          if (operationCase_ == 12 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 12) {
            getClassBuilder_.mergeFrom(value);
          }
          getClassBuilder_.setMessage(value);
        }
        operationCase_ = 12;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
       */
      public Builder clearGetClass() {
        if (getClassBuilder_ == null) {
          if (operationCase_ == 12) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 12) {
            operationCase_ = 0;
            operation_ = null;
          }
          getClassBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.Builder getGetClassBuilder() {
        return getGetClassFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClassOrBuilder getGetClassOrBuilder() {
        if ((operationCase_ == 12) && (getClassBuilder_ != null)) {
          return getClassBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 12) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetClass get_class = 12;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClassOrBuilder> 
          getGetClassFieldBuilder() {
        if (getClassBuilder_ == null) {
          if (!(operationCase_ == 12)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.getDefaultInstance();
          }
          getClassBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClassOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetClass) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 12;
        return getClassBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValueOrBuilder> getEnumValueBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
       */
      public boolean hasGetEnumValue() {
        return operationCase_ == 13;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue getGetEnumValue() {
        if (getEnumValueBuilder_ == null) {
          if (operationCase_ == 13) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.getDefaultInstance();
        } else {
          if (operationCase_ == 13) {
            return getEnumValueBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
       */
      public Builder setGetEnumValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue value) {
        if (getEnumValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          getEnumValueBuilder_.setMessage(value);
        }
        operationCase_ = 13;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
       */
      public Builder setGetEnumValue(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.Builder builderForValue) {
        if (getEnumValueBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          getEnumValueBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 13;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
       */
      public Builder mergeGetEnumValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue value) {
        if (getEnumValueBuilder_ == null) {
          if (operationCase_ == 13 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 13) {
            getEnumValueBuilder_.mergeFrom(value);
          }
          getEnumValueBuilder_.setMessage(value);
        }
        operationCase_ = 13;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
       */
      public Builder clearGetEnumValue() {
        if (getEnumValueBuilder_ == null) {
          if (operationCase_ == 13) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 13) {
            operationCase_ = 0;
            operation_ = null;
          }
          getEnumValueBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.Builder getGetEnumValueBuilder() {
        return getGetEnumValueFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValueOrBuilder getGetEnumValueOrBuilder() {
        if ((operationCase_ == 13) && (getEnumValueBuilder_ != null)) {
          return getEnumValueBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 13) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetEnumValue get_enum_value = 13;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValueOrBuilder> 
          getGetEnumValueFieldBuilder() {
        if (getEnumValueBuilder_ == null) {
          if (!(operationCase_ == 13)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.getDefaultInstance();
          }
          getEnumValueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValueOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetEnumValue) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 13;
        return getEnumValueBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetFieldOrBuilder> getFieldBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
       */
      public boolean hasGetField() {
        return operationCase_ == 14;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField getGetField() {
        if (getFieldBuilder_ == null) {
          if (operationCase_ == 14) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.getDefaultInstance();
        } else {
          if (operationCase_ == 14) {
            return getFieldBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
       */
      public Builder setGetField(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField value) {
        if (getFieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          getFieldBuilder_.setMessage(value);
        }
        operationCase_ = 14;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
       */
      public Builder setGetField(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.Builder builderForValue) {
        if (getFieldBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          getFieldBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 14;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
       */
      public Builder mergeGetField(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField value) {
        if (getFieldBuilder_ == null) {
          if (operationCase_ == 14 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 14) {
            getFieldBuilder_.mergeFrom(value);
          }
          getFieldBuilder_.setMessage(value);
        }
        operationCase_ = 14;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
       */
      public Builder clearGetField() {
        if (getFieldBuilder_ == null) {
          if (operationCase_ == 14) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 14) {
            operationCase_ = 0;
            operation_ = null;
          }
          getFieldBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.Builder getGetFieldBuilder() {
        return getGetFieldFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetFieldOrBuilder getGetFieldOrBuilder() {
        if ((operationCase_ == 14) && (getFieldBuilder_ != null)) {
          return getFieldBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 14) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetField get_field = 14;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetFieldOrBuilder> 
          getGetFieldFieldBuilder() {
        if (getFieldBuilder_ == null) {
          if (!(operationCase_ == 14)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.getDefaultInstance();
          }
          getFieldBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetFieldOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetField) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 14;
        return getFieldBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObjectOrBuilder> getObjectBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
       */
      public boolean hasGetObject() {
        return operationCase_ == 15;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject getGetObject() {
        if (getObjectBuilder_ == null) {
          if (operationCase_ == 15) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.getDefaultInstance();
        } else {
          if (operationCase_ == 15) {
            return getObjectBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
       */
      public Builder setGetObject(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject value) {
        if (getObjectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          getObjectBuilder_.setMessage(value);
        }
        operationCase_ = 15;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
       */
      public Builder setGetObject(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.Builder builderForValue) {
        if (getObjectBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          getObjectBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 15;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
       */
      public Builder mergeGetObject(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject value) {
        if (getObjectBuilder_ == null) {
          if (operationCase_ == 15 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 15) {
            getObjectBuilder_.mergeFrom(value);
          }
          getObjectBuilder_.setMessage(value);
        }
        operationCase_ = 15;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
       */
      public Builder clearGetObject() {
        if (getObjectBuilder_ == null) {
          if (operationCase_ == 15) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 15) {
            operationCase_ = 0;
            operation_ = null;
          }
          getObjectBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.Builder getGetObjectBuilder() {
        return getGetObjectFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObjectOrBuilder getGetObjectOrBuilder() {
        if ((operationCase_ == 15) && (getObjectBuilder_ != null)) {
          return getObjectBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 15) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetObject get_object = 15;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObjectOrBuilder> 
          getGetObjectFieldBuilder() {
        if (getObjectBuilder_ == null) {
          if (!(operationCase_ == 15)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.getDefaultInstance();
          }
          getObjectBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObjectOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetObject) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 15;
        return getObjectBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValueOrBuilder> getValueBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
       */
      public boolean hasGetValue() {
        return operationCase_ == 16;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue getGetValue() {
        if (getValueBuilder_ == null) {
          if (operationCase_ == 16) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.getDefaultInstance();
        } else {
          if (operationCase_ == 16) {
            return getValueBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
       */
      public Builder setGetValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue value) {
        if (getValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          getValueBuilder_.setMessage(value);
        }
        operationCase_ = 16;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
       */
      public Builder setGetValue(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.Builder builderForValue) {
        if (getValueBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          getValueBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 16;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
       */
      public Builder mergeGetValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue value) {
        if (getValueBuilder_ == null) {
          if (operationCase_ == 16 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 16) {
            getValueBuilder_.mergeFrom(value);
          }
          getValueBuilder_.setMessage(value);
        }
        operationCase_ = 16;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
       */
      public Builder clearGetValue() {
        if (getValueBuilder_ == null) {
          if (operationCase_ == 16) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 16) {
            operationCase_ = 0;
            operation_ = null;
          }
          getValueBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.Builder getGetValueBuilder() {
        return getGetValueFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValueOrBuilder getGetValueOrBuilder() {
        if ((operationCase_ == 16) && (getValueBuilder_ != null)) {
          return getValueBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 16) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrGetValue get_value = 16;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValueOrBuilder> 
          getGetValueFieldBuilder() {
        if (getValueBuilder_ == null) {
          if (!(operationCase_ == 16)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.getDefaultInstance();
          }
          getValueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValueOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrGetValue) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 16;
        return getValueBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCallOrBuilder> instanceInitializerCallBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
       */
      public boolean hasInstanceInitializerCall() {
        return operationCase_ == 17;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall getInstanceInitializerCall() {
        if (instanceInitializerCallBuilder_ == null) {
          if (operationCase_ == 17) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.getDefaultInstance();
        } else {
          if (operationCase_ == 17) {
            return instanceInitializerCallBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
       */
      public Builder setInstanceInitializerCall(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall value) {
        if (instanceInitializerCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          instanceInitializerCallBuilder_.setMessage(value);
        }
        operationCase_ = 17;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
       */
      public Builder setInstanceInitializerCall(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.Builder builderForValue) {
        if (instanceInitializerCallBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          instanceInitializerCallBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 17;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
       */
      public Builder mergeInstanceInitializerCall(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall value) {
        if (instanceInitializerCallBuilder_ == null) {
          if (operationCase_ == 17 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 17) {
            instanceInitializerCallBuilder_.mergeFrom(value);
          }
          instanceInitializerCallBuilder_.setMessage(value);
        }
        operationCase_ = 17;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
       */
      public Builder clearInstanceInitializerCall() {
        if (instanceInitializerCallBuilder_ == null) {
          if (operationCase_ == 17) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 17) {
            operationCase_ = 0;
            operation_ = null;
          }
          instanceInitializerCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.Builder getInstanceInitializerCallBuilder() {
        return getInstanceInitializerCallFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCallOrBuilder getInstanceInitializerCallOrBuilder() {
        if ((operationCase_ == 17) && (instanceInitializerCallBuilder_ != null)) {
          return instanceInitializerCallBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 17) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrInstanceInitializerCall instance_initializer_call = 17;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCallOrBuilder> 
          getInstanceInitializerCallFieldBuilder() {
        if (instanceInitializerCallBuilder_ == null) {
          if (!(operationCase_ == 17)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.getDefaultInstance();
          }
          instanceInitializerCallBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCallOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrInstanceInitializerCall) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 17;
        return instanceInitializerCallBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReferenceOrBuilder> propertyReferenceBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
       */
      public boolean hasPropertyReference() {
        return operationCase_ == 18;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference getPropertyReference() {
        if (propertyReferenceBuilder_ == null) {
          if (operationCase_ == 18) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.getDefaultInstance();
        } else {
          if (operationCase_ == 18) {
            return propertyReferenceBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
       */
      public Builder setPropertyReference(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference value) {
        if (propertyReferenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          propertyReferenceBuilder_.setMessage(value);
        }
        operationCase_ = 18;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
       */
      public Builder setPropertyReference(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.Builder builderForValue) {
        if (propertyReferenceBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          propertyReferenceBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 18;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
       */
      public Builder mergePropertyReference(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference value) {
        if (propertyReferenceBuilder_ == null) {
          if (operationCase_ == 18 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 18) {
            propertyReferenceBuilder_.mergeFrom(value);
          }
          propertyReferenceBuilder_.setMessage(value);
        }
        operationCase_ = 18;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
       */
      public Builder clearPropertyReference() {
        if (propertyReferenceBuilder_ == null) {
          if (operationCase_ == 18) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 18) {
            operationCase_ = 0;
            operation_ = null;
          }
          propertyReferenceBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.Builder getPropertyReferenceBuilder() {
        return getPropertyReferenceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReferenceOrBuilder getPropertyReferenceOrBuilder() {
        if ((operationCase_ == 18) && (propertyReferenceBuilder_ != null)) {
          return propertyReferenceBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 18) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrPropertyReference property_reference = 18;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReferenceOrBuilder> 
          getPropertyReferenceFieldBuilder() {
        if (propertyReferenceBuilder_ == null) {
          if (!(operationCase_ == 18)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.getDefaultInstance();
          }
          propertyReferenceBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReferenceOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyReference) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 18;
        return propertyReferenceBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturnOrBuilder> returnBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
       */
      public boolean hasReturn() {
        return operationCase_ == 19;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn getReturn() {
        if (returnBuilder_ == null) {
          if (operationCase_ == 19) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.getDefaultInstance();
        } else {
          if (operationCase_ == 19) {
            return returnBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
       */
      public Builder setReturn(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn value) {
        if (returnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          returnBuilder_.setMessage(value);
        }
        operationCase_ = 19;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
       */
      public Builder setReturn(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.Builder builderForValue) {
        if (returnBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          returnBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 19;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
       */
      public Builder mergeReturn(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn value) {
        if (returnBuilder_ == null) {
          if (operationCase_ == 19 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 19) {
            returnBuilder_.mergeFrom(value);
          }
          returnBuilder_.setMessage(value);
        }
        operationCase_ = 19;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
       */
      public Builder clearReturn() {
        if (returnBuilder_ == null) {
          if (operationCase_ == 19) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 19) {
            operationCase_ = 0;
            operation_ = null;
          }
          returnBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.Builder getReturnBuilder() {
        return getReturnFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturnOrBuilder getReturnOrBuilder() {
        if ((operationCase_ == 19) && (returnBuilder_ != null)) {
          return returnBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 19) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrReturn return = 19;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturnOrBuilder> 
          getReturnFieldBuilder() {
        if (returnBuilder_ == null) {
          if (!(operationCase_ == 19)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.getDefaultInstance();
          }
          returnBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturnOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrReturn) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 19;
        return returnBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetFieldOrBuilder> setFieldBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
       */
      public boolean hasSetField() {
        return operationCase_ == 20;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField getSetField() {
        if (setFieldBuilder_ == null) {
          if (operationCase_ == 20) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.getDefaultInstance();
        } else {
          if (operationCase_ == 20) {
            return setFieldBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
       */
      public Builder setSetField(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField value) {
        if (setFieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          setFieldBuilder_.setMessage(value);
        }
        operationCase_ = 20;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
       */
      public Builder setSetField(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.Builder builderForValue) {
        if (setFieldBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          setFieldBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 20;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
       */
      public Builder mergeSetField(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField value) {
        if (setFieldBuilder_ == null) {
          if (operationCase_ == 20 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 20) {
            setFieldBuilder_.mergeFrom(value);
          }
          setFieldBuilder_.setMessage(value);
        }
        operationCase_ = 20;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
       */
      public Builder clearSetField() {
        if (setFieldBuilder_ == null) {
          if (operationCase_ == 20) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 20) {
            operationCase_ = 0;
            operation_ = null;
          }
          setFieldBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.Builder getSetFieldBuilder() {
        return getSetFieldFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetFieldOrBuilder getSetFieldOrBuilder() {
        if ((operationCase_ == 20) && (setFieldBuilder_ != null)) {
          return setFieldBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 20) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetField set_field = 20;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetFieldOrBuilder> 
          getSetFieldFieldBuilder() {
        if (setFieldBuilder_ == null) {
          if (!(operationCase_ == 20)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.getDefaultInstance();
          }
          setFieldBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetFieldOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetField) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 20;
        return setFieldBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariableOrBuilder> setVariableBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
       */
      public boolean hasSetVariable() {
        return operationCase_ == 21;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable getSetVariable() {
        if (setVariableBuilder_ == null) {
          if (operationCase_ == 21) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.getDefaultInstance();
        } else {
          if (operationCase_ == 21) {
            return setVariableBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
       */
      public Builder setSetVariable(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable value) {
        if (setVariableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          setVariableBuilder_.setMessage(value);
        }
        operationCase_ = 21;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
       */
      public Builder setSetVariable(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.Builder builderForValue) {
        if (setVariableBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          setVariableBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 21;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
       */
      public Builder mergeSetVariable(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable value) {
        if (setVariableBuilder_ == null) {
          if (operationCase_ == 21 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 21) {
            setVariableBuilder_.mergeFrom(value);
          }
          setVariableBuilder_.setMessage(value);
        }
        operationCase_ = 21;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
       */
      public Builder clearSetVariable() {
        if (setVariableBuilder_ == null) {
          if (operationCase_ == 21) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 21) {
            operationCase_ = 0;
            operation_ = null;
          }
          setVariableBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.Builder getSetVariableBuilder() {
        return getSetVariableFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariableOrBuilder getSetVariableOrBuilder() {
        if ((operationCase_ == 21) && (setVariableBuilder_ != null)) {
          return setVariableBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 21) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSetVariable set_variable = 21;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariableOrBuilder> 
          getSetVariableFieldBuilder() {
        if (setVariableBuilder_ == null) {
          if (!(operationCase_ == 21)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.getDefaultInstance();
          }
          setVariableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariableOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSetVariable) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 21;
        return setVariableBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcatOrBuilder> stringConcatBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
       */
      public boolean hasStringConcat() {
        return operationCase_ == 22;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat getStringConcat() {
        if (stringConcatBuilder_ == null) {
          if (operationCase_ == 22) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.getDefaultInstance();
        } else {
          if (operationCase_ == 22) {
            return stringConcatBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
       */
      public Builder setStringConcat(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat value) {
        if (stringConcatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          stringConcatBuilder_.setMessage(value);
        }
        operationCase_ = 22;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
       */
      public Builder setStringConcat(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.Builder builderForValue) {
        if (stringConcatBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          stringConcatBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 22;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
       */
      public Builder mergeStringConcat(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat value) {
        if (stringConcatBuilder_ == null) {
          if (operationCase_ == 22 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 22) {
            stringConcatBuilder_.mergeFrom(value);
          }
          stringConcatBuilder_.setMessage(value);
        }
        operationCase_ = 22;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
       */
      public Builder clearStringConcat() {
        if (stringConcatBuilder_ == null) {
          if (operationCase_ == 22) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 22) {
            operationCase_ = 0;
            operation_ = null;
          }
          stringConcatBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.Builder getStringConcatBuilder() {
        return getStringConcatFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcatOrBuilder getStringConcatOrBuilder() {
        if ((operationCase_ == 22) && (stringConcatBuilder_ != null)) {
          return stringConcatBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 22) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStringConcat string_concat = 22;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcatOrBuilder> 
          getStringConcatFieldBuilder() {
        if (stringConcatBuilder_ == null) {
          if (!(operationCase_ == 22)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.getDefaultInstance();
          }
          stringConcatBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcatOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStringConcat) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 22;
        return stringConcatBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrowOrBuilder> throwBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
       */
      public boolean hasThrow() {
        return operationCase_ == 23;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow getThrow() {
        if (throwBuilder_ == null) {
          if (operationCase_ == 23) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.getDefaultInstance();
        } else {
          if (operationCase_ == 23) {
            return throwBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
       */
      public Builder setThrow(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow value) {
        if (throwBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          throwBuilder_.setMessage(value);
        }
        operationCase_ = 23;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
       */
      public Builder setThrow(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.Builder builderForValue) {
        if (throwBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          throwBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 23;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
       */
      public Builder mergeThrow(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow value) {
        if (throwBuilder_ == null) {
          if (operationCase_ == 23 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 23) {
            throwBuilder_.mergeFrom(value);
          }
          throwBuilder_.setMessage(value);
        }
        operationCase_ = 23;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
       */
      public Builder clearThrow() {
        if (throwBuilder_ == null) {
          if (operationCase_ == 23) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 23) {
            operationCase_ = 0;
            operation_ = null;
          }
          throwBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.Builder getThrowBuilder() {
        return getThrowFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrowOrBuilder getThrowOrBuilder() {
        if ((operationCase_ == 23) && (throwBuilder_ != null)) {
          return throwBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 23) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrThrow throw = 23;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrowOrBuilder> 
          getThrowFieldBuilder() {
        if (throwBuilder_ == null) {
          if (!(operationCase_ == 23)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.getDefaultInstance();
          }
          throwBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrowOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrThrow) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 23;
        return throwBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTryOrBuilder> tryBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
       */
      public boolean hasTry() {
        return operationCase_ == 24;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry getTry() {
        if (tryBuilder_ == null) {
          if (operationCase_ == 24) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.getDefaultInstance();
        } else {
          if (operationCase_ == 24) {
            return tryBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
       */
      public Builder setTry(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry value) {
        if (tryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          tryBuilder_.setMessage(value);
        }
        operationCase_ = 24;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
       */
      public Builder setTry(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.Builder builderForValue) {
        if (tryBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          tryBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 24;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
       */
      public Builder mergeTry(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry value) {
        if (tryBuilder_ == null) {
          if (operationCase_ == 24 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 24) {
            tryBuilder_.mergeFrom(value);
          }
          tryBuilder_.setMessage(value);
        }
        operationCase_ = 24;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
       */
      public Builder clearTry() {
        if (tryBuilder_ == null) {
          if (operationCase_ == 24) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 24) {
            operationCase_ = 0;
            operation_ = null;
          }
          tryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.Builder getTryBuilder() {
        return getTryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTryOrBuilder getTryOrBuilder() {
        if ((operationCase_ == 24) && (tryBuilder_ != null)) {
          return tryBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 24) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTry try = 24;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTryOrBuilder> 
          getTryFieldBuilder() {
        if (tryBuilder_ == null) {
          if (!(operationCase_ == 24)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.getDefaultInstance();
          }
          tryBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTryOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTry) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 24;
        return tryBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOpOrBuilder> typeOpBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
       */
      public boolean hasTypeOp() {
        return operationCase_ == 25;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp getTypeOp() {
        if (typeOpBuilder_ == null) {
          if (operationCase_ == 25) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.getDefaultInstance();
        } else {
          if (operationCase_ == 25) {
            return typeOpBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
       */
      public Builder setTypeOp(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp value) {
        if (typeOpBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          typeOpBuilder_.setMessage(value);
        }
        operationCase_ = 25;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
       */
      public Builder setTypeOp(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.Builder builderForValue) {
        if (typeOpBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          typeOpBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 25;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
       */
      public Builder mergeTypeOp(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp value) {
        if (typeOpBuilder_ == null) {
          if (operationCase_ == 25 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 25) {
            typeOpBuilder_.mergeFrom(value);
          }
          typeOpBuilder_.setMessage(value);
        }
        operationCase_ = 25;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
       */
      public Builder clearTypeOp() {
        if (typeOpBuilder_ == null) {
          if (operationCase_ == 25) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 25) {
            operationCase_ = 0;
            operation_ = null;
          }
          typeOpBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.Builder getTypeOpBuilder() {
        return getTypeOpFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOpOrBuilder getTypeOpOrBuilder() {
        if ((operationCase_ == 25) && (typeOpBuilder_ != null)) {
          return typeOpBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 25) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeOp type_op = 25;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOpOrBuilder> 
          getTypeOpFieldBuilder() {
        if (typeOpBuilder_ == null) {
          if (!(operationCase_ == 25)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.getDefaultInstance();
          }
          typeOpBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOpOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeOp) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 25;
        return typeOpBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargOrBuilder> varargBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
       */
      public boolean hasVararg() {
        return operationCase_ == 26;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg getVararg() {
        if (varargBuilder_ == null) {
          if (operationCase_ == 26) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.getDefaultInstance();
        } else {
          if (operationCase_ == 26) {
            return varargBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
       */
      public Builder setVararg(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg value) {
        if (varargBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          varargBuilder_.setMessage(value);
        }
        operationCase_ = 26;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
       */
      public Builder setVararg(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.Builder builderForValue) {
        if (varargBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          varargBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 26;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
       */
      public Builder mergeVararg(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg value) {
        if (varargBuilder_ == null) {
          if (operationCase_ == 26 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 26) {
            varargBuilder_.mergeFrom(value);
          }
          varargBuilder_.setMessage(value);
        }
        operationCase_ = 26;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
       */
      public Builder clearVararg() {
        if (varargBuilder_ == null) {
          if (operationCase_ == 26) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 26) {
            operationCase_ = 0;
            operation_ = null;
          }
          varargBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.Builder getVarargBuilder() {
        return getVarargFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargOrBuilder getVarargOrBuilder() {
        if ((operationCase_ == 26) && (varargBuilder_ != null)) {
          return varargBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 26) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVararg vararg = 26;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargOrBuilder> 
          getVarargFieldBuilder() {
        if (varargBuilder_ == null) {
          if (!(operationCase_ == 26)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.getDefaultInstance();
          }
          varargBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVarargOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVararg) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 26;
        return varargBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhenOrBuilder> whenBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
       */
      public boolean hasWhen() {
        return operationCase_ == 27;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen getWhen() {
        if (whenBuilder_ == null) {
          if (operationCase_ == 27) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.getDefaultInstance();
        } else {
          if (operationCase_ == 27) {
            return whenBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
       */
      public Builder setWhen(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen value) {
        if (whenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          whenBuilder_.setMessage(value);
        }
        operationCase_ = 27;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
       */
      public Builder setWhen(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.Builder builderForValue) {
        if (whenBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          whenBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 27;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
       */
      public Builder mergeWhen(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen value) {
        if (whenBuilder_ == null) {
          if (operationCase_ == 27 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 27) {
            whenBuilder_.mergeFrom(value);
          }
          whenBuilder_.setMessage(value);
        }
        operationCase_ = 27;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
       */
      public Builder clearWhen() {
        if (whenBuilder_ == null) {
          if (operationCase_ == 27) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 27) {
            operationCase_ = 0;
            operation_ = null;
          }
          whenBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.Builder getWhenBuilder() {
        return getWhenFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhenOrBuilder getWhenOrBuilder() {
        if ((operationCase_ == 27) && (whenBuilder_ != null)) {
          return whenBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 27) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhen when = 27;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhenOrBuilder> 
          getWhenFieldBuilder() {
        if (whenBuilder_ == null) {
          if (!(operationCase_ == 27)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.getDefaultInstance();
          }
          whenBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhenOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhen) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 27;
        return whenBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhileOrBuilder> whileBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
       */
      public boolean hasWhile() {
        return operationCase_ == 28;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile getWhile() {
        if (whileBuilder_ == null) {
          if (operationCase_ == 28) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.getDefaultInstance();
        } else {
          if (operationCase_ == 28) {
            return whileBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
       */
      public Builder setWhile(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile value) {
        if (whileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          whileBuilder_.setMessage(value);
        }
        operationCase_ = 28;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
       */
      public Builder setWhile(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.Builder builderForValue) {
        if (whileBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          whileBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 28;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
       */
      public Builder mergeWhile(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile value) {
        if (whileBuilder_ == null) {
          if (operationCase_ == 28 &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.getDefaultInstance()) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 28) {
            whileBuilder_.mergeFrom(value);
          }
          whileBuilder_.setMessage(value);
        }
        operationCase_ = 28;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
       */
      public Builder clearWhile() {
        if (whileBuilder_ == null) {
          if (operationCase_ == 28) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 28) {
            operationCase_ = 0;
            operation_ = null;
          }
          whileBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.Builder getWhileBuilder() {
        return getWhileFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhileOrBuilder getWhileOrBuilder() {
        if ((operationCase_ == 28) && (whileBuilder_ != null)) {
          return whileBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 28) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) operation_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrWhile while = 28;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhileOrBuilder> 
          getWhileFieldBuilder() {
        if (whileBuilder_ == null) {
          if (!(operationCase_ == 28)) {
            operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.getDefaultInstance();
          }
          whileBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhileOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrWhile) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 28;
        return whileBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation)
    }

    static {
      defaultInstance = new IrOperation(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation)
  }

  public interface IrExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
     */
    boolean hasOperation();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation getOperation();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperationOrBuilder getOperationOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
     */
    boolean hasCoordinates();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression}
   */
  public static final class IrExpression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression)
      IrExpressionOrBuilder {
    // Use IrExpression.newBuilder() to construct.
    private IrExpression(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrExpression(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrExpression defaultInstance;
    public static IrExpression getDefaultInstance() {
      return defaultInstance;
    }

    public IrExpression getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrExpression(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = operation_.toBuilder();
              }
              operation_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(operation_);
                operation_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = type_.toBuilder();
              }
              type_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(type_);
                type_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = coordinates_.toBuilder();
              }
              coordinates_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(coordinates_);
                coordinates_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrExpression_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrExpression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrExpression> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrExpression>() {
      public IrExpression parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrExpression(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrExpression> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int OPERATION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation operation_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
     */
    public boolean hasOperation() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation getOperation() {
      return operation_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperationOrBuilder getOperationOrBuilder() {
      return operation_;
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex type_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType() {
      return type_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder() {
      return type_;
    }

    public static final int COORDINATES_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates coordinates_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
     */
    public boolean hasCoordinates() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates() {
      return coordinates_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder() {
      return coordinates_;
    }

    private void initFields() {
      operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.getDefaultInstance();
      type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasOperation()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCoordinates()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getOperation().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getType().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCoordinates().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, operation_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, type_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, coordinates_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, operation_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, type_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, coordinates_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrExpression_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrExpression_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOperationFieldBuilder();
          getTypeFieldBuilder();
          getCoordinatesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (operationBuilder_ == null) {
          operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.getDefaultInstance();
        } else {
          operationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (coordinatesBuilder_ == null) {
          coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
        } else {
          coordinatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrExpression_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (operationBuilder_ == null) {
          result.operation_ = operation_;
        } else {
          result.operation_ = operationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (typeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (coordinatesBuilder_ == null) {
          result.coordinates_ = coordinates_;
        } else {
          result.coordinates_ = coordinatesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) return this;
        if (other.hasOperation()) {
          mergeOperation(other.getOperation());
        }
        if (other.hasType()) {
          mergeType(other.getType());
        }
        if (other.hasCoordinates()) {
          mergeCoordinates(other.getCoordinates());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasOperation()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!hasCoordinates()) {
          
          return false;
        }
        if (!getOperation().isInitialized()) {
          
          return false;
        }
        if (!getType().isInitialized()) {
          
          return false;
        }
        if (!getCoordinates().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperationOrBuilder> operationBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
       */
      public boolean hasOperation() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation getOperation() {
        if (operationBuilder_ == null) {
          return operation_;
        } else {
          return operationBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
       */
      public Builder setOperation(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation value) {
        if (operationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          operationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
       */
      public Builder setOperation(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.Builder builderForValue) {
        if (operationBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          operationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
       */
      public Builder mergeOperation(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation value) {
        if (operationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              operation_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.getDefaultInstance()) {
            operation_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.newBuilder(operation_).mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          operationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
       */
      public Builder clearOperation() {
        if (operationBuilder_ == null) {
          operation_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.getDefaultInstance();
          onChanged();
        } else {
          operationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.Builder getOperationBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getOperationFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperationOrBuilder getOperationOrBuilder() {
        if (operationBuilder_ != null) {
          return operationBuilder_.getMessageOrBuilder();
        } else {
          return operation_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrOperation operation = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperationOrBuilder> 
          getOperationFieldBuilder() {
        if (operationBuilder_ == null) {
          operationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperation.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrOperationOrBuilder>(
                  getOperation(),
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        return operationBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> typeBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType() {
        if (typeBuilder_ == null) {
          return type_;
        } else {
          return typeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public Builder setType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          typeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public Builder setType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (typeBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public Builder mergeType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              type_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) {
            type_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder(type_).mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          typeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
          onChanged();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getTypeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          return type_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  getType(),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder> coordinatesBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
       */
      public boolean hasCoordinates() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates() {
        if (coordinatesBuilder_ == null) {
          return coordinates_;
        } else {
          return coordinatesBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
       */
      public Builder setCoordinates(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates value) {
        if (coordinatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          coordinates_ = value;
          onChanged();
        } else {
          coordinatesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
       */
      public Builder setCoordinates(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder builderForValue) {
        if (coordinatesBuilder_ == null) {
          coordinates_ = builderForValue.build();
          onChanged();
        } else {
          coordinatesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
       */
      public Builder mergeCoordinates(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates value) {
        if (coordinatesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              coordinates_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance()) {
            coordinates_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.newBuilder(coordinates_).mergeFrom(value).buildPartial();
          } else {
            coordinates_ = value;
          }
          onChanged();
        } else {
          coordinatesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
       */
      public Builder clearCoordinates() {
        if (coordinatesBuilder_ == null) {
          coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
          onChanged();
        } else {
          coordinatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder getCoordinatesBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getCoordinatesFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder() {
        if (coordinatesBuilder_ != null) {
          return coordinatesBuilder_.getMessageOrBuilder();
        } else {
          return coordinates_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder> 
          getCoordinatesFieldBuilder() {
        if (coordinatesBuilder_ == null) {
          coordinatesBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder>(
                  getCoordinates(),
                  getParentForChildren(),
                  isClean());
          coordinates_ = null;
        }
        return coordinatesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression)
    }

    static {
      defaultInstance = new IrExpression(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression)
  }

  public interface NullableIrExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    boolean hasExpression();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression}
   */
  public static final class NullableIrExpression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression)
      NullableIrExpressionOrBuilder {
    // Use NullableIrExpression.newBuilder() to construct.
    private NullableIrExpression(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NullableIrExpression(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NullableIrExpression defaultInstance;
    public static NullableIrExpression getDefaultInstance() {
      return defaultInstance;
    }

    public NullableIrExpression getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NullableIrExpression(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = expression_.toBuilder();
              }
              expression_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(expression_);
                expression_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_NullableIrExpression_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_NullableIrExpression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<NullableIrExpression> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<NullableIrExpression>() {
      public NullableIrExpression parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new NullableIrExpression(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<NullableIrExpression> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int EXPRESSION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression expression_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    public boolean hasExpression() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression() {
      return expression_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder() {
      return expression_;
    }

    private void initFields() {
      expression_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, expression_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, expression_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpressionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_NullableIrExpression_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_NullableIrExpression_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getExpressionFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (expressionBuilder_ == null) {
          expression_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          expressionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_NullableIrExpression_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (expressionBuilder_ == null) {
          result.expression_ = expression_;
        } else {
          result.expression_ = expressionBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression.getDefaultInstance()) return this;
        if (other.hasExpression()) {
          mergeExpression(other.getExpression());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasExpression()) {
          if (!getExpression().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.NullableIrExpression) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression expression_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public boolean hasExpression() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression() {
        if (expressionBuilder_ == null) {
          return expression_;
        } else {
          return expressionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          expressionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (expressionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              expression_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            expression_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(expression_).mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          expressionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public Builder clearExpression() {
        if (expressionBuilder_ == null) {
          expression_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          expressionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getExpressionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder() {
        if (expressionBuilder_ != null) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          return expression_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getExpression(),
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        return expressionBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression)
    }

    static {
      defaultInstance = new NullableIrExpression(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.NullableIrExpression)
  }

  public interface IrTypeAliasOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias}
   *
   * <pre>
   * Nothing for now.
   * </pre>
   */
  public static final class IrTypeAlias extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias)
      IrTypeAliasOrBuilder {
    // Use IrTypeAlias.newBuilder() to construct.
    private IrTypeAlias(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrTypeAlias(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrTypeAlias defaultInstance;
    public static IrTypeAlias getDefaultInstance() {
      return defaultInstance;
    }

    public IrTypeAlias getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrTypeAlias(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeAlias_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeAlias_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrTypeAlias> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrTypeAlias>() {
      public IrTypeAlias parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrTypeAlias(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrTypeAlias> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias}
     *
     * <pre>
     * Nothing for now.
     * </pre>
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAliasOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeAlias_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeAlias_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeAlias_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias)
    }

    static {
      defaultInstance = new IrTypeAlias(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias)
  }

  public interface IrFunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    boolean hasBase();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase getBase();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder getBaseOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 3;</code>
     */
    boolean hasModality();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind getModality();

    /**
     * <code>required bool is_tailrec = 4;</code>
     */
    boolean hasIsTailrec();
    /**
     * <code>required bool is_tailrec = 4;</code>
     */
    boolean getIsTailrec();

    /**
     * <code>required bool is_suspend = 5;</code>
     */
    boolean hasIsSuspend();
    /**
     * <code>required bool is_suspend = 5;</code>
     */
    boolean getIsSuspend();

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
     *
     * <pre>
     *optional UniqId corresponding_property = 7;
     * </pre>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol> 
        getOverriddenList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
     *
     * <pre>
     *optional UniqId corresponding_property = 7;
     * </pre>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getOverridden(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
     *
     * <pre>
     *optional UniqId corresponding_property = 7;
     * </pre>
     */
    int getOverriddenCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
     *
     * <pre>
     *optional UniqId corresponding_property = 7;
     * </pre>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
        getOverriddenOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
     *
     * <pre>
     *optional UniqId corresponding_property = 7;
     * </pre>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getOverriddenOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction}
   */
  public static final class IrFunction extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction)
      IrFunctionOrBuilder {
    // Use IrFunction.newBuilder() to construct.
    private IrFunction(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrFunction(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrFunction defaultInstance;
    public static IrFunction getDefaultInstance() {
      return defaultInstance;
    }

    public IrFunction getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrFunction(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = base_.toBuilder();
              }
              base_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(base_);
                base_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind value = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                modality_ = value;
              }
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              isTailrec_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              isSuspend_ = input.readBool();
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                overridden_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol>();
                mutable_bitField0_ |= 0x00000020;
              }
              overridden_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          overridden_ = java.util.Collections.unmodifiableList(overridden_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunction_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrFunction> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrFunction>() {
      public IrFunction parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrFunction(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrFunction> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int BASE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase base_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    public boolean hasBase() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase getBase() {
      return base_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder getBaseOrBuilder() {
      return base_;
    }

    public static final int MODALITY_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind modality_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 3;</code>
     */
    public boolean hasModality() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind getModality() {
      return modality_;
    }

    public static final int IS_TAILREC_FIELD_NUMBER = 4;
    private boolean isTailrec_;
    /**
     * <code>required bool is_tailrec = 4;</code>
     */
    public boolean hasIsTailrec() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool is_tailrec = 4;</code>
     */
    public boolean getIsTailrec() {
      return isTailrec_;
    }

    public static final int IS_SUSPEND_FIELD_NUMBER = 5;
    private boolean isSuspend_;
    /**
     * <code>required bool is_suspend = 5;</code>
     */
    public boolean hasIsSuspend() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool is_suspend = 5;</code>
     */
    public boolean getIsSuspend() {
      return isSuspend_;
    }

    public static final int OVERRIDDEN_FIELD_NUMBER = 6;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol> overridden_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
     *
     * <pre>
     *optional UniqId corresponding_property = 7;
     * </pre>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol> getOverriddenList() {
      return overridden_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
     *
     * <pre>
     *optional UniqId corresponding_property = 7;
     * </pre>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
        getOverriddenOrBuilderList() {
      return overridden_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
     *
     * <pre>
     *optional UniqId corresponding_property = 7;
     * </pre>
     */
    public int getOverriddenCount() {
      return overridden_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
     *
     * <pre>
     *optional UniqId corresponding_property = 7;
     * </pre>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getOverridden(int index) {
      return overridden_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
     *
     * <pre>
     *optional UniqId corresponding_property = 7;
     * </pre>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getOverriddenOrBuilder(
        int index) {
      return overridden_.get(index);
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      base_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance();
      modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
      isTailrec_ = false;
      isSuspend_ = false;
      overridden_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBase()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasModality()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsTailrec()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsSuspend()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getBase().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getOverriddenCount(); i++) {
        if (!getOverridden(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, base_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, modality_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, isTailrec_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, isSuspend_);
      }
      for (int i = 0; i < overridden_.size(); i++) {
        output.writeMessage(6, overridden_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, base_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(3, modality_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(4, isTailrec_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(5, isSuspend_);
      }
      for (int i = 0; i < overridden_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, overridden_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunction_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getBaseFieldBuilder();
          getOverriddenFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (baseBuilder_ == null) {
          base_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance();
        } else {
          baseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
        bitField0_ = (bitField0_ & ~0x00000004);
        isTailrec_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        isSuspend_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (overriddenBuilder_ == null) {
          overridden_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          overriddenBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunction_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (baseBuilder_ == null) {
          result.base_ = base_;
        } else {
          result.base_ = baseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.modality_ = modality_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.isTailrec_ = isTailrec_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isSuspend_ = isSuspend_;
        if (overriddenBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            overridden_ = java.util.Collections.unmodifiableList(overridden_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.overridden_ = overridden_;
        } else {
          result.overridden_ = overriddenBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasBase()) {
          mergeBase(other.getBase());
        }
        if (other.hasModality()) {
          setModality(other.getModality());
        }
        if (other.hasIsTailrec()) {
          setIsTailrec(other.getIsTailrec());
        }
        if (other.hasIsSuspend()) {
          setIsSuspend(other.getIsSuspend());
        }
        if (overriddenBuilder_ == null) {
          if (!other.overridden_.isEmpty()) {
            if (overridden_.isEmpty()) {
              overridden_ = other.overridden_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureOverriddenIsMutable();
              overridden_.addAll(other.overridden_);
            }
            onChanged();
          }
        } else {
          if (!other.overridden_.isEmpty()) {
            if (overriddenBuilder_.isEmpty()) {
              overriddenBuilder_.dispose();
              overriddenBuilder_ = null;
              overridden_ = other.overridden_;
              bitField0_ = (bitField0_ & ~0x00000020);
              overriddenBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOverriddenFieldBuilder() : null;
            } else {
              overriddenBuilder_.addAllMessages(other.overridden_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasBase()) {
          
          return false;
        }
        if (!hasModality()) {
          
          return false;
        }
        if (!hasIsTailrec()) {
          
          return false;
        }
        if (!hasIsSuspend()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (!getBase().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getOverriddenCount(); i++) {
          if (!getOverridden(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase base_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder> baseBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public boolean hasBase() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase getBase() {
        if (baseBuilder_ == null) {
          return base_;
        } else {
          return baseBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public Builder setBase(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase value) {
        if (baseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          base_ = value;
          onChanged();
        } else {
          baseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public Builder setBase(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder builderForValue) {
        if (baseBuilder_ == null) {
          base_ = builderForValue.build();
          onChanged();
        } else {
          baseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public Builder mergeBase(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase value) {
        if (baseBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              base_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance()) {
            base_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.newBuilder(base_).mergeFrom(value).buildPartial();
          } else {
            base_ = value;
          }
          onChanged();
        } else {
          baseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public Builder clearBase() {
        if (baseBuilder_ == null) {
          base_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance();
          onChanged();
        } else {
          baseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder getBaseBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getBaseFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder getBaseOrBuilder() {
        if (baseBuilder_ != null) {
          return baseBuilder_.getMessageOrBuilder();
        } else {
          return base_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder> 
          getBaseFieldBuilder() {
        if (baseBuilder_ == null) {
          baseBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder>(
                  getBase(),
                  getParentForChildren(),
                  isClean());
          base_ = null;
        }
        return baseBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 3;</code>
       */
      public boolean hasModality() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind getModality() {
        return modality_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 3;</code>
       */
      public Builder setModality(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        modality_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 3;</code>
       */
      public Builder clearModality() {
        bitField0_ = (bitField0_ & ~0x00000004);
        modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
        onChanged();
        return this;
      }

      private boolean isTailrec_ ;
      /**
       * <code>required bool is_tailrec = 4;</code>
       */
      public boolean hasIsTailrec() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bool is_tailrec = 4;</code>
       */
      public boolean getIsTailrec() {
        return isTailrec_;
      }
      /**
       * <code>required bool is_tailrec = 4;</code>
       */
      public Builder setIsTailrec(boolean value) {
        bitField0_ |= 0x00000008;
        isTailrec_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_tailrec = 4;</code>
       */
      public Builder clearIsTailrec() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isTailrec_ = false;
        onChanged();
        return this;
      }

      private boolean isSuspend_ ;
      /**
       * <code>required bool is_suspend = 5;</code>
       */
      public boolean hasIsSuspend() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool is_suspend = 5;</code>
       */
      public boolean getIsSuspend() {
        return isSuspend_;
      }
      /**
       * <code>required bool is_suspend = 5;</code>
       */
      public Builder setIsSuspend(boolean value) {
        bitField0_ |= 0x00000010;
        isSuspend_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_suspend = 5;</code>
       */
      public Builder clearIsSuspend() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isSuspend_ = false;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol> overridden_ =
        java.util.Collections.emptyList();
      private void ensureOverriddenIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          overridden_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol>(overridden_);
          bitField0_ |= 0x00000020;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> overriddenBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol> getOverriddenList() {
        if (overriddenBuilder_ == null) {
          return java.util.Collections.unmodifiableList(overridden_);
        } else {
          return overriddenBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public int getOverriddenCount() {
        if (overriddenBuilder_ == null) {
          return overridden_.size();
        } else {
          return overriddenBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getOverridden(int index) {
        if (overriddenBuilder_ == null) {
          return overridden_.get(index);
        } else {
          return overriddenBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public Builder setOverridden(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (overriddenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOverriddenIsMutable();
          overridden_.set(index, value);
          onChanged();
        } else {
          overriddenBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public Builder setOverridden(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (overriddenBuilder_ == null) {
          ensureOverriddenIsMutable();
          overridden_.set(index, builderForValue.build());
          onChanged();
        } else {
          overriddenBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public Builder addOverridden(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (overriddenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOverriddenIsMutable();
          overridden_.add(value);
          onChanged();
        } else {
          overriddenBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public Builder addOverridden(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (overriddenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOverriddenIsMutable();
          overridden_.add(index, value);
          onChanged();
        } else {
          overriddenBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public Builder addOverridden(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (overriddenBuilder_ == null) {
          ensureOverriddenIsMutable();
          overridden_.add(builderForValue.build());
          onChanged();
        } else {
          overriddenBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public Builder addOverridden(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (overriddenBuilder_ == null) {
          ensureOverriddenIsMutable();
          overridden_.add(index, builderForValue.build());
          onChanged();
        } else {
          overriddenBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public Builder addAllOverridden(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol> values) {
        if (overriddenBuilder_ == null) {
          ensureOverriddenIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, overridden_);
          onChanged();
        } else {
          overriddenBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public Builder clearOverridden() {
        if (overriddenBuilder_ == null) {
          overridden_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          overriddenBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public Builder removeOverridden(int index) {
        if (overriddenBuilder_ == null) {
          ensureOverriddenIsMutable();
          overridden_.remove(index);
          onChanged();
        } else {
          overriddenBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getOverriddenBuilder(
          int index) {
        return getOverriddenFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getOverriddenOrBuilder(
          int index) {
        if (overriddenBuilder_ == null) {
          return overridden_.get(index);  } else {
          return overriddenBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
           getOverriddenOrBuilderList() {
        if (overriddenBuilder_ != null) {
          return overriddenBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(overridden_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder addOverriddenBuilder() {
        return getOverriddenFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder addOverriddenBuilder(
          int index) {
        return getOverriddenFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol overridden = 6;</code>
       *
       * <pre>
       *optional UniqId corresponding_property = 7;
       * </pre>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder> 
           getOverriddenBuilderList() {
        return getOverriddenFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getOverriddenFieldBuilder() {
        if (overriddenBuilder_ == null) {
          overriddenBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  overridden_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          overridden_ = null;
        }
        return overriddenBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction)
    }

    static {
      defaultInstance = new IrFunction(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction)
  }

  public interface IrFunctionBaseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();

    /**
     * <code>required string visibility = 2;</code>
     */
    boolean hasVisibility();
    /**
     * <code>required string visibility = 2;</code>
     */
    java.lang.String getVisibility();
    /**
     * <code>required string visibility = 2;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getVisibilityBytes();

    /**
     * <code>required bool is_inline = 3;</code>
     */
    boolean hasIsInline();
    /**
     * <code>required bool is_inline = 3;</code>
     */
    boolean getIsInline();

    /**
     * <code>required bool is_external = 4;</code>
     */
    boolean hasIsExternal();
    /**
     * <code>required bool is_external = 4;</code>
     */
    boolean getIsExternal();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
     */
    boolean hasTypeParameters();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer getTypeParameters();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder getTypeParametersOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
     */
    boolean hasDispatchReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getDispatchReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getDispatchReceiverOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
     */
    boolean hasExtensionReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getExtensionReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getExtensionReceiverOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> 
        getValueParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getValueParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
     */
    int getValueParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
        getValueParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getValueParameterOrBuilder(
        int index);

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
     */
    boolean hasBody();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getBody();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getBodyOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
     */
    boolean hasReturnType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getReturnType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getReturnTypeOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase}
   */
  public static final class IrFunctionBase extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase)
      IrFunctionBaseOrBuilder {
    // Use IrFunctionBase.newBuilder() to construct.
    private IrFunctionBase(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrFunctionBase(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrFunctionBase defaultInstance;
    public static IrFunctionBase getDefaultInstance() {
      return defaultInstance;
    }

    public IrFunctionBase getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrFunctionBase(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              visibility_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              isInline_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              isExternal_ = input.readBool();
              break;
            }
            case 42: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = typeParameters_.toBuilder();
              }
              typeParameters_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(typeParameters_);
                typeParameters_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = dispatchReceiver_.toBuilder();
              }
              dispatchReceiver_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dispatchReceiver_);
                dispatchReceiver_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = extensionReceiver_.toBuilder();
              }
              extensionReceiver_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(extensionReceiver_);
                extensionReceiver_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                valueParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration>();
                mutable_bitField0_ |= 0x00000080;
              }
              valueParameter_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.PARSER, extensionRegistry));
              break;
            }
            case 74: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = body_.toBuilder();
              }
              body_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(body_);
                body_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 82: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = returnType_.toBuilder();
              }
              returnType_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(returnType_);
                returnType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          valueParameter_ = java.util.Collections.unmodifiableList(valueParameter_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionBase_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionBase_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrFunctionBase> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrFunctionBase>() {
      public IrFunctionBase parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrFunctionBase(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrFunctionBase> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>required string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int VISIBILITY_FIELD_NUMBER = 2;
    private java.lang.Object visibility_;
    /**
     * <code>required string visibility = 2;</code>
     */
    public boolean hasVisibility() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string visibility = 2;</code>
     */
    public java.lang.String getVisibility() {
      java.lang.Object ref = visibility_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          visibility_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string visibility = 2;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getVisibilityBytes() {
      java.lang.Object ref = visibility_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        visibility_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int IS_INLINE_FIELD_NUMBER = 3;
    private boolean isInline_;
    /**
     * <code>required bool is_inline = 3;</code>
     */
    public boolean hasIsInline() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool is_inline = 3;</code>
     */
    public boolean getIsInline() {
      return isInline_;
    }

    public static final int IS_EXTERNAL_FIELD_NUMBER = 4;
    private boolean isExternal_;
    /**
     * <code>required bool is_external = 4;</code>
     */
    public boolean hasIsExternal() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool is_external = 4;</code>
     */
    public boolean getIsExternal() {
      return isExternal_;
    }

    public static final int TYPE_PARAMETERS_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer typeParameters_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
     */
    public boolean hasTypeParameters() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer getTypeParameters() {
      return typeParameters_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder getTypeParametersOrBuilder() {
      return typeParameters_;
    }

    public static final int DISPATCH_RECEIVER_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration dispatchReceiver_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
     */
    public boolean hasDispatchReceiver() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getDispatchReceiver() {
      return dispatchReceiver_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getDispatchReceiverOrBuilder() {
      return dispatchReceiver_;
    }

    public static final int EXTENSION_RECEIVER_FIELD_NUMBER = 7;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration extensionReceiver_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
     */
    public boolean hasExtensionReceiver() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getExtensionReceiver() {
      return extensionReceiver_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getExtensionReceiverOrBuilder() {
      return extensionReceiver_;
    }

    public static final int VALUE_PARAMETER_FIELD_NUMBER = 8;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> valueParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> getValueParameterList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
        getValueParameterOrBuilderList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
     */
    public int getValueParameterCount() {
      return valueParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getValueParameter(int index) {
      return valueParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getValueParameterOrBuilder(
        int index) {
      return valueParameter_.get(index);
    }

    public static final int BODY_FIELD_NUMBER = 9;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement body_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
     */
    public boolean hasBody() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getBody() {
      return body_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getBodyOrBuilder() {
      return body_;
    }

    public static final int RETURN_TYPE_FIELD_NUMBER = 10;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex returnType_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
     */
    public boolean hasReturnType() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getReturnType() {
      return returnType_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getReturnTypeOrBuilder() {
      return returnType_;
    }

    private void initFields() {
      name_ = "";
      visibility_ = "";
      isInline_ = false;
      isExternal_ = false;
      typeParameters_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance();
      dispatchReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      extensionReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      valueParameter_ = java.util.Collections.emptyList();
      body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance();
      returnType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVisibility()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsInline()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsExternal()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTypeParameters()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasReturnType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTypeParameters().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasDispatchReceiver()) {
        if (!getDispatchReceiver().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExtensionReceiver()) {
        if (!getExtensionReceiver().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getValueParameterCount(); i++) {
        if (!getValueParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasBody()) {
        if (!getBody().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getReturnType().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getVisibilityBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, isInline_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, isExternal_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, typeParameters_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, dispatchReceiver_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, extensionReceiver_);
      }
      for (int i = 0; i < valueParameter_.size(); i++) {
        output.writeMessage(8, valueParameter_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(9, body_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(10, returnType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(2, getVisibilityBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(3, isInline_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(4, isExternal_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, typeParameters_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, dispatchReceiver_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(7, extensionReceiver_);
      }
      for (int i = 0; i < valueParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, valueParameter_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(9, body_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(10, returnType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionBase_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionBase_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTypeParametersFieldBuilder();
          getDispatchReceiverFieldBuilder();
          getExtensionReceiverFieldBuilder();
          getValueParameterFieldBuilder();
          getBodyFieldBuilder();
          getReturnTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        visibility_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        isInline_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        isExternal_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (typeParametersBuilder_ == null) {
          typeParameters_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance();
        } else {
          typeParametersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (dispatchReceiverBuilder_ == null) {
          dispatchReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
        } else {
          dispatchReceiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (extensionReceiverBuilder_ == null) {
          extensionReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
        } else {
          extensionReceiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (valueParameterBuilder_ == null) {
          valueParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          valueParameterBuilder_.clear();
        }
        if (bodyBuilder_ == null) {
          body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance();
        } else {
          bodyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (returnTypeBuilder_ == null) {
          returnType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
        } else {
          returnTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionBase_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.visibility_ = visibility_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isInline_ = isInline_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.isExternal_ = isExternal_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (typeParametersBuilder_ == null) {
          result.typeParameters_ = typeParameters_;
        } else {
          result.typeParameters_ = typeParametersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (dispatchReceiverBuilder_ == null) {
          result.dispatchReceiver_ = dispatchReceiver_;
        } else {
          result.dispatchReceiver_ = dispatchReceiverBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (extensionReceiverBuilder_ == null) {
          result.extensionReceiver_ = extensionReceiver_;
        } else {
          result.extensionReceiver_ = extensionReceiverBuilder_.build();
        }
        if (valueParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            valueParameter_ = java.util.Collections.unmodifiableList(valueParameter_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.valueParameter_ = valueParameter_;
        } else {
          result.valueParameter_ = valueParameterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        if (bodyBuilder_ == null) {
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        if (returnTypeBuilder_ == null) {
          result.returnType_ = returnType_;
        } else {
          result.returnType_ = returnTypeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasVisibility()) {
          bitField0_ |= 0x00000002;
          visibility_ = other.visibility_;
          onChanged();
        }
        if (other.hasIsInline()) {
          setIsInline(other.getIsInline());
        }
        if (other.hasIsExternal()) {
          setIsExternal(other.getIsExternal());
        }
        if (other.hasTypeParameters()) {
          mergeTypeParameters(other.getTypeParameters());
        }
        if (other.hasDispatchReceiver()) {
          mergeDispatchReceiver(other.getDispatchReceiver());
        }
        if (other.hasExtensionReceiver()) {
          mergeExtensionReceiver(other.getExtensionReceiver());
        }
        if (valueParameterBuilder_ == null) {
          if (!other.valueParameter_.isEmpty()) {
            if (valueParameter_.isEmpty()) {
              valueParameter_ = other.valueParameter_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureValueParameterIsMutable();
              valueParameter_.addAll(other.valueParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.valueParameter_.isEmpty()) {
            if (valueParameterBuilder_.isEmpty()) {
              valueParameterBuilder_.dispose();
              valueParameterBuilder_ = null;
              valueParameter_ = other.valueParameter_;
              bitField0_ = (bitField0_ & ~0x00000080);
              valueParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getValueParameterFieldBuilder() : null;
            } else {
              valueParameterBuilder_.addAllMessages(other.valueParameter_);
            }
          }
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        if (other.hasReturnType()) {
          mergeReturnType(other.getReturnType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (!hasVisibility()) {
          
          return false;
        }
        if (!hasIsInline()) {
          
          return false;
        }
        if (!hasIsExternal()) {
          
          return false;
        }
        if (!hasTypeParameters()) {
          
          return false;
        }
        if (!hasReturnType()) {
          
          return false;
        }
        if (!getTypeParameters().isInitialized()) {
          
          return false;
        }
        if (hasDispatchReceiver()) {
          if (!getDispatchReceiver().isInitialized()) {
            
            return false;
          }
        }
        if (hasExtensionReceiver()) {
          if (!getExtensionReceiver().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getValueParameterCount(); i++) {
          if (!getValueParameter(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasBody()) {
          if (!getBody().isInitialized()) {
            
            return false;
          }
        }
        if (!getReturnType().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object visibility_ = "";
      /**
       * <code>required string visibility = 2;</code>
       */
      public boolean hasVisibility() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string visibility = 2;</code>
       */
      public java.lang.String getVisibility() {
        java.lang.Object ref = visibility_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            visibility_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string visibility = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getVisibilityBytes() {
        java.lang.Object ref = visibility_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          visibility_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string visibility = 2;</code>
       */
      public Builder setVisibility(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        visibility_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string visibility = 2;</code>
       */
      public Builder clearVisibility() {
        bitField0_ = (bitField0_ & ~0x00000002);
        visibility_ = getDefaultInstance().getVisibility();
        onChanged();
        return this;
      }
      /**
       * <code>required string visibility = 2;</code>
       */
      public Builder setVisibilityBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        visibility_ = value;
        onChanged();
        return this;
      }

      private boolean isInline_ ;
      /**
       * <code>required bool is_inline = 3;</code>
       */
      public boolean hasIsInline() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool is_inline = 3;</code>
       */
      public boolean getIsInline() {
        return isInline_;
      }
      /**
       * <code>required bool is_inline = 3;</code>
       */
      public Builder setIsInline(boolean value) {
        bitField0_ |= 0x00000004;
        isInline_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_inline = 3;</code>
       */
      public Builder clearIsInline() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isInline_ = false;
        onChanged();
        return this;
      }

      private boolean isExternal_ ;
      /**
       * <code>required bool is_external = 4;</code>
       */
      public boolean hasIsExternal() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bool is_external = 4;</code>
       */
      public boolean getIsExternal() {
        return isExternal_;
      }
      /**
       * <code>required bool is_external = 4;</code>
       */
      public Builder setIsExternal(boolean value) {
        bitField0_ |= 0x00000008;
        isExternal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_external = 4;</code>
       */
      public Builder clearIsExternal() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isExternal_ = false;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer typeParameters_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder> typeParametersBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
       */
      public boolean hasTypeParameters() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer getTypeParameters() {
        if (typeParametersBuilder_ == null) {
          return typeParameters_;
        } else {
          return typeParametersBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
       */
      public Builder setTypeParameters(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer value) {
        if (typeParametersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeParameters_ = value;
          onChanged();
        } else {
          typeParametersBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
       */
      public Builder setTypeParameters(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder builderForValue) {
        if (typeParametersBuilder_ == null) {
          typeParameters_ = builderForValue.build();
          onChanged();
        } else {
          typeParametersBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
       */
      public Builder mergeTypeParameters(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer value) {
        if (typeParametersBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              typeParameters_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance()) {
            typeParameters_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.newBuilder(typeParameters_).mergeFrom(value).buildPartial();
          } else {
            typeParameters_ = value;
          }
          onChanged();
        } else {
          typeParametersBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
       */
      public Builder clearTypeParameters() {
        if (typeParametersBuilder_ == null) {
          typeParameters_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance();
          onChanged();
        } else {
          typeParametersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder getTypeParametersBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getTypeParametersFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder getTypeParametersOrBuilder() {
        if (typeParametersBuilder_ != null) {
          return typeParametersBuilder_.getMessageOrBuilder();
        } else {
          return typeParameters_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder> 
          getTypeParametersFieldBuilder() {
        if (typeParametersBuilder_ == null) {
          typeParametersBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder>(
                  getTypeParameters(),
                  getParentForChildren(),
                  isClean());
          typeParameters_ = null;
        }
        return typeParametersBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration dispatchReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> dispatchReceiverBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
       */
      public boolean hasDispatchReceiver() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getDispatchReceiver() {
        if (dispatchReceiverBuilder_ == null) {
          return dispatchReceiver_;
        } else {
          return dispatchReceiverBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
       */
      public Builder setDispatchReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (dispatchReceiverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dispatchReceiver_ = value;
          onChanged();
        } else {
          dispatchReceiverBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
       */
      public Builder setDispatchReceiver(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (dispatchReceiverBuilder_ == null) {
          dispatchReceiver_ = builderForValue.build();
          onChanged();
        } else {
          dispatchReceiverBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
       */
      public Builder mergeDispatchReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (dispatchReceiverBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              dispatchReceiver_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance()) {
            dispatchReceiver_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.newBuilder(dispatchReceiver_).mergeFrom(value).buildPartial();
          } else {
            dispatchReceiver_ = value;
          }
          onChanged();
        } else {
          dispatchReceiverBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
       */
      public Builder clearDispatchReceiver() {
        if (dispatchReceiverBuilder_ == null) {
          dispatchReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
          onChanged();
        } else {
          dispatchReceiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder getDispatchReceiverBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getDispatchReceiverFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getDispatchReceiverOrBuilder() {
        if (dispatchReceiverBuilder_ != null) {
          return dispatchReceiverBuilder_.getMessageOrBuilder();
        } else {
          return dispatchReceiver_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration dispatch_receiver = 6;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
          getDispatchReceiverFieldBuilder() {
        if (dispatchReceiverBuilder_ == null) {
          dispatchReceiverBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder>(
                  getDispatchReceiver(),
                  getParentForChildren(),
                  isClean());
          dispatchReceiver_ = null;
        }
        return dispatchReceiverBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration extensionReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> extensionReceiverBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
       */
      public boolean hasExtensionReceiver() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getExtensionReceiver() {
        if (extensionReceiverBuilder_ == null) {
          return extensionReceiver_;
        } else {
          return extensionReceiverBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
       */
      public Builder setExtensionReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (extensionReceiverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          extensionReceiver_ = value;
          onChanged();
        } else {
          extensionReceiverBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
       */
      public Builder setExtensionReceiver(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (extensionReceiverBuilder_ == null) {
          extensionReceiver_ = builderForValue.build();
          onChanged();
        } else {
          extensionReceiverBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
       */
      public Builder mergeExtensionReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (extensionReceiverBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              extensionReceiver_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance()) {
            extensionReceiver_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.newBuilder(extensionReceiver_).mergeFrom(value).buildPartial();
          } else {
            extensionReceiver_ = value;
          }
          onChanged();
        } else {
          extensionReceiverBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
       */
      public Builder clearExtensionReceiver() {
        if (extensionReceiverBuilder_ == null) {
          extensionReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
          onChanged();
        } else {
          extensionReceiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder getExtensionReceiverBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getExtensionReceiverFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getExtensionReceiverOrBuilder() {
        if (extensionReceiverBuilder_ != null) {
          return extensionReceiverBuilder_.getMessageOrBuilder();
        } else {
          return extensionReceiver_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration extension_receiver = 7;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
          getExtensionReceiverFieldBuilder() {
        if (extensionReceiverBuilder_ == null) {
          extensionReceiverBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder>(
                  getExtensionReceiver(),
                  getParentForChildren(),
                  isClean());
          extensionReceiver_ = null;
        }
        return extensionReceiverBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> valueParameter_ =
        java.util.Collections.emptyList();
      private void ensureValueParameterIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          valueParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration>(valueParameter_);
          bitField0_ |= 0x00000080;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> valueParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> getValueParameterList() {
        if (valueParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(valueParameter_);
        } else {
          return valueParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public int getValueParameterCount() {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.size();
        } else {
          return valueParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getValueParameter(int index) {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.get(index);
        } else {
          return valueParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.set(index, value);
          onChanged();
        } else {
          valueParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public Builder addValueParameter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.add(value);
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.add(index, value);
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public Builder addValueParameter(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.add(builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public Builder addAllValueParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> values) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, valueParameter_);
          onChanged();
        } else {
          valueParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public Builder clearValueParameter() {
        if (valueParameterBuilder_ == null) {
          valueParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          valueParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public Builder removeValueParameter(int index) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.remove(index);
          onChanged();
        } else {
          valueParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder getValueParameterBuilder(
          int index) {
        return getValueParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getValueParameterOrBuilder(
          int index) {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.get(index);  } else {
          return valueParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
           getValueParameterOrBuilderList() {
        if (valueParameterBuilder_ != null) {
          return valueParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(valueParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder addValueParameterBuilder() {
        return getValueParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder addValueParameterBuilder(
          int index) {
        return getValueParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration value_parameter = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder> 
           getValueParameterBuilderList() {
        return getValueParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
          getValueParameterFieldBuilder() {
        if (valueParameterBuilder_ == null) {
          valueParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder>(
                  valueParameter_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          valueParameter_ = null;
        }
        return valueParameterBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> bodyBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
       */
      public boolean hasBody() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getBody() {
        if (bodyBuilder_ == null) {
          return body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
       */
      public Builder setBody(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          bodyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (bodyBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              body_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance()) {
            body_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.newBuilder(body_).mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          bodyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance();
          onChanged();
        } else {
          bodyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder getBodyBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 9;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex returnType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> returnTypeBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
       */
      public boolean hasReturnType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getReturnType() {
        if (returnTypeBuilder_ == null) {
          return returnType_;
        } else {
          return returnTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
       */
      public Builder setReturnType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (returnTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          returnType_ = value;
          onChanged();
        } else {
          returnTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
       */
      public Builder setReturnType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (returnTypeBuilder_ == null) {
          returnType_ = builderForValue.build();
          onChanged();
        } else {
          returnTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
       */
      public Builder mergeReturnType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (returnTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              returnType_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) {
            returnType_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder(returnType_).mergeFrom(value).buildPartial();
          } else {
            returnType_ = value;
          }
          onChanged();
        } else {
          returnTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
       */
      public Builder clearReturnType() {
        if (returnTypeBuilder_ == null) {
          returnType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
          onChanged();
        } else {
          returnTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getReturnTypeBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getReturnTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getReturnTypeOrBuilder() {
        if (returnTypeBuilder_ != null) {
          return returnTypeBuilder_.getMessageOrBuilder();
        } else {
          return returnType_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex return_type = 10;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getReturnTypeFieldBuilder() {
        if (returnTypeBuilder_ == null) {
          returnTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  getReturnType(),
                  getParentForChildren(),
                  isClean());
          returnType_ = null;
        }
        return returnTypeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase)
    }

    static {
      defaultInstance = new IrFunctionBase(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase)
  }

  public interface IrConstructorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    boolean hasBase();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase getBase();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder getBaseOrBuilder();

    /**
     * <code>required bool is_primary = 3;</code>
     */
    boolean hasIsPrimary();
    /**
     * <code>required bool is_primary = 3;</code>
     */
    boolean getIsPrimary();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor}
   */
  public static final class IrConstructor extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor)
      IrConstructorOrBuilder {
    // Use IrConstructor.newBuilder() to construct.
    private IrConstructor(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrConstructor(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrConstructor defaultInstance;
    public static IrConstructor getDefaultInstance() {
      return defaultInstance;
    }

    public IrConstructor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrConstructor(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = base_.toBuilder();
              }
              base_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(base_);
                base_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              isPrimary_ = input.readBool();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConstructor_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConstructor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrConstructor> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrConstructor>() {
      public IrConstructor parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrConstructor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrConstructor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int BASE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase base_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    public boolean hasBase() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase getBase() {
      return base_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder getBaseOrBuilder() {
      return base_;
    }

    public static final int IS_PRIMARY_FIELD_NUMBER = 3;
    private boolean isPrimary_;
    /**
     * <code>required bool is_primary = 3;</code>
     */
    public boolean hasIsPrimary() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool is_primary = 3;</code>
     */
    public boolean getIsPrimary() {
      return isPrimary_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      base_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance();
      isPrimary_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBase()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsPrimary()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getBase().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, base_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, isPrimary_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, base_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(3, isPrimary_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructorOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConstructor_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConstructor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getBaseFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (baseBuilder_ == null) {
          base_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance();
        } else {
          baseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        isPrimary_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConstructor_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (baseBuilder_ == null) {
          result.base_ = base_;
        } else {
          result.base_ = baseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isPrimary_ = isPrimary_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasBase()) {
          mergeBase(other.getBase());
        }
        if (other.hasIsPrimary()) {
          setIsPrimary(other.getIsPrimary());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasBase()) {
          
          return false;
        }
        if (!hasIsPrimary()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (!getBase().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase base_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder> baseBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public boolean hasBase() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase getBase() {
        if (baseBuilder_ == null) {
          return base_;
        } else {
          return baseBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public Builder setBase(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase value) {
        if (baseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          base_ = value;
          onChanged();
        } else {
          baseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public Builder setBase(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder builderForValue) {
        if (baseBuilder_ == null) {
          base_ = builderForValue.build();
          onChanged();
        } else {
          baseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public Builder mergeBase(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase value) {
        if (baseBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              base_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance()) {
            base_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.newBuilder(base_).mergeFrom(value).buildPartial();
          } else {
            base_ = value;
          }
          onChanged();
        } else {
          baseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public Builder clearBase() {
        if (baseBuilder_ == null) {
          base_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.getDefaultInstance();
          onChanged();
        } else {
          baseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder getBaseBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getBaseFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder getBaseOrBuilder() {
        if (baseBuilder_ != null) {
          return baseBuilder_.getMessageOrBuilder();
        } else {
          return base_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunctionBase base = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder> 
          getBaseFieldBuilder() {
        if (baseBuilder_ == null) {
          baseBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBase.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionBaseOrBuilder>(
                  getBase(),
                  getParentForChildren(),
                  isClean());
          base_ = null;
        }
        return baseBuilder_;
      }

      private boolean isPrimary_ ;
      /**
       * <code>required bool is_primary = 3;</code>
       */
      public boolean hasIsPrimary() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool is_primary = 3;</code>
       */
      public boolean getIsPrimary() {
        return isPrimary_;
      }
      /**
       * <code>required bool is_primary = 3;</code>
       */
      public Builder setIsPrimary(boolean value) {
        bitField0_ |= 0x00000004;
        isPrimary_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_primary = 3;</code>
       */
      public Builder clearIsPrimary() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isPrimary_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor)
    }

    static {
      defaultInstance = new IrConstructor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor)
  }

  public interface IrFieldOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    boolean hasInitializer();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getInitializer();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getInitializerOrBuilder();

    /**
     * <code>required string name = 3;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 3;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();

    /**
     * <code>required string visibility = 4;</code>
     */
    boolean hasVisibility();
    /**
     * <code>required string visibility = 4;</code>
     */
    java.lang.String getVisibility();
    /**
     * <code>required string visibility = 4;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getVisibilityBytes();

    /**
     * <code>required bool is_final = 5;</code>
     */
    boolean hasIsFinal();
    /**
     * <code>required bool is_final = 5;</code>
     */
    boolean getIsFinal();

    /**
     * <code>required bool is_external = 6;</code>
     */
    boolean hasIsExternal();
    /**
     * <code>required bool is_external = 6;</code>
     */
    boolean getIsExternal();

    /**
     * <code>required bool is_static = 7;</code>
     */
    boolean hasIsStatic();
    /**
     * <code>required bool is_static = 7;</code>
     */
    boolean getIsStatic();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
     */
    boolean hasType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField}
   */
  public static final class IrField extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField)
      IrFieldOrBuilder {
    // Use IrField.newBuilder() to construct.
    private IrField(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrField(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrField defaultInstance;
    public static IrField getDefaultInstance() {
      return defaultInstance;
    }

    public IrField getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrField(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = initializer_.toBuilder();
              }
              initializer_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(initializer_);
                initializer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              name_ = bs;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              visibility_ = bs;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              isFinal_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              isExternal_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              isStatic_ = input.readBool();
              break;
            }
            case 66: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = type_.toBuilder();
              }
              type_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(type_);
                type_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrField_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrField_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrField> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrField>() {
      public IrField parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrField(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrField> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int INITIALIZER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression initializer_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    public boolean hasInitializer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getInitializer() {
      return initializer_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getInitializerOrBuilder() {
      return initializer_;
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>required string name = 3;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string name = 3;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int VISIBILITY_FIELD_NUMBER = 4;
    private java.lang.Object visibility_;
    /**
     * <code>required string visibility = 4;</code>
     */
    public boolean hasVisibility() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required string visibility = 4;</code>
     */
    public java.lang.String getVisibility() {
      java.lang.Object ref = visibility_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          visibility_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string visibility = 4;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getVisibilityBytes() {
      java.lang.Object ref = visibility_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        visibility_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int IS_FINAL_FIELD_NUMBER = 5;
    private boolean isFinal_;
    /**
     * <code>required bool is_final = 5;</code>
     */
    public boolean hasIsFinal() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool is_final = 5;</code>
     */
    public boolean getIsFinal() {
      return isFinal_;
    }

    public static final int IS_EXTERNAL_FIELD_NUMBER = 6;
    private boolean isExternal_;
    /**
     * <code>required bool is_external = 6;</code>
     */
    public boolean hasIsExternal() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bool is_external = 6;</code>
     */
    public boolean getIsExternal() {
      return isExternal_;
    }

    public static final int IS_STATIC_FIELD_NUMBER = 7;
    private boolean isStatic_;
    /**
     * <code>required bool is_static = 7;</code>
     */
    public boolean hasIsStatic() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool is_static = 7;</code>
     */
    public boolean getIsStatic() {
      return isStatic_;
    }

    public static final int TYPE_FIELD_NUMBER = 8;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex type_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType() {
      return type_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder() {
      return type_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      name_ = "";
      visibility_ = "";
      isFinal_ = false;
      isExternal_ = false;
      isStatic_ = false;
      type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVisibility()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsFinal()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsExternal()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsStatic()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasInitializer()) {
        if (!getInitializer().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getType().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, initializer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getVisibilityBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, isFinal_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, isExternal_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, isStatic_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, type_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, initializer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(4, getVisibilityBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(5, isFinal_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(6, isExternal_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(7, isStatic_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, type_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrField_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrField_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getInitializerFieldBuilder();
          getTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (initializerBuilder_ == null) {
          initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          initializerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        visibility_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        isFinal_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        isExternal_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        isStatic_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrField_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (initializerBuilder_ == null) {
          result.initializer_ = initializer_;
        } else {
          result.initializer_ = initializerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.visibility_ = visibility_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isFinal_ = isFinal_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.isExternal_ = isExternal_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isStatic_ = isStatic_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (typeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasInitializer()) {
          mergeInitializer(other.getInitializer());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasVisibility()) {
          bitField0_ |= 0x00000008;
          visibility_ = other.visibility_;
          onChanged();
        }
        if (other.hasIsFinal()) {
          setIsFinal(other.getIsFinal());
        }
        if (other.hasIsExternal()) {
          setIsExternal(other.getIsExternal());
        }
        if (other.hasIsStatic()) {
          setIsStatic(other.getIsStatic());
        }
        if (other.hasType()) {
          mergeType(other.getType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasName()) {
          
          return false;
        }
        if (!hasVisibility()) {
          
          return false;
        }
        if (!hasIsFinal()) {
          
          return false;
        }
        if (!hasIsExternal()) {
          
          return false;
        }
        if (!hasIsStatic()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (hasInitializer()) {
          if (!getInitializer().isInitialized()) {
            
            return false;
          }
        }
        if (!getType().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> initializerBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public boolean hasInitializer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getInitializer() {
        if (initializerBuilder_ == null) {
          return initializer_;
        } else {
          return initializerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public Builder setInitializer(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (initializerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          initializer_ = value;
          onChanged();
        } else {
          initializerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public Builder setInitializer(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (initializerBuilder_ == null) {
          initializer_ = builderForValue.build();
          onChanged();
        } else {
          initializerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public Builder mergeInitializer(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (initializerBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              initializer_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            initializer_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(initializer_).mergeFrom(value).buildPartial();
          } else {
            initializer_ = value;
          }
          onChanged();
        } else {
          initializerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public Builder clearInitializer() {
        if (initializerBuilder_ == null) {
          initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          initializerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getInitializerBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInitializerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getInitializerOrBuilder() {
        if (initializerBuilder_ != null) {
          return initializerBuilder_.getMessageOrBuilder();
        } else {
          return initializer_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getInitializerFieldBuilder() {
        if (initializerBuilder_ == null) {
          initializerBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getInitializer(),
                  getParentForChildren(),
                  isClean());
          initializer_ = null;
        }
        return initializerBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 3;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string name = 3;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 3;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 3;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 3;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object visibility_ = "";
      /**
       * <code>required string visibility = 4;</code>
       */
      public boolean hasVisibility() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required string visibility = 4;</code>
       */
      public java.lang.String getVisibility() {
        java.lang.Object ref = visibility_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            visibility_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string visibility = 4;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getVisibilityBytes() {
        java.lang.Object ref = visibility_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          visibility_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string visibility = 4;</code>
       */
      public Builder setVisibility(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        visibility_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string visibility = 4;</code>
       */
      public Builder clearVisibility() {
        bitField0_ = (bitField0_ & ~0x00000008);
        visibility_ = getDefaultInstance().getVisibility();
        onChanged();
        return this;
      }
      /**
       * <code>required string visibility = 4;</code>
       */
      public Builder setVisibilityBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        visibility_ = value;
        onChanged();
        return this;
      }

      private boolean isFinal_ ;
      /**
       * <code>required bool is_final = 5;</code>
       */
      public boolean hasIsFinal() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool is_final = 5;</code>
       */
      public boolean getIsFinal() {
        return isFinal_;
      }
      /**
       * <code>required bool is_final = 5;</code>
       */
      public Builder setIsFinal(boolean value) {
        bitField0_ |= 0x00000010;
        isFinal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_final = 5;</code>
       */
      public Builder clearIsFinal() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isFinal_ = false;
        onChanged();
        return this;
      }

      private boolean isExternal_ ;
      /**
       * <code>required bool is_external = 6;</code>
       */
      public boolean hasIsExternal() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bool is_external = 6;</code>
       */
      public boolean getIsExternal() {
        return isExternal_;
      }
      /**
       * <code>required bool is_external = 6;</code>
       */
      public Builder setIsExternal(boolean value) {
        bitField0_ |= 0x00000020;
        isExternal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_external = 6;</code>
       */
      public Builder clearIsExternal() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isExternal_ = false;
        onChanged();
        return this;
      }

      private boolean isStatic_ ;
      /**
       * <code>required bool is_static = 7;</code>
       */
      public boolean hasIsStatic() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool is_static = 7;</code>
       */
      public boolean getIsStatic() {
        return isStatic_;
      }
      /**
       * <code>required bool is_static = 7;</code>
       */
      public Builder setIsStatic(boolean value) {
        bitField0_ |= 0x00000040;
        isStatic_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_static = 7;</code>
       */
      public Builder clearIsStatic() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isStatic_ = false;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> typeBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType() {
        if (typeBuilder_ == null) {
          return type_;
        } else {
          return typeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
       */
      public Builder setType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          typeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
       */
      public Builder setType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (typeBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
       */
      public Builder mergeType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              type_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) {
            type_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder(type_).mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          typeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
          onChanged();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getTypeBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          return type_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 8;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  getType(),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField)
    }

    static {
      defaultInstance = new IrField(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField)
  }

  public interface IrPropertyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
     *
     * <pre>
     * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
     * </pre>
     */
    boolean hasDescriptor();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
     *
     * <pre>
     * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
     * </pre>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference getDescriptor();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
     *
     * <pre>
     * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
     * </pre>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder getDescriptorOrBuilder();

    /**
     * <code>required string name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 2;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();

    /**
     * <code>required string visibility = 3;</code>
     */
    boolean hasVisibility();
    /**
     * <code>required string visibility = 3;</code>
     */
    java.lang.String getVisibility();
    /**
     * <code>required string visibility = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getVisibilityBytes();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 4;</code>
     */
    boolean hasModality();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind getModality();

    /**
     * <code>required bool is_var = 5;</code>
     */
    boolean hasIsVar();
    /**
     * <code>required bool is_var = 5;</code>
     */
    boolean getIsVar();

    /**
     * <code>required bool is_const = 6;</code>
     */
    boolean hasIsConst();
    /**
     * <code>required bool is_const = 6;</code>
     */
    boolean getIsConst();

    /**
     * <code>required bool is_lateinit = 7;</code>
     */
    boolean hasIsLateinit();
    /**
     * <code>required bool is_lateinit = 7;</code>
     */
    boolean getIsLateinit();

    /**
     * <code>required bool is_delegated = 8;</code>
     */
    boolean hasIsDelegated();
    /**
     * <code>required bool is_delegated = 8;</code>
     */
    boolean getIsDelegated();

    /**
     * <code>required bool is_external = 9;</code>
     */
    boolean hasIsExternal();
    /**
     * <code>required bool is_external = 9;</code>
     */
    boolean getIsExternal();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
     */
    boolean hasBackingField();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField getBackingField();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder getBackingFieldOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
     */
    boolean hasGetter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getGetter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder getGetterOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
     */
    boolean hasSetter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getSetter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder getSetterOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty}
   */
  public static final class IrProperty extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty)
      IrPropertyOrBuilder {
    // Use IrProperty.newBuilder() to construct.
    private IrProperty(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrProperty(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrProperty defaultInstance;
    public static IrProperty getDefaultInstance() {
      return defaultInstance;
    }

    public IrProperty getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrProperty(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = descriptor_.toBuilder();
              }
              descriptor_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(descriptor_);
                descriptor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              name_ = bs;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              visibility_ = bs;
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind value = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                modality_ = value;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              isVar_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              isConst_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              isLateinit_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              isDelegated_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              isExternal_ = input.readBool();
              break;
            }
            case 82: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = backingField_.toBuilder();
              }
              backingField_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(backingField_);
                backingField_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = getter_.toBuilder();
              }
              getter_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getter_);
                getter_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = setter_.toBuilder();
              }
              setter_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(setter_);
                setter_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrProperty_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrProperty_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrProperty> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrProperty>() {
      public IrProperty parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrProperty(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrProperty> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DESCRIPTOR_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference descriptor_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
     *
     * <pre>
     * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
     * </pre>
     */
    public boolean hasDescriptor() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
     *
     * <pre>
     * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
     * </pre>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference getDescriptor() {
      return descriptor_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
     *
     * <pre>
     * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
     * </pre>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder getDescriptorOrBuilder() {
      return descriptor_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.Object name_;
    /**
     * <code>required string name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 2;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int VISIBILITY_FIELD_NUMBER = 3;
    private java.lang.Object visibility_;
    /**
     * <code>required string visibility = 3;</code>
     */
    public boolean hasVisibility() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string visibility = 3;</code>
     */
    public java.lang.String getVisibility() {
      java.lang.Object ref = visibility_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          visibility_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string visibility = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getVisibilityBytes() {
      java.lang.Object ref = visibility_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        visibility_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int MODALITY_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind modality_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 4;</code>
     */
    public boolean hasModality() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind getModality() {
      return modality_;
    }

    public static final int IS_VAR_FIELD_NUMBER = 5;
    private boolean isVar_;
    /**
     * <code>required bool is_var = 5;</code>
     */
    public boolean hasIsVar() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool is_var = 5;</code>
     */
    public boolean getIsVar() {
      return isVar_;
    }

    public static final int IS_CONST_FIELD_NUMBER = 6;
    private boolean isConst_;
    /**
     * <code>required bool is_const = 6;</code>
     */
    public boolean hasIsConst() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bool is_const = 6;</code>
     */
    public boolean getIsConst() {
      return isConst_;
    }

    public static final int IS_LATEINIT_FIELD_NUMBER = 7;
    private boolean isLateinit_;
    /**
     * <code>required bool is_lateinit = 7;</code>
     */
    public boolean hasIsLateinit() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool is_lateinit = 7;</code>
     */
    public boolean getIsLateinit() {
      return isLateinit_;
    }

    public static final int IS_DELEGATED_FIELD_NUMBER = 8;
    private boolean isDelegated_;
    /**
     * <code>required bool is_delegated = 8;</code>
     */
    public boolean hasIsDelegated() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required bool is_delegated = 8;</code>
     */
    public boolean getIsDelegated() {
      return isDelegated_;
    }

    public static final int IS_EXTERNAL_FIELD_NUMBER = 9;
    private boolean isExternal_;
    /**
     * <code>required bool is_external = 9;</code>
     */
    public boolean hasIsExternal() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required bool is_external = 9;</code>
     */
    public boolean getIsExternal() {
      return isExternal_;
    }

    public static final int BACKING_FIELD_FIELD_NUMBER = 10;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField backingField_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
     */
    public boolean hasBackingField() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField getBackingField() {
      return backingField_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder getBackingFieldOrBuilder() {
      return backingField_;
    }

    public static final int GETTER_FIELD_NUMBER = 11;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getter_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
     */
    public boolean hasGetter() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getGetter() {
      return getter_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder getGetterOrBuilder() {
      return getter_;
    }

    public static final int SETTER_FIELD_NUMBER = 12;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction setter_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
     */
    public boolean hasSetter() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getSetter() {
      return setter_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder getSetterOrBuilder() {
      return setter_;
    }

    private void initFields() {
      descriptor_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance();
      name_ = "";
      visibility_ = "";
      modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
      isVar_ = false;
      isConst_ = false;
      isLateinit_ = false;
      isDelegated_ = false;
      isExternal_ = false;
      backingField_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
      getter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
      setter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVisibility()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasModality()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsVar()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsConst()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsLateinit()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsDelegated()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsExternal()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasDescriptor()) {
        if (!getDescriptor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasBackingField()) {
        if (!getBackingField().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGetter()) {
        if (!getGetter().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSetter()) {
        if (!getSetter().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, descriptor_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getVisibilityBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, modality_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, isVar_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, isConst_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, isLateinit_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, isDelegated_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, isExternal_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, backingField_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, getter_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, setter_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, descriptor_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(3, getVisibilityBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(4, modality_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(5, isVar_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(6, isConst_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(7, isLateinit_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(8, isDelegated_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(9, isExternal_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(10, backingField_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(11, getter_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(12, setter_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrProperty_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrProperty_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDescriptorFieldBuilder();
          getBackingFieldFieldBuilder();
          getGetterFieldBuilder();
          getSetterFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (descriptorBuilder_ == null) {
          descriptor_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance();
        } else {
          descriptorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        visibility_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
        bitField0_ = (bitField0_ & ~0x00000008);
        isVar_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        isConst_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        isLateinit_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        isDelegated_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        isExternal_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        if (backingFieldBuilder_ == null) {
          backingField_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
        } else {
          backingFieldBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (getterBuilder_ == null) {
          getter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
        } else {
          getterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (setterBuilder_ == null) {
          setter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
        } else {
          setterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrProperty_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (descriptorBuilder_ == null) {
          result.descriptor_ = descriptor_;
        } else {
          result.descriptor_ = descriptorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.visibility_ = visibility_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.modality_ = modality_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isVar_ = isVar_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.isConst_ = isConst_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isLateinit_ = isLateinit_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.isDelegated_ = isDelegated_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.isExternal_ = isExternal_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (backingFieldBuilder_ == null) {
          result.backingField_ = backingField_;
        } else {
          result.backingField_ = backingFieldBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (getterBuilder_ == null) {
          result.getter_ = getter_;
        } else {
          result.getter_ = getterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (setterBuilder_ == null) {
          result.setter_ = setter_;
        } else {
          result.setter_ = setterBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.getDefaultInstance()) return this;
        if (other.hasDescriptor()) {
          mergeDescriptor(other.getDescriptor());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000002;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasVisibility()) {
          bitField0_ |= 0x00000004;
          visibility_ = other.visibility_;
          onChanged();
        }
        if (other.hasModality()) {
          setModality(other.getModality());
        }
        if (other.hasIsVar()) {
          setIsVar(other.getIsVar());
        }
        if (other.hasIsConst()) {
          setIsConst(other.getIsConst());
        }
        if (other.hasIsLateinit()) {
          setIsLateinit(other.getIsLateinit());
        }
        if (other.hasIsDelegated()) {
          setIsDelegated(other.getIsDelegated());
        }
        if (other.hasIsExternal()) {
          setIsExternal(other.getIsExternal());
        }
        if (other.hasBackingField()) {
          mergeBackingField(other.getBackingField());
        }
        if (other.hasGetter()) {
          mergeGetter(other.getGetter());
        }
        if (other.hasSetter()) {
          mergeSetter(other.getSetter());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (!hasVisibility()) {
          
          return false;
        }
        if (!hasModality()) {
          
          return false;
        }
        if (!hasIsVar()) {
          
          return false;
        }
        if (!hasIsConst()) {
          
          return false;
        }
        if (!hasIsLateinit()) {
          
          return false;
        }
        if (!hasIsDelegated()) {
          
          return false;
        }
        if (!hasIsExternal()) {
          
          return false;
        }
        if (hasDescriptor()) {
          if (!getDescriptor().isInitialized()) {
            
            return false;
          }
        }
        if (hasBackingField()) {
          if (!getBackingField().isInitialized()) {
            
            return false;
          }
        }
        if (hasGetter()) {
          if (!getGetter().isInitialized()) {
            
            return false;
          }
        }
        if (hasSetter()) {
          if (!getSetter().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference descriptor_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder> descriptorBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
       *
       * <pre>
       * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
       * </pre>
       */
      public boolean hasDescriptor() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
       *
       * <pre>
       * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
       * </pre>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference getDescriptor() {
        if (descriptorBuilder_ == null) {
          return descriptor_;
        } else {
          return descriptorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
       *
       * <pre>
       * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
       * </pre>
       */
      public Builder setDescriptor(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference value) {
        if (descriptorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          descriptor_ = value;
          onChanged();
        } else {
          descriptorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
       *
       * <pre>
       * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
       * </pre>
       */
      public Builder setDescriptor(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder builderForValue) {
        if (descriptorBuilder_ == null) {
          descriptor_ = builderForValue.build();
          onChanged();
        } else {
          descriptorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
       *
       * <pre>
       * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
       * </pre>
       */
      public Builder mergeDescriptor(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference value) {
        if (descriptorBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              descriptor_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance()) {
            descriptor_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.newBuilder(descriptor_).mergeFrom(value).buildPartial();
          } else {
            descriptor_ = value;
          }
          onChanged();
        } else {
          descriptorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
       *
       * <pre>
       * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
       * </pre>
       */
      public Builder clearDescriptor() {
        if (descriptorBuilder_ == null) {
          descriptor_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.getDefaultInstance();
          onChanged();
        } else {
          descriptorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
       *
       * <pre>
       * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
       * </pre>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder getDescriptorBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getDescriptorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
       *
       * <pre>
       * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
       * </pre>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder getDescriptorOrBuilder() {
        if (descriptorBuilder_ != null) {
          return descriptorBuilder_.getMessageOrBuilder();
        } else {
          return descriptor_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorReference descriptor = 1;</code>
       *
       * <pre>
       * IrProperty doesn't have a symbol at all. Preserve this rudiment for now.
       * </pre>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder> 
          getDescriptorFieldBuilder() {
        if (descriptorBuilder_ == null) {
          descriptorBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReference.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.DescriptorReferenceOrBuilder>(
                  getDescriptor(),
                  getParentForChildren(),
                  isClean());
          descriptor_ = null;
        }
        return descriptorBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object visibility_ = "";
      /**
       * <code>required string visibility = 3;</code>
       */
      public boolean hasVisibility() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string visibility = 3;</code>
       */
      public java.lang.String getVisibility() {
        java.lang.Object ref = visibility_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            visibility_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string visibility = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getVisibilityBytes() {
        java.lang.Object ref = visibility_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          visibility_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string visibility = 3;</code>
       */
      public Builder setVisibility(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        visibility_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string visibility = 3;</code>
       */
      public Builder clearVisibility() {
        bitField0_ = (bitField0_ & ~0x00000004);
        visibility_ = getDefaultInstance().getVisibility();
        onChanged();
        return this;
      }
      /**
       * <code>required string visibility = 3;</code>
       */
      public Builder setVisibilityBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        visibility_ = value;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 4;</code>
       */
      public boolean hasModality() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind getModality() {
        return modality_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 4;</code>
       */
      public Builder setModality(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        modality_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 4;</code>
       */
      public Builder clearModality() {
        bitField0_ = (bitField0_ & ~0x00000008);
        modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
        onChanged();
        return this;
      }

      private boolean isVar_ ;
      /**
       * <code>required bool is_var = 5;</code>
       */
      public boolean hasIsVar() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool is_var = 5;</code>
       */
      public boolean getIsVar() {
        return isVar_;
      }
      /**
       * <code>required bool is_var = 5;</code>
       */
      public Builder setIsVar(boolean value) {
        bitField0_ |= 0x00000010;
        isVar_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_var = 5;</code>
       */
      public Builder clearIsVar() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isVar_ = false;
        onChanged();
        return this;
      }

      private boolean isConst_ ;
      /**
       * <code>required bool is_const = 6;</code>
       */
      public boolean hasIsConst() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bool is_const = 6;</code>
       */
      public boolean getIsConst() {
        return isConst_;
      }
      /**
       * <code>required bool is_const = 6;</code>
       */
      public Builder setIsConst(boolean value) {
        bitField0_ |= 0x00000020;
        isConst_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_const = 6;</code>
       */
      public Builder clearIsConst() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isConst_ = false;
        onChanged();
        return this;
      }

      private boolean isLateinit_ ;
      /**
       * <code>required bool is_lateinit = 7;</code>
       */
      public boolean hasIsLateinit() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool is_lateinit = 7;</code>
       */
      public boolean getIsLateinit() {
        return isLateinit_;
      }
      /**
       * <code>required bool is_lateinit = 7;</code>
       */
      public Builder setIsLateinit(boolean value) {
        bitField0_ |= 0x00000040;
        isLateinit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_lateinit = 7;</code>
       */
      public Builder clearIsLateinit() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isLateinit_ = false;
        onChanged();
        return this;
      }

      private boolean isDelegated_ ;
      /**
       * <code>required bool is_delegated = 8;</code>
       */
      public boolean hasIsDelegated() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required bool is_delegated = 8;</code>
       */
      public boolean getIsDelegated() {
        return isDelegated_;
      }
      /**
       * <code>required bool is_delegated = 8;</code>
       */
      public Builder setIsDelegated(boolean value) {
        bitField0_ |= 0x00000080;
        isDelegated_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_delegated = 8;</code>
       */
      public Builder clearIsDelegated() {
        bitField0_ = (bitField0_ & ~0x00000080);
        isDelegated_ = false;
        onChanged();
        return this;
      }

      private boolean isExternal_ ;
      /**
       * <code>required bool is_external = 9;</code>
       */
      public boolean hasIsExternal() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required bool is_external = 9;</code>
       */
      public boolean getIsExternal() {
        return isExternal_;
      }
      /**
       * <code>required bool is_external = 9;</code>
       */
      public Builder setIsExternal(boolean value) {
        bitField0_ |= 0x00000100;
        isExternal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_external = 9;</code>
       */
      public Builder clearIsExternal() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isExternal_ = false;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField backingField_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder> backingFieldBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
       */
      public boolean hasBackingField() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField getBackingField() {
        if (backingFieldBuilder_ == null) {
          return backingField_;
        } else {
          return backingFieldBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
       */
      public Builder setBackingField(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField value) {
        if (backingFieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          backingField_ = value;
          onChanged();
        } else {
          backingFieldBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
       */
      public Builder setBackingField(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder builderForValue) {
        if (backingFieldBuilder_ == null) {
          backingField_ = builderForValue.build();
          onChanged();
        } else {
          backingFieldBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
       */
      public Builder mergeBackingField(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField value) {
        if (backingFieldBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              backingField_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance()) {
            backingField_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.newBuilder(backingField_).mergeFrom(value).buildPartial();
          } else {
            backingField_ = value;
          }
          onChanged();
        } else {
          backingFieldBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
       */
      public Builder clearBackingField() {
        if (backingFieldBuilder_ == null) {
          backingField_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
          onChanged();
        } else {
          backingFieldBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder getBackingFieldBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getBackingFieldFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder getBackingFieldOrBuilder() {
        if (backingFieldBuilder_ != null) {
          return backingFieldBuilder_.getMessageOrBuilder();
        } else {
          return backingField_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField backing_field = 10;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder> 
          getBackingFieldFieldBuilder() {
        if (backingFieldBuilder_ == null) {
          backingFieldBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder>(
                  getBackingField(),
                  getParentForChildren(),
                  isClean());
          backingField_ = null;
        }
        return backingFieldBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder> getterBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
       */
      public boolean hasGetter() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getGetter() {
        if (getterBuilder_ == null) {
          return getter_;
        } else {
          return getterBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
       */
      public Builder setGetter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction value) {
        if (getterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getter_ = value;
          onChanged();
        } else {
          getterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
       */
      public Builder setGetter(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder builderForValue) {
        if (getterBuilder_ == null) {
          getter_ = builderForValue.build();
          onChanged();
        } else {
          getterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
       */
      public Builder mergeGetter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction value) {
        if (getterBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              getter_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance()) {
            getter_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.newBuilder(getter_).mergeFrom(value).buildPartial();
          } else {
            getter_ = value;
          }
          onChanged();
        } else {
          getterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
       */
      public Builder clearGetter() {
        if (getterBuilder_ == null) {
          getter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
          onChanged();
        } else {
          getterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder getGetterBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getGetterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder getGetterOrBuilder() {
        if (getterBuilder_ != null) {
          return getterBuilder_.getMessageOrBuilder();
        } else {
          return getter_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction getter = 11;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder> 
          getGetterFieldBuilder() {
        if (getterBuilder_ == null) {
          getterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder>(
                  getGetter(),
                  getParentForChildren(),
                  isClean());
          getter_ = null;
        }
        return getterBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction setter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder> setterBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
       */
      public boolean hasSetter() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getSetter() {
        if (setterBuilder_ == null) {
          return setter_;
        } else {
          return setterBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
       */
      public Builder setSetter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction value) {
        if (setterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          setter_ = value;
          onChanged();
        } else {
          setterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
       */
      public Builder setSetter(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder builderForValue) {
        if (setterBuilder_ == null) {
          setter_ = builderForValue.build();
          onChanged();
        } else {
          setterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
       */
      public Builder mergeSetter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction value) {
        if (setterBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              setter_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance()) {
            setter_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.newBuilder(setter_).mergeFrom(value).buildPartial();
          } else {
            setter_ = value;
          }
          onChanged();
        } else {
          setterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
       */
      public Builder clearSetter() {
        if (setterBuilder_ == null) {
          setter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
          onChanged();
        } else {
          setterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder getSetterBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getSetterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder getSetterOrBuilder() {
        if (setterBuilder_ != null) {
          return setterBuilder_.getMessageOrBuilder();
        } else {
          return setter_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction setter = 12;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder> 
          getSetterFieldBuilder() {
        if (setterBuilder_ == null) {
          setterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder>(
                  getSetter(),
                  getParentForChildren(),
                  isClean());
          setter_ = null;
        }
        return setterBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty)
    }

    static {
      defaultInstance = new IrProperty(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty)
  }

  public interface IrVariableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
     */
    boolean hasType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder();

    /**
     * <code>required bool is_var = 4;</code>
     */
    boolean hasIsVar();
    /**
     * <code>required bool is_var = 4;</code>
     */
    boolean getIsVar();

    /**
     * <code>required bool is_const = 5;</code>
     */
    boolean hasIsConst();
    /**
     * <code>required bool is_const = 5;</code>
     */
    boolean getIsConst();

    /**
     * <code>required bool is_lateinit = 6;</code>
     */
    boolean hasIsLateinit();
    /**
     * <code>required bool is_lateinit = 6;</code>
     */
    boolean getIsLateinit();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
     */
    boolean hasInitializer();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getInitializer();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getInitializerOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable}
   */
  public static final class IrVariable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable)
      IrVariableOrBuilder {
    // Use IrVariable.newBuilder() to construct.
    private IrVariable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrVariable(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrVariable defaultInstance;
    public static IrVariable getDefaultInstance() {
      return defaultInstance;
    }

    public IrVariable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrVariable(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = type_.toBuilder();
              }
              type_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(type_);
                type_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              isVar_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              isConst_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              isLateinit_ = input.readBool();
              break;
            }
            case 58: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = initializer_.toBuilder();
              }
              initializer_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(initializer_);
                initializer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVariable_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVariable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrVariable> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrVariable>() {
      public IrVariable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrVariable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrVariable> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>required string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int SYMBOL_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex type_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType() {
      return type_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder() {
      return type_;
    }

    public static final int IS_VAR_FIELD_NUMBER = 4;
    private boolean isVar_;
    /**
     * <code>required bool is_var = 4;</code>
     */
    public boolean hasIsVar() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool is_var = 4;</code>
     */
    public boolean getIsVar() {
      return isVar_;
    }

    public static final int IS_CONST_FIELD_NUMBER = 5;
    private boolean isConst_;
    /**
     * <code>required bool is_const = 5;</code>
     */
    public boolean hasIsConst() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool is_const = 5;</code>
     */
    public boolean getIsConst() {
      return isConst_;
    }

    public static final int IS_LATEINIT_FIELD_NUMBER = 6;
    private boolean isLateinit_;
    /**
     * <code>required bool is_lateinit = 6;</code>
     */
    public boolean hasIsLateinit() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bool is_lateinit = 6;</code>
     */
    public boolean getIsLateinit() {
      return isLateinit_;
    }

    public static final int INITIALIZER_FIELD_NUMBER = 7;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression initializer_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
     */
    public boolean hasInitializer() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getInitializer() {
      return initializer_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getInitializerOrBuilder() {
      return initializer_;
    }

    private void initFields() {
      name_ = "";
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      isVar_ = false;
      isConst_ = false;
      isLateinit_ = false;
      initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsVar()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsConst()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsLateinit()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getType().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasInitializer()) {
        if (!getInitializer().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, symbol_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, type_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, isVar_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, isConst_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, isLateinit_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, initializer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, symbol_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, type_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(4, isVar_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(5, isConst_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(6, isLateinit_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(7, initializer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVariable_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVariable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getTypeFieldBuilder();
          getInitializerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        isVar_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        isConst_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        isLateinit_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (initializerBuilder_ == null) {
          initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          initializerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVariable_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (typeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.isVar_ = isVar_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isConst_ = isConst_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.isLateinit_ = isLateinit_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (initializerBuilder_ == null) {
          result.initializer_ = initializer_;
        } else {
          result.initializer_ = initializerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasType()) {
          mergeType(other.getType());
        }
        if (other.hasIsVar()) {
          setIsVar(other.getIsVar());
        }
        if (other.hasIsConst()) {
          setIsConst(other.getIsConst());
        }
        if (other.hasIsLateinit()) {
          setIsLateinit(other.getIsLateinit());
        }
        if (other.hasInitializer()) {
          mergeInitializer(other.getInitializer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!hasIsVar()) {
          
          return false;
        }
        if (!hasIsConst()) {
          
          return false;
        }
        if (!hasIsLateinit()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (!getType().isInitialized()) {
          
          return false;
        }
        if (hasInitializer()) {
          if (!getInitializer().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> typeBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType() {
        if (typeBuilder_ == null) {
          return type_;
        } else {
          return typeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
       */
      public Builder setType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          typeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
       */
      public Builder setType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (typeBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
       */
      public Builder mergeType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              type_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) {
            type_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder(type_).mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          typeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
          onChanged();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getTypeBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          return type_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  getType(),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      private boolean isVar_ ;
      /**
       * <code>required bool is_var = 4;</code>
       */
      public boolean hasIsVar() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bool is_var = 4;</code>
       */
      public boolean getIsVar() {
        return isVar_;
      }
      /**
       * <code>required bool is_var = 4;</code>
       */
      public Builder setIsVar(boolean value) {
        bitField0_ |= 0x00000008;
        isVar_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_var = 4;</code>
       */
      public Builder clearIsVar() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isVar_ = false;
        onChanged();
        return this;
      }

      private boolean isConst_ ;
      /**
       * <code>required bool is_const = 5;</code>
       */
      public boolean hasIsConst() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool is_const = 5;</code>
       */
      public boolean getIsConst() {
        return isConst_;
      }
      /**
       * <code>required bool is_const = 5;</code>
       */
      public Builder setIsConst(boolean value) {
        bitField0_ |= 0x00000010;
        isConst_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_const = 5;</code>
       */
      public Builder clearIsConst() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isConst_ = false;
        onChanged();
        return this;
      }

      private boolean isLateinit_ ;
      /**
       * <code>required bool is_lateinit = 6;</code>
       */
      public boolean hasIsLateinit() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bool is_lateinit = 6;</code>
       */
      public boolean getIsLateinit() {
        return isLateinit_;
      }
      /**
       * <code>required bool is_lateinit = 6;</code>
       */
      public Builder setIsLateinit(boolean value) {
        bitField0_ |= 0x00000020;
        isLateinit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_lateinit = 6;</code>
       */
      public Builder clearIsLateinit() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isLateinit_ = false;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> initializerBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
       */
      public boolean hasInitializer() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getInitializer() {
        if (initializerBuilder_ == null) {
          return initializer_;
        } else {
          return initializerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
       */
      public Builder setInitializer(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (initializerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          initializer_ = value;
          onChanged();
        } else {
          initializerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
       */
      public Builder setInitializer(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (initializerBuilder_ == null) {
          initializer_ = builderForValue.build();
          onChanged();
        } else {
          initializerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
       */
      public Builder mergeInitializer(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (initializerBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              initializer_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            initializer_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(initializer_).mergeFrom(value).buildPartial();
          } else {
            initializer_ = value;
          }
          onChanged();
        } else {
          initializerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
       */
      public Builder clearInitializer() {
        if (initializerBuilder_ == null) {
          initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          initializerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getInitializerBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getInitializerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getInitializerOrBuilder() {
        if (initializerBuilder_ != null) {
          return initializerBuilder_.getMessageOrBuilder();
        } else {
          return initializer_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 7;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getInitializerFieldBuilder() {
        if (initializerBuilder_ == null) {
          initializerBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getInitializer(),
                  getParentForChildren(),
                  isClean());
          initializer_ = null;
        }
        return initializerBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable)
    }

    static {
      defaultInstance = new IrVariable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable)
  }

  public interface IrValueParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required string name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 2;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();

    /**
     * <code>required int32 index = 3;</code>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 3;</code>
     */
    int getIndex();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
     */
    boolean hasType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
     */
    boolean hasVarargElementType();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getVarargElementType();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getVarargElementTypeOrBuilder();

    /**
     * <code>required bool is_crossinline = 6;</code>
     */
    boolean hasIsCrossinline();
    /**
     * <code>required bool is_crossinline = 6;</code>
     */
    boolean getIsCrossinline();

    /**
     * <code>required bool is_noinline = 7;</code>
     */
    boolean hasIsNoinline();
    /**
     * <code>required bool is_noinline = 7;</code>
     */
    boolean getIsNoinline();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
     */
    boolean hasDefaultValue();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getDefaultValue();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getDefaultValueOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter}
   */
  public static final class IrValueParameter extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter)
      IrValueParameterOrBuilder {
    // Use IrValueParameter.newBuilder() to construct.
    private IrValueParameter(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrValueParameter(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrValueParameter defaultInstance;
    public static IrValueParameter getDefaultInstance() {
      return defaultInstance;
    }

    public IrValueParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrValueParameter(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              name_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              index_ = input.readInt32();
              break;
            }
            case 34: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = type_.toBuilder();
              }
              type_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(type_);
                type_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = varargElementType_.toBuilder();
              }
              varargElementType_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(varargElementType_);
                varargElementType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              isCrossinline_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              isNoinline_ = input.readBool();
              break;
            }
            case 66: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = defaultValue_.toBuilder();
              }
              defaultValue_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(defaultValue_);
                defaultValue_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrValueParameter_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrValueParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrValueParameter> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrValueParameter>() {
      public IrValueParameter parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrValueParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrValueParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.Object name_;
    /**
     * <code>required string name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 2;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int INDEX_FIELD_NUMBER = 3;
    private int index_;
    /**
     * <code>required int32 index = 3;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 index = 3;</code>
     */
    public int getIndex() {
      return index_;
    }

    public static final int TYPE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex type_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType() {
      return type_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder() {
      return type_;
    }

    public static final int VARARG_ELEMENT_TYPE_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex varargElementType_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
     */
    public boolean hasVarargElementType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getVarargElementType() {
      return varargElementType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getVarargElementTypeOrBuilder() {
      return varargElementType_;
    }

    public static final int IS_CROSSINLINE_FIELD_NUMBER = 6;
    private boolean isCrossinline_;
    /**
     * <code>required bool is_crossinline = 6;</code>
     */
    public boolean hasIsCrossinline() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bool is_crossinline = 6;</code>
     */
    public boolean getIsCrossinline() {
      return isCrossinline_;
    }

    public static final int IS_NOINLINE_FIELD_NUMBER = 7;
    private boolean isNoinline_;
    /**
     * <code>required bool is_noinline = 7;</code>
     */
    public boolean hasIsNoinline() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool is_noinline = 7;</code>
     */
    public boolean getIsNoinline() {
      return isNoinline_;
    }

    public static final int DEFAULT_VALUE_FIELD_NUMBER = 8;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression defaultValue_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
     */
    public boolean hasDefaultValue() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getDefaultValue() {
      return defaultValue_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getDefaultValueOrBuilder() {
      return defaultValue_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      name_ = "";
      index_ = 0;
      type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      varargElementType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      isCrossinline_ = false;
      isNoinline_ = false;
      defaultValue_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsCrossinline()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsNoinline()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getType().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasVarargElementType()) {
        if (!getVarargElementType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDefaultValue()) {
        if (!getDefaultValue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, index_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, type_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, varargElementType_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, isCrossinline_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, isNoinline_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, defaultValue_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(3, index_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, type_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, varargElementType_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(6, isCrossinline_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(7, isNoinline_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, defaultValue_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameterOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrValueParameter_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrValueParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getTypeFieldBuilder();
          getVarargElementTypeFieldBuilder();
          getDefaultValueFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (varargElementTypeBuilder_ == null) {
          varargElementType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
        } else {
          varargElementTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        isCrossinline_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        isNoinline_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (defaultValueBuilder_ == null) {
          defaultValue_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          defaultValueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrValueParameter_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (typeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (varargElementTypeBuilder_ == null) {
          result.varargElementType_ = varargElementType_;
        } else {
          result.varargElementType_ = varargElementTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.isCrossinline_ = isCrossinline_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isNoinline_ = isNoinline_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (defaultValueBuilder_ == null) {
          result.defaultValue_ = defaultValue_;
        } else {
          result.defaultValue_ = defaultValueBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000002;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasType()) {
          mergeType(other.getType());
        }
        if (other.hasVarargElementType()) {
          mergeVarargElementType(other.getVarargElementType());
        }
        if (other.hasIsCrossinline()) {
          setIsCrossinline(other.getIsCrossinline());
        }
        if (other.hasIsNoinline()) {
          setIsNoinline(other.getIsNoinline());
        }
        if (other.hasDefaultValue()) {
          mergeDefaultValue(other.getDefaultValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasName()) {
          
          return false;
        }
        if (!hasIndex()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!hasIsCrossinline()) {
          
          return false;
        }
        if (!hasIsNoinline()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (!getType().isInitialized()) {
          
          return false;
        }
        if (hasVarargElementType()) {
          if (!getVarargElementType().isInitialized()) {
            
            return false;
          }
        }
        if (hasDefaultValue()) {
          if (!getDefaultValue().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }

      private int index_ ;
      /**
       * <code>required int32 index = 3;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 index = 3;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 3;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000004;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 3;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        index_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> typeBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getType() {
        if (typeBuilder_ == null) {
          return type_;
        } else {
          return typeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
       */
      public Builder setType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          typeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
       */
      public Builder setType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (typeBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
       */
      public Builder mergeType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              type_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) {
            type_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder(type_).mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          typeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
          onChanged();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getTypeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getTypeOrBuilder() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          return type_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex type = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  getType(),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex varargElementType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> varargElementTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
       */
      public boolean hasVarargElementType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getVarargElementType() {
        if (varargElementTypeBuilder_ == null) {
          return varargElementType_;
        } else {
          return varargElementTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
       */
      public Builder setVarargElementType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (varargElementTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          varargElementType_ = value;
          onChanged();
        } else {
          varargElementTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
       */
      public Builder setVarargElementType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (varargElementTypeBuilder_ == null) {
          varargElementType_ = builderForValue.build();
          onChanged();
        } else {
          varargElementTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
       */
      public Builder mergeVarargElementType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (varargElementTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              varargElementType_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance()) {
            varargElementType_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.newBuilder(varargElementType_).mergeFrom(value).buildPartial();
          } else {
            varargElementType_ = value;
          }
          onChanged();
        } else {
          varargElementTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
       */
      public Builder clearVarargElementType() {
        if (varargElementTypeBuilder_ == null) {
          varargElementType_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance();
          onChanged();
        } else {
          varargElementTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getVarargElementTypeBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getVarargElementTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getVarargElementTypeOrBuilder() {
        if (varargElementTypeBuilder_ != null) {
          return varargElementTypeBuilder_.getMessageOrBuilder();
        } else {
          return varargElementType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex vararg_element_type = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getVarargElementTypeFieldBuilder() {
        if (varargElementTypeBuilder_ == null) {
          varargElementTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  getVarargElementType(),
                  getParentForChildren(),
                  isClean());
          varargElementType_ = null;
        }
        return varargElementTypeBuilder_;
      }

      private boolean isCrossinline_ ;
      /**
       * <code>required bool is_crossinline = 6;</code>
       */
      public boolean hasIsCrossinline() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bool is_crossinline = 6;</code>
       */
      public boolean getIsCrossinline() {
        return isCrossinline_;
      }
      /**
       * <code>required bool is_crossinline = 6;</code>
       */
      public Builder setIsCrossinline(boolean value) {
        bitField0_ |= 0x00000020;
        isCrossinline_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_crossinline = 6;</code>
       */
      public Builder clearIsCrossinline() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isCrossinline_ = false;
        onChanged();
        return this;
      }

      private boolean isNoinline_ ;
      /**
       * <code>required bool is_noinline = 7;</code>
       */
      public boolean hasIsNoinline() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool is_noinline = 7;</code>
       */
      public boolean getIsNoinline() {
        return isNoinline_;
      }
      /**
       * <code>required bool is_noinline = 7;</code>
       */
      public Builder setIsNoinline(boolean value) {
        bitField0_ |= 0x00000040;
        isNoinline_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_noinline = 7;</code>
       */
      public Builder clearIsNoinline() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isNoinline_ = false;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression defaultValue_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> defaultValueBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
       */
      public boolean hasDefaultValue() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getDefaultValue() {
        if (defaultValueBuilder_ == null) {
          return defaultValue_;
        } else {
          return defaultValueBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
       */
      public Builder setDefaultValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (defaultValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          defaultValue_ = value;
          onChanged();
        } else {
          defaultValueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
       */
      public Builder setDefaultValue(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (defaultValueBuilder_ == null) {
          defaultValue_ = builderForValue.build();
          onChanged();
        } else {
          defaultValueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
       */
      public Builder mergeDefaultValue(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (defaultValueBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              defaultValue_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            defaultValue_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(defaultValue_).mergeFrom(value).buildPartial();
          } else {
            defaultValue_ = value;
          }
          onChanged();
        } else {
          defaultValueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
       */
      public Builder clearDefaultValue() {
        if (defaultValueBuilder_ == null) {
          defaultValue_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          defaultValueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getDefaultValueBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getDefaultValueFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getDefaultValueOrBuilder() {
        if (defaultValueBuilder_ != null) {
          return defaultValueBuilder_.getMessageOrBuilder();
        } else {
          return defaultValue_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression default_value = 8;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getDefaultValueFieldBuilder() {
        if (defaultValueBuilder_ == null) {
          defaultValueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getDefaultValue(),
                  getParentForChildren(),
                  isClean());
          defaultValue_ = null;
        }
        return defaultValueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter)
    }

    static {
      defaultInstance = new IrValueParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter)
  }

  public interface IrTypeParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required string name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 2;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();

    /**
     * <code>required int32 index = 3;</code>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 3;</code>
     */
    int getIndex();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 4;</code>
     */
    boolean hasVariance();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance getVariance();

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> 
        getSuperTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getSuperType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
     */
    int getSuperTypeCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
        getSuperTypeOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getSuperTypeOrBuilder(
        int index);

    /**
     * <code>required bool is_reified = 6;</code>
     */
    boolean hasIsReified();
    /**
     * <code>required bool is_reified = 6;</code>
     */
    boolean getIsReified();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter}
   */
  public static final class IrTypeParameter extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter)
      IrTypeParameterOrBuilder {
    // Use IrTypeParameter.newBuilder() to construct.
    private IrTypeParameter(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrTypeParameter(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrTypeParameter defaultInstance;
    public static IrTypeParameter getDefaultInstance() {
      return defaultInstance;
    }

    public IrTypeParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrTypeParameter(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              name_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              index_ = input.readInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance value = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                variance_ = value;
              }
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                superType_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex>();
                mutable_bitField0_ |= 0x00000010;
              }
              superType_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              isReified_ = input.readBool();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          superType_ = java.util.Collections.unmodifiableList(superType_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameter_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrTypeParameter> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrTypeParameter>() {
      public IrTypeParameter parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrTypeParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrTypeParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.Object name_;
    /**
     * <code>required string name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 2;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int INDEX_FIELD_NUMBER = 3;
    private int index_;
    /**
     * <code>required int32 index = 3;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 index = 3;</code>
     */
    public int getIndex() {
      return index_;
    }

    public static final int VARIANCE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance variance_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 4;</code>
     */
    public boolean hasVariance() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance getVariance() {
      return variance_;
    }

    public static final int SUPER_TYPE_FIELD_NUMBER = 5;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> superType_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> getSuperTypeList() {
      return superType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
        getSuperTypeOrBuilderList() {
      return superType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
     */
    public int getSuperTypeCount() {
      return superType_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getSuperType(int index) {
      return superType_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getSuperTypeOrBuilder(
        int index) {
      return superType_.get(index);
    }

    public static final int IS_REIFIED_FIELD_NUMBER = 6;
    private boolean isReified_;
    /**
     * <code>required bool is_reified = 6;</code>
     */
    public boolean hasIsReified() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool is_reified = 6;</code>
     */
    public boolean getIsReified() {
      return isReified_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      name_ = "";
      index_ = 0;
      variance_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance.IN;
      superType_ = java.util.Collections.emptyList();
      isReified_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVariance()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsReified()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSuperTypeCount(); i++) {
        if (!getSuperType(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, index_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, variance_.getNumber());
      }
      for (int i = 0; i < superType_.size(); i++) {
        output.writeMessage(5, superType_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(6, isReified_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(3, index_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(4, variance_.getNumber());
      }
      for (int i = 0; i < superType_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, superType_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(6, isReified_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameter_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getSuperTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        variance_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance.IN;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (superTypeBuilder_ == null) {
          superType_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          superTypeBuilder_.clear();
        }
        isReified_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameter_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.variance_ = variance_;
        if (superTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            superType_ = java.util.Collections.unmodifiableList(superType_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.superType_ = superType_;
        } else {
          result.superType_ = superTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isReified_ = isReified_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000002;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasVariance()) {
          setVariance(other.getVariance());
        }
        if (superTypeBuilder_ == null) {
          if (!other.superType_.isEmpty()) {
            if (superType_.isEmpty()) {
              superType_ = other.superType_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureSuperTypeIsMutable();
              superType_.addAll(other.superType_);
            }
            onChanged();
          }
        } else {
          if (!other.superType_.isEmpty()) {
            if (superTypeBuilder_.isEmpty()) {
              superTypeBuilder_.dispose();
              superTypeBuilder_ = null;
              superType_ = other.superType_;
              bitField0_ = (bitField0_ & ~0x00000010);
              superTypeBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSuperTypeFieldBuilder() : null;
            } else {
              superTypeBuilder_.addAllMessages(other.superType_);
            }
          }
        }
        if (other.hasIsReified()) {
          setIsReified(other.getIsReified());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasName()) {
          
          return false;
        }
        if (!hasIndex()) {
          
          return false;
        }
        if (!hasVariance()) {
          
          return false;
        }
        if (!hasIsReified()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getSuperTypeCount(); i++) {
          if (!getSuperType(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }

      private int index_ ;
      /**
       * <code>required int32 index = 3;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 index = 3;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 3;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000004;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 3;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        index_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance variance_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance.IN;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 4;</code>
       */
      public boolean hasVariance() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance getVariance() {
        return variance_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 4;</code>
       */
      public Builder setVariance(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        variance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeVariance variance = 4;</code>
       */
      public Builder clearVariance() {
        bitField0_ = (bitField0_ & ~0x00000008);
        variance_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeVariance.IN;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> superType_ =
        java.util.Collections.emptyList();
      private void ensureSuperTypeIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          superType_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex>(superType_);
          bitField0_ |= 0x00000010;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> superTypeBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> getSuperTypeList() {
        if (superTypeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(superType_);
        } else {
          return superTypeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public int getSuperTypeCount() {
        if (superTypeBuilder_ == null) {
          return superType_.size();
        } else {
          return superTypeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getSuperType(int index) {
        if (superTypeBuilder_ == null) {
          return superType_.get(index);
        } else {
          return superTypeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public Builder setSuperType(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (superTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSuperTypeIsMutable();
          superType_.set(index, value);
          onChanged();
        } else {
          superTypeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public Builder setSuperType(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (superTypeBuilder_ == null) {
          ensureSuperTypeIsMutable();
          superType_.set(index, builderForValue.build());
          onChanged();
        } else {
          superTypeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public Builder addSuperType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (superTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSuperTypeIsMutable();
          superType_.add(value);
          onChanged();
        } else {
          superTypeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public Builder addSuperType(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (superTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSuperTypeIsMutable();
          superType_.add(index, value);
          onChanged();
        } else {
          superTypeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public Builder addSuperType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (superTypeBuilder_ == null) {
          ensureSuperTypeIsMutable();
          superType_.add(builderForValue.build());
          onChanged();
        } else {
          superTypeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public Builder addSuperType(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (superTypeBuilder_ == null) {
          ensureSuperTypeIsMutable();
          superType_.add(index, builderForValue.build());
          onChanged();
        } else {
          superTypeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public Builder addAllSuperType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> values) {
        if (superTypeBuilder_ == null) {
          ensureSuperTypeIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, superType_);
          onChanged();
        } else {
          superTypeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public Builder clearSuperType() {
        if (superTypeBuilder_ == null) {
          superType_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          superTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public Builder removeSuperType(int index) {
        if (superTypeBuilder_ == null) {
          ensureSuperTypeIsMutable();
          superType_.remove(index);
          onChanged();
        } else {
          superTypeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getSuperTypeBuilder(
          int index) {
        return getSuperTypeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getSuperTypeOrBuilder(
          int index) {
        if (superTypeBuilder_ == null) {
          return superType_.get(index);  } else {
          return superTypeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
           getSuperTypeOrBuilderList() {
        if (superTypeBuilder_ != null) {
          return superTypeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(superType_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder addSuperTypeBuilder() {
        return getSuperTypeFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder addSuperTypeBuilder(
          int index) {
        return getSuperTypeFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder> 
           getSuperTypeBuilderList() {
        return getSuperTypeFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getSuperTypeFieldBuilder() {
        if (superTypeBuilder_ == null) {
          superTypeBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  superType_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          superType_ = null;
        }
        return superTypeBuilder_;
      }

      private boolean isReified_ ;
      /**
       * <code>required bool is_reified = 6;</code>
       */
      public boolean hasIsReified() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bool is_reified = 6;</code>
       */
      public boolean getIsReified() {
        return isReified_;
      }
      /**
       * <code>required bool is_reified = 6;</code>
       */
      public Builder setIsReified(boolean value) {
        bitField0_ |= 0x00000020;
        isReified_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_reified = 6;</code>
       */
      public Builder clearIsReified() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isReified_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter)
    }

    static {
      defaultInstance = new IrTypeParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter)
  }

  public interface IrTypeParameterContainerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
     */
    int getTypeParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
        getTypeParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getTypeParameterOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer}
   */
  public static final class IrTypeParameterContainer extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer)
      IrTypeParameterContainerOrBuilder {
    // Use IrTypeParameterContainer.newBuilder() to construct.
    private IrTypeParameterContainer(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrTypeParameterContainer(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrTypeParameterContainer defaultInstance;
    public static IrTypeParameterContainer getDefaultInstance() {
      return defaultInstance;
    }

    public IrTypeParameterContainer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrTypeParameterContainer(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration>();
                mutable_bitField0_ |= 0x00000001;
              }
              typeParameter_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameterContainer_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameterContainer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrTypeParameterContainer> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrTypeParameterContainer>() {
      public IrTypeParameterContainer parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrTypeParameterContainer(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrTypeParameterContainer> getParserForType() {
      return PARSER;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
     */
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }

    private void initFields() {
      typeParameter_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getTypeParameterCount(); i++) {
        if (!getTypeParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < typeParameter_.size(); i++) {
        output.writeMessage(1, typeParameter_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < typeParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, typeParameter_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameterContainer_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameterContainer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTypeParameterFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          typeParameterBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameterContainer_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer(this);
        int from_bitField0_ = bitField0_;
        if (typeParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.typeParameter_ = typeParameter_;
        } else {
          result.typeParameter_ = typeParameterBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance()) return this;
        if (typeParameterBuilder_ == null) {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameter_.isEmpty()) {
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTypeParameterIsMutable();
              typeParameter_.addAll(other.typeParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameterBuilder_.isEmpty()) {
              typeParameterBuilder_.dispose();
              typeParameterBuilder_ = null;
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000001);
              typeParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeParameterFieldBuilder() : null;
            } else {
              typeParameterBuilder_.addAllMessages(other.typeParameter_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getTypeParameterCount(); i++) {
          if (!getTypeParameter(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> typeParameter_ =
        java.util.Collections.emptyList();
      private void ensureTypeParameterIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration>(typeParameter_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> typeParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> getTypeParameterList() {
        if (typeParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeParameter_);
        } else {
          return typeParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public int getTypeParameterCount() {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.size();
        } else {
          return typeParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);
        } else {
          return typeParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration> values) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeParameter_);
          onChanged();
        } else {
          typeParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public Builder clearTypeParameter() {
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          typeParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public Builder removeTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.remove(index);
          onChanged();
        } else {
          typeParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder getTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getTypeParameterOrBuilder(
          int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);  } else {
          return typeParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
           getTypeParameterOrBuilderList() {
        if (typeParameterBuilder_ != null) {
          return typeParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder addTypeParameterBuilder() {
        return getTypeParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder addTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration type_parameter = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder> 
           getTypeParameterBuilderList() {
        return getTypeParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
          getTypeParameterFieldBuilder() {
        if (typeParameterBuilder_ == null) {
          typeParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder>(
                  typeParameter_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          typeParameter_ = null;
        }
        return typeParameterBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer)
    }

    static {
      defaultInstance = new IrTypeParameterContainer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer)
  }

  public interface IrClassOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required string name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 2;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ClassKind kind = 3;</code>
     */
    boolean hasKind();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ClassKind kind = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind getKind();

    /**
     * <code>required string visibility = 4;</code>
     */
    boolean hasVisibility();
    /**
     * <code>required string visibility = 4;</code>
     */
    java.lang.String getVisibility();
    /**
     * <code>required string visibility = 4;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getVisibilityBytes();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 5;</code>
     */
    boolean hasModality();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind getModality();

    /**
     * <code>required bool is_companion = 6;</code>
     *
     * <pre>
     * TODO: consider using flags for the booleans.
     * </pre>
     */
    boolean hasIsCompanion();
    /**
     * <code>required bool is_companion = 6;</code>
     *
     * <pre>
     * TODO: consider using flags for the booleans.
     * </pre>
     */
    boolean getIsCompanion();

    /**
     * <code>required bool is_inner = 7;</code>
     */
    boolean hasIsInner();
    /**
     * <code>required bool is_inner = 7;</code>
     */
    boolean getIsInner();

    /**
     * <code>required bool is_data = 8;</code>
     */
    boolean hasIsData();
    /**
     * <code>required bool is_data = 8;</code>
     */
    boolean getIsData();

    /**
     * <code>required bool is_external = 9;</code>
     */
    boolean hasIsExternal();
    /**
     * <code>required bool is_external = 9;</code>
     */
    boolean getIsExternal();

    /**
     * <code>required bool is_inline = 10;</code>
     */
    boolean hasIsInline();
    /**
     * <code>required bool is_inline = 10;</code>
     */
    boolean getIsInline();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
     */
    boolean hasThisReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getThisReceiver();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getThisReceiverOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
     */
    boolean hasTypeParameters();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer getTypeParameters();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder getTypeParametersOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
     */
    boolean hasDeclarationContainer();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer getDeclarationContainer();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainerOrBuilder getDeclarationContainerOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> 
        getSuperTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getSuperType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
     */
    int getSuperTypeCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
        getSuperTypeOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getSuperTypeOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass}
   */
  public static final class IrClass extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass)
      IrClassOrBuilder {
    // Use IrClass.newBuilder() to construct.
    private IrClass(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrClass(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrClass defaultInstance;
    public static IrClass getDefaultInstance() {
      return defaultInstance;
    }

    public IrClass getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrClass(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              name_ = bs;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind value = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                kind_ = value;
              }
              break;
            }
            case 34: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              visibility_ = bs;
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind value = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                modality_ = value;
              }
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              isCompanion_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              isInner_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              isData_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              isExternal_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              isInline_ = input.readBool();
              break;
            }
            case 90: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = thisReceiver_.toBuilder();
              }
              thisReceiver_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(thisReceiver_);
                thisReceiver_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = typeParameters_.toBuilder();
              }
              typeParameters_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(typeParameters_);
                typeParameters_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 106: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = declarationContainer_.toBuilder();
              }
              declarationContainer_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(declarationContainer_);
                declarationContainer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                superType_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex>();
                mutable_bitField0_ |= 0x00002000;
              }
              superType_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          superType_ = java.util.Collections.unmodifiableList(superType_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClass_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClass_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrClass> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrClass>() {
      public IrClass parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrClass(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrClass> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.Object name_;
    /**
     * <code>required string name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 2;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int KIND_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind kind_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ClassKind kind = 3;</code>
     */
    public boolean hasKind() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ClassKind kind = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind getKind() {
      return kind_;
    }

    public static final int VISIBILITY_FIELD_NUMBER = 4;
    private java.lang.Object visibility_;
    /**
     * <code>required string visibility = 4;</code>
     */
    public boolean hasVisibility() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required string visibility = 4;</code>
     */
    public java.lang.String getVisibility() {
      java.lang.Object ref = visibility_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          visibility_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string visibility = 4;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getVisibilityBytes() {
      java.lang.Object ref = visibility_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        visibility_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int MODALITY_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind modality_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 5;</code>
     */
    public boolean hasModality() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind getModality() {
      return modality_;
    }

    public static final int IS_COMPANION_FIELD_NUMBER = 6;
    private boolean isCompanion_;
    /**
     * <code>required bool is_companion = 6;</code>
     *
     * <pre>
     * TODO: consider using flags for the booleans.
     * </pre>
     */
    public boolean hasIsCompanion() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bool is_companion = 6;</code>
     *
     * <pre>
     * TODO: consider using flags for the booleans.
     * </pre>
     */
    public boolean getIsCompanion() {
      return isCompanion_;
    }

    public static final int IS_INNER_FIELD_NUMBER = 7;
    private boolean isInner_;
    /**
     * <code>required bool is_inner = 7;</code>
     */
    public boolean hasIsInner() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool is_inner = 7;</code>
     */
    public boolean getIsInner() {
      return isInner_;
    }

    public static final int IS_DATA_FIELD_NUMBER = 8;
    private boolean isData_;
    /**
     * <code>required bool is_data = 8;</code>
     */
    public boolean hasIsData() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required bool is_data = 8;</code>
     */
    public boolean getIsData() {
      return isData_;
    }

    public static final int IS_EXTERNAL_FIELD_NUMBER = 9;
    private boolean isExternal_;
    /**
     * <code>required bool is_external = 9;</code>
     */
    public boolean hasIsExternal() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required bool is_external = 9;</code>
     */
    public boolean getIsExternal() {
      return isExternal_;
    }

    public static final int IS_INLINE_FIELD_NUMBER = 10;
    private boolean isInline_;
    /**
     * <code>required bool is_inline = 10;</code>
     */
    public boolean hasIsInline() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required bool is_inline = 10;</code>
     */
    public boolean getIsInline() {
      return isInline_;
    }

    public static final int THIS_RECEIVER_FIELD_NUMBER = 11;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration thisReceiver_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
     */
    public boolean hasThisReceiver() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getThisReceiver() {
      return thisReceiver_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getThisReceiverOrBuilder() {
      return thisReceiver_;
    }

    public static final int TYPE_PARAMETERS_FIELD_NUMBER = 12;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer typeParameters_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
     */
    public boolean hasTypeParameters() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer getTypeParameters() {
      return typeParameters_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder getTypeParametersOrBuilder() {
      return typeParameters_;
    }

    public static final int DECLARATION_CONTAINER_FIELD_NUMBER = 13;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer declarationContainer_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
     */
    public boolean hasDeclarationContainer() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer getDeclarationContainer() {
      return declarationContainer_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainerOrBuilder getDeclarationContainerOrBuilder() {
      return declarationContainer_;
    }

    public static final int SUPER_TYPE_FIELD_NUMBER = 14;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> superType_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> getSuperTypeList() {
      return superType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
        getSuperTypeOrBuilderList() {
      return superType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
     */
    public int getSuperTypeCount() {
      return superType_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getSuperType(int index) {
      return superType_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getSuperTypeOrBuilder(
        int index) {
      return superType_.get(index);
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      name_ = "";
      kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind.CLASS;
      visibility_ = "";
      modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
      isCompanion_ = false;
      isInner_ = false;
      isData_ = false;
      isExternal_ = false;
      isInline_ = false;
      thisReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      typeParameters_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance();
      declarationContainer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.getDefaultInstance();
      superType_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasKind()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVisibility()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasModality()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsCompanion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsInner()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsData()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsExternal()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsInline()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTypeParameters()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDeclarationContainer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasThisReceiver()) {
        if (!getThisReceiver().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getTypeParameters().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getDeclarationContainer().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSuperTypeCount(); i++) {
        if (!getSuperType(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, kind_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getVisibilityBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, modality_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, isCompanion_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, isInner_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, isData_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, isExternal_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, isInline_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, thisReceiver_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, typeParameters_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, declarationContainer_);
      }
      for (int i = 0; i < superType_.size(); i++) {
        output.writeMessage(14, superType_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(3, kind_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(4, getVisibilityBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(5, modality_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(6, isCompanion_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(7, isInner_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(8, isData_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(9, isExternal_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(10, isInline_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(11, thisReceiver_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(12, typeParameters_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(13, declarationContainer_);
      }
      for (int i = 0; i < superType_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(14, superType_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClass_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClass_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getThisReceiverFieldBuilder();
          getTypeParametersFieldBuilder();
          getDeclarationContainerFieldBuilder();
          getSuperTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind.CLASS;
        bitField0_ = (bitField0_ & ~0x00000004);
        visibility_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
        bitField0_ = (bitField0_ & ~0x00000010);
        isCompanion_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        isInner_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        isData_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        isExternal_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        isInline_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        if (thisReceiverBuilder_ == null) {
          thisReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
        } else {
          thisReceiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (typeParametersBuilder_ == null) {
          typeParameters_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance();
        } else {
          typeParametersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (declarationContainerBuilder_ == null) {
          declarationContainer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.getDefaultInstance();
        } else {
          declarationContainerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (superTypeBuilder_ == null) {
          superType_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          superTypeBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClass_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.kind_ = kind_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.visibility_ = visibility_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.modality_ = modality_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.isCompanion_ = isCompanion_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isInner_ = isInner_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.isData_ = isData_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.isExternal_ = isExternal_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isInline_ = isInline_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (thisReceiverBuilder_ == null) {
          result.thisReceiver_ = thisReceiver_;
        } else {
          result.thisReceiver_ = thisReceiverBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (typeParametersBuilder_ == null) {
          result.typeParameters_ = typeParameters_;
        } else {
          result.typeParameters_ = typeParametersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (declarationContainerBuilder_ == null) {
          result.declarationContainer_ = declarationContainer_;
        } else {
          result.declarationContainer_ = declarationContainerBuilder_.build();
        }
        if (superTypeBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000)) {
            superType_ = java.util.Collections.unmodifiableList(superType_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.superType_ = superType_;
        } else {
          result.superType_ = superTypeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000002;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasKind()) {
          setKind(other.getKind());
        }
        if (other.hasVisibility()) {
          bitField0_ |= 0x00000008;
          visibility_ = other.visibility_;
          onChanged();
        }
        if (other.hasModality()) {
          setModality(other.getModality());
        }
        if (other.hasIsCompanion()) {
          setIsCompanion(other.getIsCompanion());
        }
        if (other.hasIsInner()) {
          setIsInner(other.getIsInner());
        }
        if (other.hasIsData()) {
          setIsData(other.getIsData());
        }
        if (other.hasIsExternal()) {
          setIsExternal(other.getIsExternal());
        }
        if (other.hasIsInline()) {
          setIsInline(other.getIsInline());
        }
        if (other.hasThisReceiver()) {
          mergeThisReceiver(other.getThisReceiver());
        }
        if (other.hasTypeParameters()) {
          mergeTypeParameters(other.getTypeParameters());
        }
        if (other.hasDeclarationContainer()) {
          mergeDeclarationContainer(other.getDeclarationContainer());
        }
        if (superTypeBuilder_ == null) {
          if (!other.superType_.isEmpty()) {
            if (superType_.isEmpty()) {
              superType_ = other.superType_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureSuperTypeIsMutable();
              superType_.addAll(other.superType_);
            }
            onChanged();
          }
        } else {
          if (!other.superType_.isEmpty()) {
            if (superTypeBuilder_.isEmpty()) {
              superTypeBuilder_.dispose();
              superTypeBuilder_ = null;
              superType_ = other.superType_;
              bitField0_ = (bitField0_ & ~0x00002000);
              superTypeBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSuperTypeFieldBuilder() : null;
            } else {
              superTypeBuilder_.addAllMessages(other.superType_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasName()) {
          
          return false;
        }
        if (!hasKind()) {
          
          return false;
        }
        if (!hasVisibility()) {
          
          return false;
        }
        if (!hasModality()) {
          
          return false;
        }
        if (!hasIsCompanion()) {
          
          return false;
        }
        if (!hasIsInner()) {
          
          return false;
        }
        if (!hasIsData()) {
          
          return false;
        }
        if (!hasIsExternal()) {
          
          return false;
        }
        if (!hasIsInline()) {
          
          return false;
        }
        if (!hasTypeParameters()) {
          
          return false;
        }
        if (!hasDeclarationContainer()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (hasThisReceiver()) {
          if (!getThisReceiver().isInitialized()) {
            
            return false;
          }
        }
        if (!getTypeParameters().isInitialized()) {
          
          return false;
        }
        if (!getDeclarationContainer().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getSuperTypeCount(); i++) {
          if (!getSuperType(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 2;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind.CLASS;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ClassKind kind = 3;</code>
       */
      public boolean hasKind() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ClassKind kind = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind getKind() {
        return kind_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ClassKind kind = 3;</code>
       */
      public Builder setKind(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        kind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ClassKind kind = 3;</code>
       */
      public Builder clearKind() {
        bitField0_ = (bitField0_ & ~0x00000004);
        kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ClassKind.CLASS;
        onChanged();
        return this;
      }

      private java.lang.Object visibility_ = "";
      /**
       * <code>required string visibility = 4;</code>
       */
      public boolean hasVisibility() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required string visibility = 4;</code>
       */
      public java.lang.String getVisibility() {
        java.lang.Object ref = visibility_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            visibility_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string visibility = 4;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getVisibilityBytes() {
        java.lang.Object ref = visibility_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          visibility_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string visibility = 4;</code>
       */
      public Builder setVisibility(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        visibility_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string visibility = 4;</code>
       */
      public Builder clearVisibility() {
        bitField0_ = (bitField0_ & ~0x00000008);
        visibility_ = getDefaultInstance().getVisibility();
        onChanged();
        return this;
      }
      /**
       * <code>required string visibility = 4;</code>
       */
      public Builder setVisibilityBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        visibility_ = value;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 5;</code>
       */
      public boolean hasModality() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind getModality() {
        return modality_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 5;</code>
       */
      public Builder setModality(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        modality_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.ModalityKind modality = 5;</code>
       */
      public Builder clearModality() {
        bitField0_ = (bitField0_ & ~0x00000010);
        modality_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.ModalityKind.FINAL_MODALITY;
        onChanged();
        return this;
      }

      private boolean isCompanion_ ;
      /**
       * <code>required bool is_companion = 6;</code>
       *
       * <pre>
       * TODO: consider using flags for the booleans.
       * </pre>
       */
      public boolean hasIsCompanion() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bool is_companion = 6;</code>
       *
       * <pre>
       * TODO: consider using flags for the booleans.
       * </pre>
       */
      public boolean getIsCompanion() {
        return isCompanion_;
      }
      /**
       * <code>required bool is_companion = 6;</code>
       *
       * <pre>
       * TODO: consider using flags for the booleans.
       * </pre>
       */
      public Builder setIsCompanion(boolean value) {
        bitField0_ |= 0x00000020;
        isCompanion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_companion = 6;</code>
       *
       * <pre>
       * TODO: consider using flags for the booleans.
       * </pre>
       */
      public Builder clearIsCompanion() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isCompanion_ = false;
        onChanged();
        return this;
      }

      private boolean isInner_ ;
      /**
       * <code>required bool is_inner = 7;</code>
       */
      public boolean hasIsInner() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool is_inner = 7;</code>
       */
      public boolean getIsInner() {
        return isInner_;
      }
      /**
       * <code>required bool is_inner = 7;</code>
       */
      public Builder setIsInner(boolean value) {
        bitField0_ |= 0x00000040;
        isInner_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_inner = 7;</code>
       */
      public Builder clearIsInner() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isInner_ = false;
        onChanged();
        return this;
      }

      private boolean isData_ ;
      /**
       * <code>required bool is_data = 8;</code>
       */
      public boolean hasIsData() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required bool is_data = 8;</code>
       */
      public boolean getIsData() {
        return isData_;
      }
      /**
       * <code>required bool is_data = 8;</code>
       */
      public Builder setIsData(boolean value) {
        bitField0_ |= 0x00000080;
        isData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_data = 8;</code>
       */
      public Builder clearIsData() {
        bitField0_ = (bitField0_ & ~0x00000080);
        isData_ = false;
        onChanged();
        return this;
      }

      private boolean isExternal_ ;
      /**
       * <code>required bool is_external = 9;</code>
       */
      public boolean hasIsExternal() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required bool is_external = 9;</code>
       */
      public boolean getIsExternal() {
        return isExternal_;
      }
      /**
       * <code>required bool is_external = 9;</code>
       */
      public Builder setIsExternal(boolean value) {
        bitField0_ |= 0x00000100;
        isExternal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_external = 9;</code>
       */
      public Builder clearIsExternal() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isExternal_ = false;
        onChanged();
        return this;
      }

      private boolean isInline_ ;
      /**
       * <code>required bool is_inline = 10;</code>
       */
      public boolean hasIsInline() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required bool is_inline = 10;</code>
       */
      public boolean getIsInline() {
        return isInline_;
      }
      /**
       * <code>required bool is_inline = 10;</code>
       */
      public Builder setIsInline(boolean value) {
        bitField0_ |= 0x00000200;
        isInline_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_inline = 10;</code>
       */
      public Builder clearIsInline() {
        bitField0_ = (bitField0_ & ~0x00000200);
        isInline_ = false;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration thisReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> thisReceiverBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
       */
      public boolean hasThisReceiver() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getThisReceiver() {
        if (thisReceiverBuilder_ == null) {
          return thisReceiver_;
        } else {
          return thisReceiverBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
       */
      public Builder setThisReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (thisReceiverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          thisReceiver_ = value;
          onChanged();
        } else {
          thisReceiverBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
       */
      public Builder setThisReceiver(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (thisReceiverBuilder_ == null) {
          thisReceiver_ = builderForValue.build();
          onChanged();
        } else {
          thisReceiverBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
       */
      public Builder mergeThisReceiver(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (thisReceiverBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              thisReceiver_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance()) {
            thisReceiver_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.newBuilder(thisReceiver_).mergeFrom(value).buildPartial();
          } else {
            thisReceiver_ = value;
          }
          onChanged();
        } else {
          thisReceiverBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
       */
      public Builder clearThisReceiver() {
        if (thisReceiverBuilder_ == null) {
          thisReceiver_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
          onChanged();
        } else {
          thisReceiverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder getThisReceiverBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getThisReceiverFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getThisReceiverOrBuilder() {
        if (thisReceiverBuilder_ != null) {
          return thisReceiverBuilder_.getMessageOrBuilder();
        } else {
          return thisReceiver_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration this_receiver = 11;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
          getThisReceiverFieldBuilder() {
        if (thisReceiverBuilder_ == null) {
          thisReceiverBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder>(
                  getThisReceiver(),
                  getParentForChildren(),
                  isClean());
          thisReceiver_ = null;
        }
        return thisReceiverBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer typeParameters_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder> typeParametersBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
       */
      public boolean hasTypeParameters() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer getTypeParameters() {
        if (typeParametersBuilder_ == null) {
          return typeParameters_;
        } else {
          return typeParametersBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
       */
      public Builder setTypeParameters(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer value) {
        if (typeParametersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeParameters_ = value;
          onChanged();
        } else {
          typeParametersBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
       */
      public Builder setTypeParameters(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder builderForValue) {
        if (typeParametersBuilder_ == null) {
          typeParameters_ = builderForValue.build();
          onChanged();
        } else {
          typeParametersBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
       */
      public Builder mergeTypeParameters(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer value) {
        if (typeParametersBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              typeParameters_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance()) {
            typeParameters_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.newBuilder(typeParameters_).mergeFrom(value).buildPartial();
          } else {
            typeParameters_ = value;
          }
          onChanged();
        } else {
          typeParametersBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
       */
      public Builder clearTypeParameters() {
        if (typeParametersBuilder_ == null) {
          typeParameters_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.getDefaultInstance();
          onChanged();
        } else {
          typeParametersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder getTypeParametersBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getTypeParametersFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder getTypeParametersOrBuilder() {
        if (typeParametersBuilder_ != null) {
          return typeParametersBuilder_.getMessageOrBuilder();
        } else {
          return typeParameters_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameterContainer type_parameters = 12;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder> 
          getTypeParametersFieldBuilder() {
        if (typeParametersBuilder_ == null) {
          typeParametersBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainer.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterContainerOrBuilder>(
                  getTypeParameters(),
                  getParentForChildren(),
                  isClean());
          typeParameters_ = null;
        }
        return typeParametersBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer declarationContainer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainerOrBuilder> declarationContainerBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
       */
      public boolean hasDeclarationContainer() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer getDeclarationContainer() {
        if (declarationContainerBuilder_ == null) {
          return declarationContainer_;
        } else {
          return declarationContainerBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
       */
      public Builder setDeclarationContainer(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer value) {
        if (declarationContainerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarationContainer_ = value;
          onChanged();
        } else {
          declarationContainerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
       */
      public Builder setDeclarationContainer(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.Builder builderForValue) {
        if (declarationContainerBuilder_ == null) {
          declarationContainer_ = builderForValue.build();
          onChanged();
        } else {
          declarationContainerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
       */
      public Builder mergeDeclarationContainer(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer value) {
        if (declarationContainerBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              declarationContainer_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.getDefaultInstance()) {
            declarationContainer_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.newBuilder(declarationContainer_).mergeFrom(value).buildPartial();
          } else {
            declarationContainer_ = value;
          }
          onChanged();
        } else {
          declarationContainerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
       */
      public Builder clearDeclarationContainer() {
        if (declarationContainerBuilder_ == null) {
          declarationContainer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.getDefaultInstance();
          onChanged();
        } else {
          declarationContainerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.Builder getDeclarationContainerBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getDeclarationContainerFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainerOrBuilder getDeclarationContainerOrBuilder() {
        if (declarationContainerBuilder_ != null) {
          return declarationContainerBuilder_.getMessageOrBuilder();
        } else {
          return declarationContainer_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationContainer declaration_container = 13;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainerOrBuilder> 
          getDeclarationContainerFieldBuilder() {
        if (declarationContainerBuilder_ == null) {
          declarationContainerBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainer.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationContainerOrBuilder>(
                  getDeclarationContainer(),
                  getParentForChildren(),
                  isClean());
          declarationContainer_ = null;
        }
        return declarationContainerBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> superType_ =
        java.util.Collections.emptyList();
      private void ensureSuperTypeIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          superType_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex>(superType_);
          bitField0_ |= 0x00002000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> superTypeBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> getSuperTypeList() {
        if (superTypeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(superType_);
        } else {
          return superTypeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public int getSuperTypeCount() {
        if (superTypeBuilder_ == null) {
          return superType_.size();
        } else {
          return superTypeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex getSuperType(int index) {
        if (superTypeBuilder_ == null) {
          return superType_.get(index);
        } else {
          return superTypeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public Builder setSuperType(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (superTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSuperTypeIsMutable();
          superType_.set(index, value);
          onChanged();
        } else {
          superTypeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public Builder setSuperType(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (superTypeBuilder_ == null) {
          ensureSuperTypeIsMutable();
          superType_.set(index, builderForValue.build());
          onChanged();
        } else {
          superTypeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public Builder addSuperType(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (superTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSuperTypeIsMutable();
          superType_.add(value);
          onChanged();
        } else {
          superTypeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public Builder addSuperType(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex value) {
        if (superTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSuperTypeIsMutable();
          superType_.add(index, value);
          onChanged();
        } else {
          superTypeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public Builder addSuperType(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (superTypeBuilder_ == null) {
          ensureSuperTypeIsMutable();
          superType_.add(builderForValue.build());
          onChanged();
        } else {
          superTypeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public Builder addSuperType(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder builderForValue) {
        if (superTypeBuilder_ == null) {
          ensureSuperTypeIsMutable();
          superType_.add(index, builderForValue.build());
          onChanged();
        } else {
          superTypeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public Builder addAllSuperType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex> values) {
        if (superTypeBuilder_ == null) {
          ensureSuperTypeIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, superType_);
          onChanged();
        } else {
          superTypeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public Builder clearSuperType() {
        if (superTypeBuilder_ == null) {
          superType_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
        } else {
          superTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public Builder removeSuperType(int index) {
        if (superTypeBuilder_ == null) {
          ensureSuperTypeIsMutable();
          superType_.remove(index);
          onChanged();
        } else {
          superTypeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder getSuperTypeBuilder(
          int index) {
        return getSuperTypeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder getSuperTypeOrBuilder(
          int index) {
        if (superTypeBuilder_ == null) {
          return superType_.get(index);  } else {
          return superTypeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
           getSuperTypeOrBuilderList() {
        if (superTypeBuilder_ != null) {
          return superTypeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(superType_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder addSuperTypeBuilder() {
        return getSuperTypeFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder addSuperTypeBuilder(
          int index) {
        return getSuperTypeFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeIndex super_type = 14;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder> 
           getSuperTypeBuilderList() {
        return getSuperTypeFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder> 
          getSuperTypeFieldBuilder() {
        if (superTypeBuilder_ == null) {
          superTypeBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndex.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeIndexOrBuilder>(
                  superType_,
                  ((bitField0_ & 0x00002000) == 0x00002000),
                  getParentForChildren(),
                  isClean());
          superType_ = null;
        }
        return superTypeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass)
    }

    static {
      defaultInstance = new IrClass(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass)
  }

  public interface IrEnumEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    boolean hasInitializer();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getInitializer();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getInitializerOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
     */
    boolean hasCorrespondingClass();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getCorrespondingClass();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getCorrespondingClassOrBuilder();

    /**
     * <code>required string name = 4;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 4;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 4;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry}
   */
  public static final class IrEnumEntry extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry)
      IrEnumEntryOrBuilder {
    // Use IrEnumEntry.newBuilder() to construct.
    private IrEnumEntry(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrEnumEntry(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrEnumEntry defaultInstance;
    public static IrEnumEntry getDefaultInstance() {
      return defaultInstance;
    }

    public IrEnumEntry getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrEnumEntry(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = initializer_.toBuilder();
              }
              initializer_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(initializer_);
                initializer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = correspondingClass_.toBuilder();
              }
              correspondingClass_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(correspondingClass_);
                correspondingClass_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              name_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumEntry_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrEnumEntry> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrEnumEntry>() {
      public IrEnumEntry parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrEnumEntry(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrEnumEntry> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int INITIALIZER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression initializer_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    public boolean hasInitializer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getInitializer() {
      return initializer_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getInitializerOrBuilder() {
      return initializer_;
    }

    public static final int CORRESPONDING_CLASS_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration correspondingClass_;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
     */
    public boolean hasCorrespondingClass() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getCorrespondingClass() {
      return correspondingClass_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getCorrespondingClassOrBuilder() {
      return correspondingClass_;
    }

    public static final int NAME_FIELD_NUMBER = 4;
    private java.lang.Object name_;
    /**
     * <code>required string name = 4;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required string name = 4;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 4;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      correspondingClass_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      name_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasInitializer()) {
        if (!getInitializer().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCorrespondingClass()) {
        if (!getCorrespondingClass().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, initializer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, correspondingClass_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getNameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, initializer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, correspondingClass_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(4, getNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumEntry_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getInitializerFieldBuilder();
          getCorrespondingClassFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (initializerBuilder_ == null) {
          initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          initializerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (correspondingClassBuilder_ == null) {
          correspondingClass_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
        } else {
          correspondingClassBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumEntry_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (initializerBuilder_ == null) {
          result.initializer_ = initializer_;
        } else {
          result.initializer_ = initializerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (correspondingClassBuilder_ == null) {
          result.correspondingClass_ = correspondingClass_;
        } else {
          result.correspondingClass_ = correspondingClassBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.name_ = name_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasInitializer()) {
          mergeInitializer(other.getInitializer());
        }
        if (other.hasCorrespondingClass()) {
          mergeCorrespondingClass(other.getCorrespondingClass());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000008;
          name_ = other.name_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasName()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (hasInitializer()) {
          if (!getInitializer().isInitialized()) {
            
            return false;
          }
        }
        if (hasCorrespondingClass()) {
          if (!getCorrespondingClass().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> initializerBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public boolean hasInitializer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getInitializer() {
        if (initializerBuilder_ == null) {
          return initializer_;
        } else {
          return initializerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public Builder setInitializer(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (initializerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          initializer_ = value;
          onChanged();
        } else {
          initializerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public Builder setInitializer(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (initializerBuilder_ == null) {
          initializer_ = builderForValue.build();
          onChanged();
        } else {
          initializerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public Builder mergeInitializer(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (initializerBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              initializer_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            initializer_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(initializer_).mergeFrom(value).buildPartial();
          } else {
            initializer_ = value;
          }
          onChanged();
        } else {
          initializerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public Builder clearInitializer() {
        if (initializerBuilder_ == null) {
          initializer_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          initializerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getInitializerBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInitializerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getInitializerOrBuilder() {
        if (initializerBuilder_ != null) {
          return initializerBuilder_.getMessageOrBuilder();
        } else {
          return initializer_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression initializer = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getInitializerFieldBuilder() {
        if (initializerBuilder_ == null) {
          initializerBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getInitializer(),
                  getParentForChildren(),
                  isClean());
          initializer_ = null;
        }
        return initializerBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration correspondingClass_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> correspondingClassBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
       */
      public boolean hasCorrespondingClass() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getCorrespondingClass() {
        if (correspondingClassBuilder_ == null) {
          return correspondingClass_;
        } else {
          return correspondingClassBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
       */
      public Builder setCorrespondingClass(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (correspondingClassBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          correspondingClass_ = value;
          onChanged();
        } else {
          correspondingClassBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
       */
      public Builder setCorrespondingClass(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (correspondingClassBuilder_ == null) {
          correspondingClass_ = builderForValue.build();
          onChanged();
        } else {
          correspondingClassBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
       */
      public Builder mergeCorrespondingClass(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (correspondingClassBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              correspondingClass_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance()) {
            correspondingClass_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.newBuilder(correspondingClass_).mergeFrom(value).buildPartial();
          } else {
            correspondingClass_ = value;
          }
          onChanged();
        } else {
          correspondingClassBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
       */
      public Builder clearCorrespondingClass() {
        if (correspondingClassBuilder_ == null) {
          correspondingClass_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
          onChanged();
        } else {
          correspondingClassBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder getCorrespondingClassBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getCorrespondingClassFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getCorrespondingClassOrBuilder() {
        if (correspondingClassBuilder_ != null) {
          return correspondingClassBuilder_.getMessageOrBuilder();
        } else {
          return correspondingClass_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration corresponding_class = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
          getCorrespondingClassFieldBuilder() {
        if (correspondingClassBuilder_ == null) {
          correspondingClassBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder>(
                  getCorrespondingClass(),
                  getParentForChildren(),
                  isClean());
          correspondingClass_ = null;
        }
        return correspondingClassBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 4;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required string name = 4;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 4;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 4;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 4;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 4;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        name_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry)
    }

    static {
      defaultInstance = new IrEnumEntry(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry)
  }

  public interface IrAnonymousInitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    boolean hasSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
     */
    boolean hasBody();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getBody();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getBodyOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit}
   */
  public static final class IrAnonymousInit extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit)
      IrAnonymousInitOrBuilder {
    // Use IrAnonymousInit.newBuilder() to construct.
    private IrAnonymousInit(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrAnonymousInit(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrAnonymousInit defaultInstance;
    public static IrAnonymousInit getDefaultInstance() {
      return defaultInstance;
    }

    public IrAnonymousInit getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrAnonymousInit(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbol_.toBuilder();
              }
              symbol_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbol_);
                symbol_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = body_.toBuilder();
              }
              body_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(body_);
                body_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrAnonymousInit_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrAnonymousInit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrAnonymousInit> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrAnonymousInit>() {
      public IrAnonymousInit parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrAnonymousInit(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrAnonymousInit> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
      return symbol_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
      return symbol_;
    }

    public static final int BODY_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement body_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
     */
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getBody() {
      return body_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getBodyOrBuilder() {
      return body_;
    }

    private void initFields() {
      symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBody()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbol().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getBody().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, body_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, body_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInitOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrAnonymousInit_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrAnonymousInit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSymbolFieldBuilder();
          getBodyFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (bodyBuilder_ == null) {
          body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance();
        } else {
          bodyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrAnonymousInit_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (symbolBuilder_ == null) {
          result.symbol_ = symbol_;
        } else {
          result.symbol_ = symbolBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (bodyBuilder_ == null) {
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.getDefaultInstance()) return this;
        if (other.hasSymbol()) {
          mergeSymbol(other.getSymbol());
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbol()) {
          
          return false;
        }
        if (!hasBody()) {
          
          return false;
        }
        if (!getSymbol().isInitialized()) {
          
          return false;
        }
        if (!getBody().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> symbolBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol getSymbol() {
        if (symbolBuilder_ == null) {
          return symbol_;
        } else {
          return symbolBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          symbol_ = value;
          onChanged();
        } else {
          symbolBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder setSymbol(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder builderForValue) {
        if (symbolBuilder_ == null) {
          symbol_ = builderForValue.build();
          onChanged();
        } else {
          symbolBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder mergeSymbol(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol value) {
        if (symbolBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              symbol_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance()) {
            symbol_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.newBuilder(symbol_).mergeFrom(value).buildPartial();
          } else {
            symbol_ = value;
          }
          onChanged();
        } else {
          symbolBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public Builder clearSymbol() {
        if (symbolBuilder_ == null) {
          symbol_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.getDefaultInstance();
          onChanged();
        } else {
          symbolBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder getSymbolBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSymbolFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder getSymbolOrBuilder() {
        if (symbolBuilder_ != null) {
          return symbolBuilder_.getMessageOrBuilder();
        } else {
          return symbol_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSymbol symbol = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder> 
          getSymbolFieldBuilder() {
        if (symbolBuilder_ == null) {
          symbolBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbol.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSymbolOrBuilder>(
                  getSymbol(),
                  getParentForChildren(),
                  isClean());
          symbol_ = null;
        }
        return symbolBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> bodyBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
       */
      public boolean hasBody() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getBody() {
        if (bodyBuilder_ == null) {
          return body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
       */
      public Builder setBody(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          bodyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (bodyBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              body_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance()) {
            body_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.newBuilder(body_).mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          bodyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance();
          onChanged();
        } else {
          bodyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder getBodyBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement body = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit)
    }

    static {
      defaultInstance = new IrAnonymousInit(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit)
  }

  public interface IrDeclaratorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    boolean hasIrAnonymousInit();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit getIrAnonymousInit();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInitOrBuilder getIrAnonymousInitOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
     */
    boolean hasIrClass();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass getIrClass();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassOrBuilder getIrClassOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
     */
    boolean hasIrConstructor();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor getIrConstructor();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructorOrBuilder getIrConstructorOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
     */
    boolean hasIrEnumEntry();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry getIrEnumEntry();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntryOrBuilder getIrEnumEntryOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
     */
    boolean hasIrField();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField getIrField();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder getIrFieldOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
     */
    boolean hasIrFunction();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getIrFunction();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder getIrFunctionOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
     */
    boolean hasIrProperty();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty getIrProperty();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyOrBuilder getIrPropertyOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
     */
    boolean hasIrTypeAlias();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias getIrTypeAlias();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAliasOrBuilder getIrTypeAliasOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
     */
    boolean hasIrTypeParameter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter getIrTypeParameter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterOrBuilder getIrTypeParameterOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
     */
    boolean hasIrVariable();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable getIrVariable();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariableOrBuilder getIrVariableOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
     */
    boolean hasIrValueParameter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter getIrValueParameter();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameterOrBuilder getIrValueParameterOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator}
   *
   * <pre>
   * TODO: we need an extension mechanism to accomodate new
   * IR operators in upcoming releases.
   * </pre>
   */
  public static final class IrDeclarator extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator)
      IrDeclaratorOrBuilder {
    // Use IrDeclarator.newBuilder() to construct.
    private IrDeclarator(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrDeclarator(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrDeclarator defaultInstance;
    public static IrDeclarator getDefaultInstance() {
      return defaultInstance;
    }

    public IrDeclarator getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrDeclarator(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.Builder subBuilder = null;
              if (declaratorCase_ == 1) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 1;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.Builder subBuilder = null;
              if (declaratorCase_ == 2) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 2;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.Builder subBuilder = null;
              if (declaratorCase_ == 3) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 3;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.Builder subBuilder = null;
              if (declaratorCase_ == 4) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 4;
              break;
            }
            case 42: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder subBuilder = null;
              if (declaratorCase_ == 5) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 5;
              break;
            }
            case 50: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder subBuilder = null;
              if (declaratorCase_ == 6) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 6;
              break;
            }
            case 58: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.Builder subBuilder = null;
              if (declaratorCase_ == 7) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 7;
              break;
            }
            case 66: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.Builder subBuilder = null;
              if (declaratorCase_ == 8) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 8;
              break;
            }
            case 74: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.Builder subBuilder = null;
              if (declaratorCase_ == 9) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 9;
              break;
            }
            case 82: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.Builder subBuilder = null;
              if (declaratorCase_ == 10) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 10;
              break;
            }
            case 90: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.Builder subBuilder = null;
              if (declaratorCase_ == 11) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) declarator_).toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              declaratorCase_ = 11;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarator_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrDeclarator> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrDeclarator>() {
      public IrDeclarator parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrDeclarator(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrDeclarator> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int declaratorCase_ = 0;
    private java.lang.Object declarator_;
    public enum DeclaratorCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      IR_ANONYMOUS_INIT(1),
      IR_CLASS(2),
      IR_CONSTRUCTOR(3),
      IR_ENUM_ENTRY(4),
      IR_FIELD(5),
      IR_FUNCTION(6),
      IR_PROPERTY(7),
      IR_TYPE_ALIAS(8),
      IR_TYPE_PARAMETER(9),
      IR_VARIABLE(10),
      IR_VALUE_PARAMETER(11),
      DECLARATOR_NOT_SET(0);
      private int value = 0;
      private DeclaratorCase(int value) {
        this.value = value;
      }
      public static DeclaratorCase valueOf(int value) {
        switch (value) {
          case 1: return IR_ANONYMOUS_INIT;
          case 2: return IR_CLASS;
          case 3: return IR_CONSTRUCTOR;
          case 4: return IR_ENUM_ENTRY;
          case 5: return IR_FIELD;
          case 6: return IR_FUNCTION;
          case 7: return IR_PROPERTY;
          case 8: return IR_TYPE_ALIAS;
          case 9: return IR_TYPE_PARAMETER;
          case 10: return IR_VARIABLE;
          case 11: return IR_VALUE_PARAMETER;
          case 0: return DECLARATOR_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public DeclaratorCase
    getDeclaratorCase() {
      return DeclaratorCase.valueOf(
          declaratorCase_);
    }

    public static final int IR_ANONYMOUS_INIT_FIELD_NUMBER = 1;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    public boolean hasIrAnonymousInit() {
      return declaratorCase_ == 1;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit getIrAnonymousInit() {
      if (declaratorCase_ == 1) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInitOrBuilder getIrAnonymousInitOrBuilder() {
      if (declaratorCase_ == 1) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.getDefaultInstance();
    }

    public static final int IR_CLASS_FIELD_NUMBER = 2;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
     */
    public boolean hasIrClass() {
      return declaratorCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass getIrClass() {
      if (declaratorCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassOrBuilder getIrClassOrBuilder() {
      if (declaratorCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.getDefaultInstance();
    }

    public static final int IR_CONSTRUCTOR_FIELD_NUMBER = 3;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
     */
    public boolean hasIrConstructor() {
      return declaratorCase_ == 3;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor getIrConstructor() {
      if (declaratorCase_ == 3) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructorOrBuilder getIrConstructorOrBuilder() {
      if (declaratorCase_ == 3) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.getDefaultInstance();
    }

    public static final int IR_ENUM_ENTRY_FIELD_NUMBER = 4;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
     */
    public boolean hasIrEnumEntry() {
      return declaratorCase_ == 4;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry getIrEnumEntry() {
      if (declaratorCase_ == 4) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntryOrBuilder getIrEnumEntryOrBuilder() {
      if (declaratorCase_ == 4) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.getDefaultInstance();
    }

    public static final int IR_FIELD_FIELD_NUMBER = 5;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
     */
    public boolean hasIrField() {
      return declaratorCase_ == 5;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField getIrField() {
      if (declaratorCase_ == 5) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder getIrFieldOrBuilder() {
      if (declaratorCase_ == 5) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
    }

    public static final int IR_FUNCTION_FIELD_NUMBER = 6;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
     */
    public boolean hasIrFunction() {
      return declaratorCase_ == 6;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getIrFunction() {
      if (declaratorCase_ == 6) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder getIrFunctionOrBuilder() {
      if (declaratorCase_ == 6) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
    }

    public static final int IR_PROPERTY_FIELD_NUMBER = 7;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
     */
    public boolean hasIrProperty() {
      return declaratorCase_ == 7;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty getIrProperty() {
      if (declaratorCase_ == 7) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyOrBuilder getIrPropertyOrBuilder() {
      if (declaratorCase_ == 7) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.getDefaultInstance();
    }

    public static final int IR_TYPE_ALIAS_FIELD_NUMBER = 8;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
     */
    public boolean hasIrTypeAlias() {
      return declaratorCase_ == 8;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias getIrTypeAlias() {
      if (declaratorCase_ == 8) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAliasOrBuilder getIrTypeAliasOrBuilder() {
      if (declaratorCase_ == 8) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.getDefaultInstance();
    }

    public static final int IR_TYPE_PARAMETER_FIELD_NUMBER = 9;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
     */
    public boolean hasIrTypeParameter() {
      return declaratorCase_ == 9;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter getIrTypeParameter() {
      if (declaratorCase_ == 9) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterOrBuilder getIrTypeParameterOrBuilder() {
      if (declaratorCase_ == 9) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.getDefaultInstance();
    }

    public static final int IR_VARIABLE_FIELD_NUMBER = 10;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
     */
    public boolean hasIrVariable() {
      return declaratorCase_ == 10;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable getIrVariable() {
      if (declaratorCase_ == 10) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariableOrBuilder getIrVariableOrBuilder() {
      if (declaratorCase_ == 10) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.getDefaultInstance();
    }

    public static final int IR_VALUE_PARAMETER_FIELD_NUMBER = 11;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
     */
    public boolean hasIrValueParameter() {
      return declaratorCase_ == 11;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter getIrValueParameter() {
      if (declaratorCase_ == 11) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameterOrBuilder getIrValueParameterOrBuilder() {
      if (declaratorCase_ == 11) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) declarator_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.getDefaultInstance();
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasIrAnonymousInit()) {
        if (!getIrAnonymousInit().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIrClass()) {
        if (!getIrClass().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIrConstructor()) {
        if (!getIrConstructor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIrEnumEntry()) {
        if (!getIrEnumEntry().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIrField()) {
        if (!getIrField().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIrFunction()) {
        if (!getIrFunction().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIrProperty()) {
        if (!getIrProperty().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIrTypeParameter()) {
        if (!getIrTypeParameter().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIrVariable()) {
        if (!getIrVariable().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIrValueParameter()) {
        if (!getIrValueParameter().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (declaratorCase_ == 1) {
        output.writeMessage(1, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) declarator_);
      }
      if (declaratorCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) declarator_);
      }
      if (declaratorCase_ == 3) {
        output.writeMessage(3, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) declarator_);
      }
      if (declaratorCase_ == 4) {
        output.writeMessage(4, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) declarator_);
      }
      if (declaratorCase_ == 5) {
        output.writeMessage(5, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) declarator_);
      }
      if (declaratorCase_ == 6) {
        output.writeMessage(6, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) declarator_);
      }
      if (declaratorCase_ == 7) {
        output.writeMessage(7, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) declarator_);
      }
      if (declaratorCase_ == 8) {
        output.writeMessage(8, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) declarator_);
      }
      if (declaratorCase_ == 9) {
        output.writeMessage(9, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) declarator_);
      }
      if (declaratorCase_ == 10) {
        output.writeMessage(10, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) declarator_);
      }
      if (declaratorCase_ == 11) {
        output.writeMessage(11, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) declarator_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (declaratorCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) declarator_);
      }
      if (declaratorCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) declarator_);
      }
      if (declaratorCase_ == 3) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) declarator_);
      }
      if (declaratorCase_ == 4) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) declarator_);
      }
      if (declaratorCase_ == 5) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) declarator_);
      }
      if (declaratorCase_ == 6) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) declarator_);
      }
      if (declaratorCase_ == 7) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(7, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) declarator_);
      }
      if (declaratorCase_ == 8) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) declarator_);
      }
      if (declaratorCase_ == 9) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(9, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) declarator_);
      }
      if (declaratorCase_ == 10) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(10, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) declarator_);
      }
      if (declaratorCase_ == 11) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(11, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) declarator_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator}
     *
     * <pre>
     * TODO: we need an extension mechanism to accomodate new
     * IR operators in upcoming releases.
     * </pre>
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaratorOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarator_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        declaratorCase_ = 0;
        declarator_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarator_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (declaratorCase_ == 1) {
          if (irAnonymousInitBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irAnonymousInitBuilder_.build();
          }
        }
        if (declaratorCase_ == 2) {
          if (irClassBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irClassBuilder_.build();
          }
        }
        if (declaratorCase_ == 3) {
          if (irConstructorBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irConstructorBuilder_.build();
          }
        }
        if (declaratorCase_ == 4) {
          if (irEnumEntryBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irEnumEntryBuilder_.build();
          }
        }
        if (declaratorCase_ == 5) {
          if (irFieldBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irFieldBuilder_.build();
          }
        }
        if (declaratorCase_ == 6) {
          if (irFunctionBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irFunctionBuilder_.build();
          }
        }
        if (declaratorCase_ == 7) {
          if (irPropertyBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irPropertyBuilder_.build();
          }
        }
        if (declaratorCase_ == 8) {
          if (irTypeAliasBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irTypeAliasBuilder_.build();
          }
        }
        if (declaratorCase_ == 9) {
          if (irTypeParameterBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irTypeParameterBuilder_.build();
          }
        }
        if (declaratorCase_ == 10) {
          if (irVariableBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irVariableBuilder_.build();
          }
        }
        if (declaratorCase_ == 11) {
          if (irValueParameterBuilder_ == null) {
            result.declarator_ = declarator_;
          } else {
            result.declarator_ = irValueParameterBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.declaratorCase_ = declaratorCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.getDefaultInstance()) return this;
        switch (other.getDeclaratorCase()) {
          case IR_ANONYMOUS_INIT: {
            mergeIrAnonymousInit(other.getIrAnonymousInit());
            break;
          }
          case IR_CLASS: {
            mergeIrClass(other.getIrClass());
            break;
          }
          case IR_CONSTRUCTOR: {
            mergeIrConstructor(other.getIrConstructor());
            break;
          }
          case IR_ENUM_ENTRY: {
            mergeIrEnumEntry(other.getIrEnumEntry());
            break;
          }
          case IR_FIELD: {
            mergeIrField(other.getIrField());
            break;
          }
          case IR_FUNCTION: {
            mergeIrFunction(other.getIrFunction());
            break;
          }
          case IR_PROPERTY: {
            mergeIrProperty(other.getIrProperty());
            break;
          }
          case IR_TYPE_ALIAS: {
            mergeIrTypeAlias(other.getIrTypeAlias());
            break;
          }
          case IR_TYPE_PARAMETER: {
            mergeIrTypeParameter(other.getIrTypeParameter());
            break;
          }
          case IR_VARIABLE: {
            mergeIrVariable(other.getIrVariable());
            break;
          }
          case IR_VALUE_PARAMETER: {
            mergeIrValueParameter(other.getIrValueParameter());
            break;
          }
          case DECLARATOR_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasIrAnonymousInit()) {
          if (!getIrAnonymousInit().isInitialized()) {
            
            return false;
          }
        }
        if (hasIrClass()) {
          if (!getIrClass().isInitialized()) {
            
            return false;
          }
        }
        if (hasIrConstructor()) {
          if (!getIrConstructor().isInitialized()) {
            
            return false;
          }
        }
        if (hasIrEnumEntry()) {
          if (!getIrEnumEntry().isInitialized()) {
            
            return false;
          }
        }
        if (hasIrField()) {
          if (!getIrField().isInitialized()) {
            
            return false;
          }
        }
        if (hasIrFunction()) {
          if (!getIrFunction().isInitialized()) {
            
            return false;
          }
        }
        if (hasIrProperty()) {
          if (!getIrProperty().isInitialized()) {
            
            return false;
          }
        }
        if (hasIrTypeParameter()) {
          if (!getIrTypeParameter().isInitialized()) {
            
            return false;
          }
        }
        if (hasIrVariable()) {
          if (!getIrVariable().isInitialized()) {
            
            return false;
          }
        }
        if (hasIrValueParameter()) {
          if (!getIrValueParameter().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int declaratorCase_ = 0;
      private java.lang.Object declarator_;
      public DeclaratorCase
          getDeclaratorCase() {
        return DeclaratorCase.valueOf(
            declaratorCase_);
      }

      public Builder clearDeclarator() {
        declaratorCase_ = 0;
        declarator_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInitOrBuilder> irAnonymousInitBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
       */
      public boolean hasIrAnonymousInit() {
        return declaratorCase_ == 1;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit getIrAnonymousInit() {
        if (irAnonymousInitBuilder_ == null) {
          if (declaratorCase_ == 1) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.getDefaultInstance();
        } else {
          if (declaratorCase_ == 1) {
            return irAnonymousInitBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
       */
      public Builder setIrAnonymousInit(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit value) {
        if (irAnonymousInitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irAnonymousInitBuilder_.setMessage(value);
        }
        declaratorCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
       */
      public Builder setIrAnonymousInit(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.Builder builderForValue) {
        if (irAnonymousInitBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irAnonymousInitBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
       */
      public Builder mergeIrAnonymousInit(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit value) {
        if (irAnonymousInitBuilder_ == null) {
          if (declaratorCase_ == 1 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 1) {
            irAnonymousInitBuilder_.mergeFrom(value);
          }
          irAnonymousInitBuilder_.setMessage(value);
        }
        declaratorCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
       */
      public Builder clearIrAnonymousInit() {
        if (irAnonymousInitBuilder_ == null) {
          if (declaratorCase_ == 1) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 1) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irAnonymousInitBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.Builder getIrAnonymousInitBuilder() {
        return getIrAnonymousInitFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInitOrBuilder getIrAnonymousInitOrBuilder() {
        if ((declaratorCase_ == 1) && (irAnonymousInitBuilder_ != null)) {
          return irAnonymousInitBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 1) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrAnonymousInit ir_anonymous_init = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInitOrBuilder> 
          getIrAnonymousInitFieldBuilder() {
        if (irAnonymousInitBuilder_ == null) {
          if (!(declaratorCase_ == 1)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.getDefaultInstance();
          }
          irAnonymousInitBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInitOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrAnonymousInit) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 1;
        return irAnonymousInitBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassOrBuilder> irClassBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
       */
      public boolean hasIrClass() {
        return declaratorCase_ == 2;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass getIrClass() {
        if (irClassBuilder_ == null) {
          if (declaratorCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.getDefaultInstance();
        } else {
          if (declaratorCase_ == 2) {
            return irClassBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
       */
      public Builder setIrClass(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass value) {
        if (irClassBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irClassBuilder_.setMessage(value);
        }
        declaratorCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
       */
      public Builder setIrClass(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.Builder builderForValue) {
        if (irClassBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irClassBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
       */
      public Builder mergeIrClass(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass value) {
        if (irClassBuilder_ == null) {
          if (declaratorCase_ == 2 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 2) {
            irClassBuilder_.mergeFrom(value);
          }
          irClassBuilder_.setMessage(value);
        }
        declaratorCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
       */
      public Builder clearIrClass() {
        if (irClassBuilder_ == null) {
          if (declaratorCase_ == 2) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 2) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irClassBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.Builder getIrClassBuilder() {
        return getIrClassFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassOrBuilder getIrClassOrBuilder() {
        if ((declaratorCase_ == 2) && (irClassBuilder_ != null)) {
          return irClassBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrClass ir_class = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassOrBuilder> 
          getIrClassFieldBuilder() {
        if (irClassBuilder_ == null) {
          if (!(declaratorCase_ == 2)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.getDefaultInstance();
          }
          irClassBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClassOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrClass) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 2;
        return irClassBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructorOrBuilder> irConstructorBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
       */
      public boolean hasIrConstructor() {
        return declaratorCase_ == 3;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor getIrConstructor() {
        if (irConstructorBuilder_ == null) {
          if (declaratorCase_ == 3) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.getDefaultInstance();
        } else {
          if (declaratorCase_ == 3) {
            return irConstructorBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
       */
      public Builder setIrConstructor(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor value) {
        if (irConstructorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irConstructorBuilder_.setMessage(value);
        }
        declaratorCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
       */
      public Builder setIrConstructor(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.Builder builderForValue) {
        if (irConstructorBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irConstructorBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
       */
      public Builder mergeIrConstructor(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor value) {
        if (irConstructorBuilder_ == null) {
          if (declaratorCase_ == 3 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 3) {
            irConstructorBuilder_.mergeFrom(value);
          }
          irConstructorBuilder_.setMessage(value);
        }
        declaratorCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
       */
      public Builder clearIrConstructor() {
        if (irConstructorBuilder_ == null) {
          if (declaratorCase_ == 3) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 3) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irConstructorBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.Builder getIrConstructorBuilder() {
        return getIrConstructorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructorOrBuilder getIrConstructorOrBuilder() {
        if ((declaratorCase_ == 3) && (irConstructorBuilder_ != null)) {
          return irConstructorBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 3) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrConstructor ir_constructor = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructorOrBuilder> 
          getIrConstructorFieldBuilder() {
        if (irConstructorBuilder_ == null) {
          if (!(declaratorCase_ == 3)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.getDefaultInstance();
          }
          irConstructorBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructorOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrConstructor) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 3;
        return irConstructorBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntryOrBuilder> irEnumEntryBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
       */
      public boolean hasIrEnumEntry() {
        return declaratorCase_ == 4;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry getIrEnumEntry() {
        if (irEnumEntryBuilder_ == null) {
          if (declaratorCase_ == 4) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.getDefaultInstance();
        } else {
          if (declaratorCase_ == 4) {
            return irEnumEntryBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
       */
      public Builder setIrEnumEntry(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry value) {
        if (irEnumEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irEnumEntryBuilder_.setMessage(value);
        }
        declaratorCase_ = 4;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
       */
      public Builder setIrEnumEntry(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.Builder builderForValue) {
        if (irEnumEntryBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irEnumEntryBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 4;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
       */
      public Builder mergeIrEnumEntry(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry value) {
        if (irEnumEntryBuilder_ == null) {
          if (declaratorCase_ == 4 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 4) {
            irEnumEntryBuilder_.mergeFrom(value);
          }
          irEnumEntryBuilder_.setMessage(value);
        }
        declaratorCase_ = 4;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
       */
      public Builder clearIrEnumEntry() {
        if (irEnumEntryBuilder_ == null) {
          if (declaratorCase_ == 4) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 4) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irEnumEntryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.Builder getIrEnumEntryBuilder() {
        return getIrEnumEntryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntryOrBuilder getIrEnumEntryOrBuilder() {
        if ((declaratorCase_ == 4) && (irEnumEntryBuilder_ != null)) {
          return irEnumEntryBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 4) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrEnumEntry ir_enum_entry = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntryOrBuilder> 
          getIrEnumEntryFieldBuilder() {
        if (irEnumEntryBuilder_ == null) {
          if (!(declaratorCase_ == 4)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.getDefaultInstance();
          }
          irEnumEntryBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntryOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrEnumEntry) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 4;
        return irEnumEntryBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder> irFieldBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
       */
      public boolean hasIrField() {
        return declaratorCase_ == 5;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField getIrField() {
        if (irFieldBuilder_ == null) {
          if (declaratorCase_ == 5) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
        } else {
          if (declaratorCase_ == 5) {
            return irFieldBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
       */
      public Builder setIrField(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField value) {
        if (irFieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irFieldBuilder_.setMessage(value);
        }
        declaratorCase_ = 5;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
       */
      public Builder setIrField(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder builderForValue) {
        if (irFieldBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irFieldBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 5;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
       */
      public Builder mergeIrField(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField value) {
        if (irFieldBuilder_ == null) {
          if (declaratorCase_ == 5 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 5) {
            irFieldBuilder_.mergeFrom(value);
          }
          irFieldBuilder_.setMessage(value);
        }
        declaratorCase_ = 5;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
       */
      public Builder clearIrField() {
        if (irFieldBuilder_ == null) {
          if (declaratorCase_ == 5) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 5) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irFieldBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder getIrFieldBuilder() {
        return getIrFieldFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder getIrFieldOrBuilder() {
        if ((declaratorCase_ == 5) && (irFieldBuilder_ != null)) {
          return irFieldBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 5) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrField ir_field = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder> 
          getIrFieldFieldBuilder() {
        if (irFieldBuilder_ == null) {
          if (!(declaratorCase_ == 5)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.getDefaultInstance();
          }
          irFieldBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFieldOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrField) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 5;
        return irFieldBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder> irFunctionBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
       */
      public boolean hasIrFunction() {
        return declaratorCase_ == 6;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction getIrFunction() {
        if (irFunctionBuilder_ == null) {
          if (declaratorCase_ == 6) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
        } else {
          if (declaratorCase_ == 6) {
            return irFunctionBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
       */
      public Builder setIrFunction(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction value) {
        if (irFunctionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irFunctionBuilder_.setMessage(value);
        }
        declaratorCase_ = 6;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
       */
      public Builder setIrFunction(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder builderForValue) {
        if (irFunctionBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irFunctionBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 6;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
       */
      public Builder mergeIrFunction(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction value) {
        if (irFunctionBuilder_ == null) {
          if (declaratorCase_ == 6 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 6) {
            irFunctionBuilder_.mergeFrom(value);
          }
          irFunctionBuilder_.setMessage(value);
        }
        declaratorCase_ = 6;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
       */
      public Builder clearIrFunction() {
        if (irFunctionBuilder_ == null) {
          if (declaratorCase_ == 6) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 6) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irFunctionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder getIrFunctionBuilder() {
        return getIrFunctionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder getIrFunctionOrBuilder() {
        if ((declaratorCase_ == 6) && (irFunctionBuilder_ != null)) {
          return irFunctionBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 6) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrFunction ir_function = 6;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder> 
          getIrFunctionFieldBuilder() {
        if (irFunctionBuilder_ == null) {
          if (!(declaratorCase_ == 6)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.getDefaultInstance();
          }
          irFunctionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunctionOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrFunction) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 6;
        return irFunctionBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyOrBuilder> irPropertyBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
       */
      public boolean hasIrProperty() {
        return declaratorCase_ == 7;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty getIrProperty() {
        if (irPropertyBuilder_ == null) {
          if (declaratorCase_ == 7) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.getDefaultInstance();
        } else {
          if (declaratorCase_ == 7) {
            return irPropertyBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
       */
      public Builder setIrProperty(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty value) {
        if (irPropertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irPropertyBuilder_.setMessage(value);
        }
        declaratorCase_ = 7;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
       */
      public Builder setIrProperty(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.Builder builderForValue) {
        if (irPropertyBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irPropertyBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 7;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
       */
      public Builder mergeIrProperty(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty value) {
        if (irPropertyBuilder_ == null) {
          if (declaratorCase_ == 7 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 7) {
            irPropertyBuilder_.mergeFrom(value);
          }
          irPropertyBuilder_.setMessage(value);
        }
        declaratorCase_ = 7;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
       */
      public Builder clearIrProperty() {
        if (irPropertyBuilder_ == null) {
          if (declaratorCase_ == 7) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 7) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irPropertyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.Builder getIrPropertyBuilder() {
        return getIrPropertyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyOrBuilder getIrPropertyOrBuilder() {
        if ((declaratorCase_ == 7) && (irPropertyBuilder_ != null)) {
          return irPropertyBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 7) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrProperty ir_property = 7;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyOrBuilder> 
          getIrPropertyFieldBuilder() {
        if (irPropertyBuilder_ == null) {
          if (!(declaratorCase_ == 7)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.getDefaultInstance();
          }
          irPropertyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrPropertyOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrProperty) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 7;
        return irPropertyBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAliasOrBuilder> irTypeAliasBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
       */
      public boolean hasIrTypeAlias() {
        return declaratorCase_ == 8;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias getIrTypeAlias() {
        if (irTypeAliasBuilder_ == null) {
          if (declaratorCase_ == 8) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.getDefaultInstance();
        } else {
          if (declaratorCase_ == 8) {
            return irTypeAliasBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
       */
      public Builder setIrTypeAlias(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias value) {
        if (irTypeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irTypeAliasBuilder_.setMessage(value);
        }
        declaratorCase_ = 8;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
       */
      public Builder setIrTypeAlias(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.Builder builderForValue) {
        if (irTypeAliasBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irTypeAliasBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 8;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
       */
      public Builder mergeIrTypeAlias(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias value) {
        if (irTypeAliasBuilder_ == null) {
          if (declaratorCase_ == 8 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 8) {
            irTypeAliasBuilder_.mergeFrom(value);
          }
          irTypeAliasBuilder_.setMessage(value);
        }
        declaratorCase_ = 8;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
       */
      public Builder clearIrTypeAlias() {
        if (irTypeAliasBuilder_ == null) {
          if (declaratorCase_ == 8) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 8) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irTypeAliasBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.Builder getIrTypeAliasBuilder() {
        return getIrTypeAliasFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAliasOrBuilder getIrTypeAliasOrBuilder() {
        if ((declaratorCase_ == 8) && (irTypeAliasBuilder_ != null)) {
          return irTypeAliasBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 8) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeAlias ir_type_alias = 8;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAliasOrBuilder> 
          getIrTypeAliasFieldBuilder() {
        if (irTypeAliasBuilder_ == null) {
          if (!(declaratorCase_ == 8)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.getDefaultInstance();
          }
          irTypeAliasBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAliasOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeAlias) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 8;
        return irTypeAliasBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterOrBuilder> irTypeParameterBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
       */
      public boolean hasIrTypeParameter() {
        return declaratorCase_ == 9;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter getIrTypeParameter() {
        if (irTypeParameterBuilder_ == null) {
          if (declaratorCase_ == 9) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.getDefaultInstance();
        } else {
          if (declaratorCase_ == 9) {
            return irTypeParameterBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
       */
      public Builder setIrTypeParameter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter value) {
        if (irTypeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irTypeParameterBuilder_.setMessage(value);
        }
        declaratorCase_ = 9;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
       */
      public Builder setIrTypeParameter(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.Builder builderForValue) {
        if (irTypeParameterBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irTypeParameterBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 9;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
       */
      public Builder mergeIrTypeParameter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter value) {
        if (irTypeParameterBuilder_ == null) {
          if (declaratorCase_ == 9 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 9) {
            irTypeParameterBuilder_.mergeFrom(value);
          }
          irTypeParameterBuilder_.setMessage(value);
        }
        declaratorCase_ = 9;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
       */
      public Builder clearIrTypeParameter() {
        if (irTypeParameterBuilder_ == null) {
          if (declaratorCase_ == 9) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 9) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irTypeParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.Builder getIrTypeParameterBuilder() {
        return getIrTypeParameterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterOrBuilder getIrTypeParameterOrBuilder() {
        if ((declaratorCase_ == 9) && (irTypeParameterBuilder_ != null)) {
          return irTypeParameterBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 9) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrTypeParameter ir_type_parameter = 9;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterOrBuilder> 
          getIrTypeParameterFieldBuilder() {
        if (irTypeParameterBuilder_ == null) {
          if (!(declaratorCase_ == 9)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.getDefaultInstance();
          }
          irTypeParameterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameterOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrTypeParameter) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 9;
        return irTypeParameterBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariableOrBuilder> irVariableBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
       */
      public boolean hasIrVariable() {
        return declaratorCase_ == 10;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable getIrVariable() {
        if (irVariableBuilder_ == null) {
          if (declaratorCase_ == 10) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.getDefaultInstance();
        } else {
          if (declaratorCase_ == 10) {
            return irVariableBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
       */
      public Builder setIrVariable(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable value) {
        if (irVariableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irVariableBuilder_.setMessage(value);
        }
        declaratorCase_ = 10;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
       */
      public Builder setIrVariable(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.Builder builderForValue) {
        if (irVariableBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irVariableBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 10;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
       */
      public Builder mergeIrVariable(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable value) {
        if (irVariableBuilder_ == null) {
          if (declaratorCase_ == 10 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 10) {
            irVariableBuilder_.mergeFrom(value);
          }
          irVariableBuilder_.setMessage(value);
        }
        declaratorCase_ = 10;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
       */
      public Builder clearIrVariable() {
        if (irVariableBuilder_ == null) {
          if (declaratorCase_ == 10) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 10) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irVariableBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.Builder getIrVariableBuilder() {
        return getIrVariableFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariableOrBuilder getIrVariableOrBuilder() {
        if ((declaratorCase_ == 10) && (irVariableBuilder_ != null)) {
          return irVariableBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 10) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrVariable ir_variable = 10;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariableOrBuilder> 
          getIrVariableFieldBuilder() {
        if (irVariableBuilder_ == null) {
          if (!(declaratorCase_ == 10)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.getDefaultInstance();
          }
          irVariableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariableOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrVariable) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 10;
        return irVariableBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameterOrBuilder> irValueParameterBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
       */
      public boolean hasIrValueParameter() {
        return declaratorCase_ == 11;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter getIrValueParameter() {
        if (irValueParameterBuilder_ == null) {
          if (declaratorCase_ == 11) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.getDefaultInstance();
        } else {
          if (declaratorCase_ == 11) {
            return irValueParameterBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
       */
      public Builder setIrValueParameter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter value) {
        if (irValueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          irValueParameterBuilder_.setMessage(value);
        }
        declaratorCase_ = 11;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
       */
      public Builder setIrValueParameter(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.Builder builderForValue) {
        if (irValueParameterBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          irValueParameterBuilder_.setMessage(builderForValue.build());
        }
        declaratorCase_ = 11;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
       */
      public Builder mergeIrValueParameter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter value) {
        if (irValueParameterBuilder_ == null) {
          if (declaratorCase_ == 11 &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.getDefaultInstance()) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) declarator_)
                .mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          if (declaratorCase_ == 11) {
            irValueParameterBuilder_.mergeFrom(value);
          }
          irValueParameterBuilder_.setMessage(value);
        }
        declaratorCase_ = 11;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
       */
      public Builder clearIrValueParameter() {
        if (irValueParameterBuilder_ == null) {
          if (declaratorCase_ == 11) {
            declaratorCase_ = 0;
            declarator_ = null;
            onChanged();
          }
        } else {
          if (declaratorCase_ == 11) {
            declaratorCase_ = 0;
            declarator_ = null;
          }
          irValueParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.Builder getIrValueParameterBuilder() {
        return getIrValueParameterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameterOrBuilder getIrValueParameterOrBuilder() {
        if ((declaratorCase_ == 11) && (irValueParameterBuilder_ != null)) {
          return irValueParameterBuilder_.getMessageOrBuilder();
        } else {
          if (declaratorCase_ == 11) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) declarator_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrValueParameter ir_value_parameter = 11;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameterOrBuilder> 
          getIrValueParameterFieldBuilder() {
        if (irValueParameterBuilder_ == null) {
          if (!(declaratorCase_ == 11)) {
            declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.getDefaultInstance();
          }
          irValueParameterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameterOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrValueParameter) declarator_,
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        declaratorCase_ = 11;
        return irValueParameterBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator)
    }

    static {
      defaultInstance = new IrDeclarator(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator)
  }

  public interface IrDeclarationOriginOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin}
   */
  public static final class IrDeclarationOrigin extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin)
      IrDeclarationOriginOrBuilder {
    // Use IrDeclarationOrigin.newBuilder() to construct.
    private IrDeclarationOrigin(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrDeclarationOrigin(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrDeclarationOrigin defaultInstance;
    public static IrDeclarationOrigin getDefaultInstance() {
      return defaultInstance;
    }

    public IrDeclarationOrigin getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrDeclarationOrigin(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationOrigin_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationOrigin_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrDeclarationOrigin> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrDeclarationOrigin>() {
      public IrDeclarationOrigin parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrDeclarationOrigin(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrDeclarationOrigin> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>required string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      name_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOriginOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationOrigin_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationOrigin_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationOrigin_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin)
    }

    static {
      defaultInstance = new IrDeclarationOrigin(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin)
  }

  public interface IrDeclarationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
     */
    boolean hasOrigin();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin getOrigin();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOriginOrBuilder getOriginOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    boolean hasCoordinates();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
     */
    boolean hasAnnotations();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
     */
    boolean hasDeclarator();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator getDeclarator();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaratorOrBuilder getDeclaratorOrBuilder();

    /**
     * <code>required string file_name = 5;</code>
     *
     * <pre>
     *repeated IrDeclaration nested = 5;
     * </pre>
     */
    boolean hasFileName();
    /**
     * <code>required string file_name = 5;</code>
     *
     * <pre>
     *repeated IrDeclaration nested = 5;
     * </pre>
     */
    java.lang.String getFileName();
    /**
     * <code>required string file_name = 5;</code>
     *
     * <pre>
     *repeated IrDeclaration nested = 5;
     * </pre>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getFileNameBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration}
   */
  public static final class IrDeclaration extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration)
      IrDeclarationOrBuilder {
    // Use IrDeclaration.newBuilder() to construct.
    private IrDeclaration(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrDeclaration(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrDeclaration defaultInstance;
    public static IrDeclaration getDefaultInstance() {
      return defaultInstance;
    }

    public IrDeclaration getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrDeclaration(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = origin_.toBuilder();
              }
              origin_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(origin_);
                origin_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = coordinates_.toBuilder();
              }
              coordinates_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(coordinates_);
                coordinates_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = annotations_.toBuilder();
              }
              annotations_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(annotations_);
                annotations_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = declarator_.toBuilder();
              }
              declarator_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(declarator_);
                declarator_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              fileName_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclaration_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclaration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrDeclaration> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrDeclaration>() {
      public IrDeclaration parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrDeclaration(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrDeclaration> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ORIGIN_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin origin_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
     */
    public boolean hasOrigin() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin getOrigin() {
      return origin_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOriginOrBuilder getOriginOrBuilder() {
      return origin_;
    }

    public static final int COORDINATES_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates coordinates_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    public boolean hasCoordinates() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates() {
      return coordinates_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder() {
      return coordinates_;
    }

    public static final int ANNOTATIONS_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations annotations_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
     */
    public boolean hasAnnotations() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations() {
      return annotations_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder() {
      return annotations_;
    }

    public static final int DECLARATOR_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator declarator_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
     */
    public boolean hasDeclarator() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator getDeclarator() {
      return declarator_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaratorOrBuilder getDeclaratorOrBuilder() {
      return declarator_;
    }

    public static final int FILE_NAME_FIELD_NUMBER = 5;
    private java.lang.Object fileName_;
    /**
     * <code>required string file_name = 5;</code>
     *
     * <pre>
     *repeated IrDeclaration nested = 5;
     * </pre>
     */
    public boolean hasFileName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required string file_name = 5;</code>
     *
     * <pre>
     *repeated IrDeclaration nested = 5;
     * </pre>
     */
    public java.lang.String getFileName() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fileName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string file_name = 5;</code>
     *
     * <pre>
     *repeated IrDeclaration nested = 5;
     * </pre>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getFileNameBytes() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fileName_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      origin_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.getDefaultInstance();
      coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
      annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
      declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.getDefaultInstance();
      fileName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasOrigin()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCoordinates()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAnnotations()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDeclarator()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFileName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getOrigin().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCoordinates().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAnnotations().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getDeclarator().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, origin_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, coordinates_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, annotations_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, declarator_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getFileNameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, origin_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, coordinates_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, annotations_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, declarator_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(5, getFileNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclaration_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclaration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOriginFieldBuilder();
          getCoordinatesFieldBuilder();
          getAnnotationsFieldBuilder();
          getDeclaratorFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (originBuilder_ == null) {
          origin_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.getDefaultInstance();
        } else {
          originBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (coordinatesBuilder_ == null) {
          coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
        } else {
          coordinatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (annotationsBuilder_ == null) {
          annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
        } else {
          annotationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (declaratorBuilder_ == null) {
          declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.getDefaultInstance();
        } else {
          declaratorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        fileName_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclaration_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (originBuilder_ == null) {
          result.origin_ = origin_;
        } else {
          result.origin_ = originBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (coordinatesBuilder_ == null) {
          result.coordinates_ = coordinates_;
        } else {
          result.coordinates_ = coordinatesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (annotationsBuilder_ == null) {
          result.annotations_ = annotations_;
        } else {
          result.annotations_ = annotationsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (declaratorBuilder_ == null) {
          result.declarator_ = declarator_;
        } else {
          result.declarator_ = declaratorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.fileName_ = fileName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance()) return this;
        if (other.hasOrigin()) {
          mergeOrigin(other.getOrigin());
        }
        if (other.hasCoordinates()) {
          mergeCoordinates(other.getCoordinates());
        }
        if (other.hasAnnotations()) {
          mergeAnnotations(other.getAnnotations());
        }
        if (other.hasDeclarator()) {
          mergeDeclarator(other.getDeclarator());
        }
        if (other.hasFileName()) {
          bitField0_ |= 0x00000010;
          fileName_ = other.fileName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasOrigin()) {
          
          return false;
        }
        if (!hasCoordinates()) {
          
          return false;
        }
        if (!hasAnnotations()) {
          
          return false;
        }
        if (!hasDeclarator()) {
          
          return false;
        }
        if (!hasFileName()) {
          
          return false;
        }
        if (!getOrigin().isInitialized()) {
          
          return false;
        }
        if (!getCoordinates().isInitialized()) {
          
          return false;
        }
        if (!getAnnotations().isInitialized()) {
          
          return false;
        }
        if (!getDeclarator().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin origin_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOriginOrBuilder> originBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
       */
      public boolean hasOrigin() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin getOrigin() {
        if (originBuilder_ == null) {
          return origin_;
        } else {
          return originBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
       */
      public Builder setOrigin(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin value) {
        if (originBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          origin_ = value;
          onChanged();
        } else {
          originBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
       */
      public Builder setOrigin(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.Builder builderForValue) {
        if (originBuilder_ == null) {
          origin_ = builderForValue.build();
          onChanged();
        } else {
          originBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
       */
      public Builder mergeOrigin(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin value) {
        if (originBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              origin_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.getDefaultInstance()) {
            origin_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.newBuilder(origin_).mergeFrom(value).buildPartial();
          } else {
            origin_ = value;
          }
          onChanged();
        } else {
          originBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
       */
      public Builder clearOrigin() {
        if (originBuilder_ == null) {
          origin_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.getDefaultInstance();
          onChanged();
        } else {
          originBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.Builder getOriginBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getOriginFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOriginOrBuilder getOriginOrBuilder() {
        if (originBuilder_ != null) {
          return originBuilder_.getMessageOrBuilder();
        } else {
          return origin_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarationOrigin origin = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOriginOrBuilder> 
          getOriginFieldBuilder() {
        if (originBuilder_ == null) {
          originBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrigin.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOriginOrBuilder>(
                  getOrigin(),
                  getParentForChildren(),
                  isClean());
          origin_ = null;
        }
        return originBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder> coordinatesBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public boolean hasCoordinates() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates() {
        if (coordinatesBuilder_ == null) {
          return coordinates_;
        } else {
          return coordinatesBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public Builder setCoordinates(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates value) {
        if (coordinatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          coordinates_ = value;
          onChanged();
        } else {
          coordinatesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public Builder setCoordinates(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder builderForValue) {
        if (coordinatesBuilder_ == null) {
          coordinates_ = builderForValue.build();
          onChanged();
        } else {
          coordinatesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public Builder mergeCoordinates(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates value) {
        if (coordinatesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              coordinates_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance()) {
            coordinates_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.newBuilder(coordinates_).mergeFrom(value).buildPartial();
          } else {
            coordinates_ = value;
          }
          onChanged();
        } else {
          coordinatesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public Builder clearCoordinates() {
        if (coordinatesBuilder_ == null) {
          coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
          onChanged();
        } else {
          coordinatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder getCoordinatesBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getCoordinatesFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder() {
        if (coordinatesBuilder_ != null) {
          return coordinatesBuilder_.getMessageOrBuilder();
        } else {
          return coordinates_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder> 
          getCoordinatesFieldBuilder() {
        if (coordinatesBuilder_ == null) {
          coordinatesBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder>(
                  getCoordinates(),
                  getParentForChildren(),
                  isClean());
          coordinates_ = null;
        }
        return coordinatesBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder> annotationsBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
       */
      public boolean hasAnnotations() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations getAnnotations() {
        if (annotationsBuilder_ == null) {
          return annotations_;
        } else {
          return annotationsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
       */
      public Builder setAnnotations(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations value) {
        if (annotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          annotations_ = value;
          onChanged();
        } else {
          annotationsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
       */
      public Builder setAnnotations(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder builderForValue) {
        if (annotationsBuilder_ == null) {
          annotations_ = builderForValue.build();
          onChanged();
        } else {
          annotationsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
       */
      public Builder mergeAnnotations(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations value) {
        if (annotationsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              annotations_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance()) {
            annotations_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.newBuilder(annotations_).mergeFrom(value).buildPartial();
          } else {
            annotations_ = value;
          }
          onChanged();
        } else {
          annotationsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
       */
      public Builder clearAnnotations() {
        if (annotationsBuilder_ == null) {
          annotations_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.getDefaultInstance();
          onChanged();
        } else {
          annotationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder getAnnotationsBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getAnnotationsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder getAnnotationsOrBuilder() {
        if (annotationsBuilder_ != null) {
          return annotationsBuilder_.getMessageOrBuilder();
        } else {
          return annotations_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Annotations annotations = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder> 
          getAnnotationsFieldBuilder() {
        if (annotationsBuilder_ == null) {
          annotationsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Annotations.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.AnnotationsOrBuilder>(
                  getAnnotations(),
                  getParentForChildren(),
                  isClean());
          annotations_ = null;
        }
        return annotationsBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaratorOrBuilder> declaratorBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
       */
      public boolean hasDeclarator() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator getDeclarator() {
        if (declaratorBuilder_ == null) {
          return declarator_;
        } else {
          return declaratorBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
       */
      public Builder setDeclarator(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator value) {
        if (declaratorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarator_ = value;
          onChanged();
        } else {
          declaratorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
       */
      public Builder setDeclarator(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.Builder builderForValue) {
        if (declaratorBuilder_ == null) {
          declarator_ = builderForValue.build();
          onChanged();
        } else {
          declaratorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
       */
      public Builder mergeDeclarator(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator value) {
        if (declaratorBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              declarator_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.getDefaultInstance()) {
            declarator_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.newBuilder(declarator_).mergeFrom(value).buildPartial();
          } else {
            declarator_ = value;
          }
          onChanged();
        } else {
          declaratorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
       */
      public Builder clearDeclarator() {
        if (declaratorBuilder_ == null) {
          declarator_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.getDefaultInstance();
          onChanged();
        } else {
          declaratorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.Builder getDeclaratorBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getDeclaratorFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaratorOrBuilder getDeclaratorOrBuilder() {
        if (declaratorBuilder_ != null) {
          return declaratorBuilder_.getMessageOrBuilder();
        } else {
          return declarator_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclarator declarator = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaratorOrBuilder> 
          getDeclaratorFieldBuilder() {
        if (declaratorBuilder_ == null) {
          declaratorBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarator.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaratorOrBuilder>(
                  getDeclarator(),
                  getParentForChildren(),
                  isClean());
          declarator_ = null;
        }
        return declaratorBuilder_;
      }

      private java.lang.Object fileName_ = "";
      /**
       * <code>required string file_name = 5;</code>
       *
       * <pre>
       *repeated IrDeclaration nested = 5;
       * </pre>
       */
      public boolean hasFileName() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required string file_name = 5;</code>
       *
       * <pre>
       *repeated IrDeclaration nested = 5;
       * </pre>
       */
      public java.lang.String getFileName() {
        java.lang.Object ref = fileName_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fileName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string file_name = 5;</code>
       *
       * <pre>
       *repeated IrDeclaration nested = 5;
       * </pre>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getFileNameBytes() {
        java.lang.Object ref = fileName_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fileName_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string file_name = 5;</code>
       *
       * <pre>
       *repeated IrDeclaration nested = 5;
       * </pre>
       */
      public Builder setFileName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        fileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string file_name = 5;</code>
       *
       * <pre>
       *repeated IrDeclaration nested = 5;
       * </pre>
       */
      public Builder clearFileName() {
        bitField0_ = (bitField0_ & ~0x00000010);
        fileName_ = getDefaultInstance().getFileName();
        onChanged();
        return this;
      }
      /**
       * <code>required string file_name = 5;</code>
       *
       * <pre>
       *repeated IrDeclaration nested = 5;
       * </pre>
       */
      public Builder setFileNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        fileName_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration)
    }

    static {
      defaultInstance = new IrDeclaration(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration)
  }

  public interface IrBranchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
     */
    boolean hasCondition();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getCondition();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getConditionOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    boolean hasResult();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getResult();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getResultOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch}
   */
  public static final class IrBranch extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch)
      IrBranchOrBuilder {
    // Use IrBranch.newBuilder() to construct.
    private IrBranch(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrBranch(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrBranch defaultInstance;
    public static IrBranch getDefaultInstance() {
      return defaultInstance;
    }

    public IrBranch getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrBranch(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = condition_.toBuilder();
              }
              condition_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(condition_);
                condition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = result_.toBuilder();
              }
              result_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(result_);
                result_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBranch_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBranch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrBranch> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrBranch>() {
      public IrBranch parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrBranch(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrBranch> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CONDITION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression condition_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
     */
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getCondition() {
      return condition_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getConditionOrBuilder() {
      return condition_;
    }

    public static final int RESULT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression result_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getResult() {
      return result_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getResultOrBuilder() {
      return result_;
    }

    private void initFields() {
      condition_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCondition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCondition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getResult().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, condition_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, result_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, condition_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, result_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranchOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBranch_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBranch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getConditionFieldBuilder();
          getResultFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (conditionBuilder_ == null) {
          condition_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          conditionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (resultBuilder_ == null) {
          result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          resultBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBranch_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (conditionBuilder_ == null) {
          result.condition_ = condition_;
        } else {
          result.condition_ = conditionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (resultBuilder_ == null) {
          result.result_ = result_;
        } else {
          result.result_ = resultBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.getDefaultInstance()) return this;
        if (other.hasCondition()) {
          mergeCondition(other.getCondition());
        }
        if (other.hasResult()) {
          mergeResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCondition()) {
          
          return false;
        }
        if (!hasResult()) {
          
          return false;
        }
        if (!getCondition().isInitialized()) {
          
          return false;
        }
        if (!getResult().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression condition_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> conditionBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
       */
      public boolean hasCondition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getCondition() {
        if (conditionBuilder_ == null) {
          return condition_;
        } else {
          return conditionBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
       */
      public Builder setCondition(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (conditionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          condition_ = value;
          onChanged();
        } else {
          conditionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
       */
      public Builder setCondition(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (conditionBuilder_ == null) {
          condition_ = builderForValue.build();
          onChanged();
        } else {
          conditionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
       */
      public Builder mergeCondition(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (conditionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              condition_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            condition_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(condition_).mergeFrom(value).buildPartial();
          } else {
            condition_ = value;
          }
          onChanged();
        } else {
          conditionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
       */
      public Builder clearCondition() {
        if (conditionBuilder_ == null) {
          condition_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          conditionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getConditionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getConditionFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getConditionOrBuilder() {
        if (conditionBuilder_ != null) {
          return conditionBuilder_.getMessageOrBuilder();
        } else {
          return condition_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression condition = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getConditionFieldBuilder() {
        if (conditionBuilder_ == null) {
          conditionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getCondition(),
                  getParentForChildren(),
                  isClean());
          condition_ = null;
        }
        return conditionBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> resultBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getResult() {
        if (resultBuilder_ == null) {
          return result_;
        } else {
          return resultBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public Builder setResult(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (resultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          result_ = value;
          onChanged();
        } else {
          resultBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public Builder setResult(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (resultBuilder_ == null) {
          result_ = builderForValue.build();
          onChanged();
        } else {
          resultBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public Builder mergeResult(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (resultBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              result_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            result_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(result_).mergeFrom(value).buildPartial();
          } else {
            result_ = value;
          }
          onChanged();
        } else {
          resultBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public Builder clearResult() {
        if (resultBuilder_ == null) {
          result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          resultBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getResultBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getResultFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getResultOrBuilder() {
        if (resultBuilder_ != null) {
          return resultBuilder_.getMessageOrBuilder();
        } else {
          return result_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getResultFieldBuilder() {
        if (resultBuilder_ == null) {
          resultBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getResult(),
                  getParentForChildren(),
                  isClean());
          result_ = null;
        }
        return resultBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch)
    }

    static {
      defaultInstance = new IrBranch(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch)
  }

  public interface IrBlockBodyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> 
        getStatementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getStatement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    int getStatementCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
        getStatementOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getStatementOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody}
   */
  public static final class IrBlockBody extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody)
      IrBlockBodyOrBuilder {
    // Use IrBlockBody.newBuilder() to construct.
    private IrBlockBody(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrBlockBody(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrBlockBody defaultInstance;
    public static IrBlockBody getDefaultInstance() {
      return defaultInstance;
    }

    public IrBlockBody getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrBlockBody(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                statement_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement>();
                mutable_bitField0_ |= 0x00000001;
              }
              statement_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          statement_ = java.util.Collections.unmodifiableList(statement_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlockBody_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlockBody_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrBlockBody> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrBlockBody>() {
      public IrBlockBody parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrBlockBody(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrBlockBody> getParserForType() {
      return PARSER;
    }

    public static final int STATEMENT_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> statement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> getStatementList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
        getStatementOrBuilderList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    public int getStatementCount() {
      return statement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getStatement(int index) {
      return statement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getStatementOrBuilder(
        int index) {
      return statement_.get(index);
    }

    private void initFields() {
      statement_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getStatementCount(); i++) {
        if (!getStatement(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < statement_.size(); i++) {
        output.writeMessage(1, statement_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < statement_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, statement_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBodyOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlockBody_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlockBody_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStatementFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          statementBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlockBody_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody(this);
        int from_bitField0_ = bitField0_;
        if (statementBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            statement_ = java.util.Collections.unmodifiableList(statement_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.statement_ = statement_;
        } else {
          result.statement_ = statementBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.getDefaultInstance()) return this;
        if (statementBuilder_ == null) {
          if (!other.statement_.isEmpty()) {
            if (statement_.isEmpty()) {
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureStatementIsMutable();
              statement_.addAll(other.statement_);
            }
            onChanged();
          }
        } else {
          if (!other.statement_.isEmpty()) {
            if (statementBuilder_.isEmpty()) {
              statementBuilder_.dispose();
              statementBuilder_ = null;
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000001);
              statementBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStatementFieldBuilder() : null;
            } else {
              statementBuilder_.addAllMessages(other.statement_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getStatementCount(); i++) {
          if (!getStatement(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> statement_ =
        java.util.Collections.emptyList();
      private void ensureStatementIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          statement_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement>(statement_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> statementBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> getStatementList() {
        if (statementBuilder_ == null) {
          return java.util.Collections.unmodifiableList(statement_);
        } else {
          return statementBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public int getStatementCount() {
        if (statementBuilder_ == null) {
          return statement_.size();
        } else {
          return statementBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getStatement(int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);
        } else {
          return statementBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.set(index, value);
          onChanged();
        } else {
          statementBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.set(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder addStatement(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(value);
          onChanged();
        } else {
          statementBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(index, value);
          onChanged();
        } else {
          statementBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder addStatement(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder addAllStatement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement> values) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, statement_);
          onChanged();
        } else {
          statementBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder clearStatement() {
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          statementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public Builder removeStatement(int index) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.remove(index);
          onChanged();
        } else {
          statementBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder getStatementBuilder(
          int index) {
        return getStatementFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder getStatementOrBuilder(
          int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);  } else {
          return statementBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
           getStatementOrBuilderList() {
        if (statementBuilder_ != null) {
          return statementBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(statement_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder addStatementBuilder() {
        return getStatementFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder addStatementBuilder(
          int index) {
        return getStatementFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement statement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder> 
           getStatementBuilderList() {
        return getStatementFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder> 
          getStatementFieldBuilder() {
        if (statementBuilder_ == null) {
          statementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder>(
                  statement_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        return statementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody)
    }

    static {
      defaultInstance = new IrBlockBody(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody)
  }

  public interface IrCatchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
     */
    boolean hasCatchParameter();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getCatchParameter();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getCatchParameterOrBuilder();

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    boolean hasResult();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getResult();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getResultOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch}
   */
  public static final class IrCatch extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch)
      IrCatchOrBuilder {
    // Use IrCatch.newBuilder() to construct.
    private IrCatch(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrCatch(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrCatch defaultInstance;
    public static IrCatch getDefaultInstance() {
      return defaultInstance;
    }

    public IrCatch getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrCatch(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = catchParameter_.toBuilder();
              }
              catchParameter_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(catchParameter_);
                catchParameter_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = result_.toBuilder();
              }
              result_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(result_);
                result_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCatch_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCatch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrCatch> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrCatch>() {
      public IrCatch parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrCatch(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrCatch> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CATCH_PARAMETER_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration catchParameter_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
     */
    public boolean hasCatchParameter() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getCatchParameter() {
      return catchParameter_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getCatchParameterOrBuilder() {
      return catchParameter_;
    }

    public static final int RESULT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression result_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getResult() {
      return result_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getResultOrBuilder() {
      return result_;
    }

    private void initFields() {
      catchParameter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCatchParameter()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCatchParameter().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getResult().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, catchParameter_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, result_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, catchParameter_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, result_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatchOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCatch_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCatch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCatchParameterFieldBuilder();
          getResultFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (catchParameterBuilder_ == null) {
          catchParameter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
        } else {
          catchParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (resultBuilder_ == null) {
          result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          resultBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCatch_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (catchParameterBuilder_ == null) {
          result.catchParameter_ = catchParameter_;
        } else {
          result.catchParameter_ = catchParameterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (resultBuilder_ == null) {
          result.result_ = result_;
        } else {
          result.result_ = resultBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.getDefaultInstance()) return this;
        if (other.hasCatchParameter()) {
          mergeCatchParameter(other.getCatchParameter());
        }
        if (other.hasResult()) {
          mergeResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCatchParameter()) {
          
          return false;
        }
        if (!hasResult()) {
          
          return false;
        }
        if (!getCatchParameter().isInitialized()) {
          
          return false;
        }
        if (!getResult().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration catchParameter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> catchParameterBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
       */
      public boolean hasCatchParameter() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getCatchParameter() {
        if (catchParameterBuilder_ == null) {
          return catchParameter_;
        } else {
          return catchParameterBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
       */
      public Builder setCatchParameter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (catchParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          catchParameter_ = value;
          onChanged();
        } else {
          catchParameterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
       */
      public Builder setCatchParameter(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (catchParameterBuilder_ == null) {
          catchParameter_ = builderForValue.build();
          onChanged();
        } else {
          catchParameterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
       */
      public Builder mergeCatchParameter(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (catchParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              catchParameter_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance()) {
            catchParameter_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.newBuilder(catchParameter_).mergeFrom(value).buildPartial();
          } else {
            catchParameter_ = value;
          }
          onChanged();
        } else {
          catchParameterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
       */
      public Builder clearCatchParameter() {
        if (catchParameterBuilder_ == null) {
          catchParameter_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
          onChanged();
        } else {
          catchParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder getCatchParameterBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCatchParameterFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getCatchParameterOrBuilder() {
        if (catchParameterBuilder_ != null) {
          return catchParameterBuilder_.getMessageOrBuilder();
        } else {
          return catchParameter_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration catch_parameter = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
          getCatchParameterFieldBuilder() {
        if (catchParameterBuilder_ == null) {
          catchParameterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder>(
                  getCatchParameter(),
                  getParentForChildren(),
                  isClean());
          catchParameter_ = null;
        }
        return catchParameterBuilder_;
      }

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> resultBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getResult() {
        if (resultBuilder_ == null) {
          return result_;
        } else {
          return resultBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public Builder setResult(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (resultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          result_ = value;
          onChanged();
        } else {
          resultBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public Builder setResult(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (resultBuilder_ == null) {
          result_ = builderForValue.build();
          onChanged();
        } else {
          resultBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public Builder mergeResult(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (resultBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              result_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            result_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder(result_).mergeFrom(value).buildPartial();
          } else {
            result_ = value;
          }
          onChanged();
        } else {
          resultBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public Builder clearResult() {
        if (resultBuilder_ == null) {
          result_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          onChanged();
        } else {
          resultBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getResultBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getResultFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getResultOrBuilder() {
        if (resultBuilder_ != null) {
          return resultBuilder_.getMessageOrBuilder();
        } else {
          return result_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression result = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getResultFieldBuilder() {
        if (resultBuilder_ == null) {
          resultBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  getResult(),
                  getParentForChildren(),
                  isClean());
          result_ = null;
        }
        return resultBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch)
    }

    static {
      defaultInstance = new IrCatch(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch)
  }

  public interface IrSyntheticBodyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBodyKind kind = 1;</code>
     */
    boolean hasKind();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBodyKind kind = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind getKind();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody}
   */
  public static final class IrSyntheticBody extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody)
      IrSyntheticBodyOrBuilder {
    // Use IrSyntheticBody.newBuilder() to construct.
    private IrSyntheticBody(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrSyntheticBody(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrSyntheticBody defaultInstance;
    public static IrSyntheticBody getDefaultInstance() {
      return defaultInstance;
    }

    public IrSyntheticBody getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrSyntheticBody(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind value = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                kind_ = value;
              }
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSyntheticBody_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSyntheticBody_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrSyntheticBody> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrSyntheticBody>() {
      public IrSyntheticBody parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrSyntheticBody(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrSyntheticBody> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int KIND_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind kind_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBodyKind kind = 1;</code>
     */
    public boolean hasKind() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBodyKind kind = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind getKind() {
      return kind_;
    }

    private void initFields() {
      kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind.ENUM_VALUES;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasKind()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, kind_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(1, kind_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSyntheticBody_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSyntheticBody_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind.ENUM_VALUES;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSyntheticBody_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.kind_ = kind_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.getDefaultInstance()) return this;
        if (other.hasKind()) {
          setKind(other.getKind());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasKind()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind.ENUM_VALUES;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBodyKind kind = 1;</code>
       */
      public boolean hasKind() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBodyKind kind = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind getKind() {
        return kind_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBodyKind kind = 1;</code>
       */
      public Builder setKind(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        kind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBodyKind kind = 1;</code>
       */
      public Builder clearKind() {
        bitField0_ = (bitField0_ & ~0x00000001);
        kind_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyKind.ENUM_VALUES;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody)
    }

    static {
      defaultInstance = new IrSyntheticBody(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody)
  }

  public interface IrStatementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
     */
    boolean hasCoordinates();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates();
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
     */
    boolean hasDeclaration();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getDeclaration();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getDeclarationOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
     */
    boolean hasExpression();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
     */
    boolean hasBlockBody();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody getBlockBody();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBodyOrBuilder getBlockBodyOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
     */
    boolean hasBranch();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch getBranch();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranchOrBuilder getBranchOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
     */
    boolean hasCatch();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch getCatch();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatchOrBuilder getCatchOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
     */
    boolean hasSyntheticBody();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody getSyntheticBody();
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyOrBuilder getSyntheticBodyOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement}
   *
   * <pre>
   * Let's try to map IrElement as well as IrStatement to IrStatement.
   * </pre>
   */
  public static final class IrStatement extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement)
      IrStatementOrBuilder {
    // Use IrStatement.newBuilder() to construct.
    private IrStatement(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IrStatement(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IrStatement defaultInstance;
    public static IrStatement getDefaultInstance() {
      return defaultInstance;
    }

    public IrStatement getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IrStatement(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = coordinates_.toBuilder();
              }
              coordinates_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(coordinates_);
                coordinates_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder subBuilder = null;
              if (statementCase_ == 2) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) statement_).toBuilder();
              }
              statement_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) statement_);
                statement_ = subBuilder.buildPartial();
              }
              statementCase_ = 2;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder subBuilder = null;
              if (statementCase_ == 3) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) statement_).toBuilder();
              }
              statement_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) statement_);
                statement_ = subBuilder.buildPartial();
              }
              statementCase_ = 3;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.Builder subBuilder = null;
              if (statementCase_ == 4) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) statement_).toBuilder();
              }
              statement_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) statement_);
                statement_ = subBuilder.buildPartial();
              }
              statementCase_ = 4;
              break;
            }
            case 42: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.Builder subBuilder = null;
              if (statementCase_ == 5) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) statement_).toBuilder();
              }
              statement_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) statement_);
                statement_ = subBuilder.buildPartial();
              }
              statementCase_ = 5;
              break;
            }
            case 50: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.Builder subBuilder = null;
              if (statementCase_ == 6) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) statement_).toBuilder();
              }
              statement_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) statement_);
                statement_ = subBuilder.buildPartial();
              }
              statementCase_ = 6;
              break;
            }
            case 58: {
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.Builder subBuilder = null;
              if (statementCase_ == 7) {
                subBuilder = ((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) statement_).toBuilder();
              }
              statement_ = input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) statement_);
                statement_ = subBuilder.buildPartial();
              }
              statementCase_ = 7;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStatement_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStatement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<IrStatement> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<IrStatement>() {
      public IrStatement parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new IrStatement(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrStatement> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int statementCase_ = 0;
    private java.lang.Object statement_;
    public enum StatementCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      DECLARATION(2),
      EXPRESSION(3),
      BLOCK_BODY(4),
      BRANCH(5),
      CATCH(6),
      SYNTHETIC_BODY(7),
      STATEMENT_NOT_SET(0);
      private int value = 0;
      private StatementCase(int value) {
        this.value = value;
      }
      public static StatementCase valueOf(int value) {
        switch (value) {
          case 2: return DECLARATION;
          case 3: return EXPRESSION;
          case 4: return BLOCK_BODY;
          case 5: return BRANCH;
          case 6: return CATCH;
          case 7: return SYNTHETIC_BODY;
          case 0: return STATEMENT_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public StatementCase
    getStatementCase() {
      return StatementCase.valueOf(
          statementCase_);
    }

    public static final int COORDINATES_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates coordinates_;
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
     */
    public boolean hasCoordinates() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates() {
      return coordinates_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder() {
      return coordinates_;
    }

    public static final int DECLARATION_FIELD_NUMBER = 2;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
     */
    public boolean hasDeclaration() {
      return statementCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getDeclaration() {
      if (statementCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getDeclarationOrBuilder() {
      if (statementCase_ == 2) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
    }

    public static final int EXPRESSION_FIELD_NUMBER = 3;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
     */
    public boolean hasExpression() {
      return statementCase_ == 3;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression() {
      if (statementCase_ == 3) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder() {
      if (statementCase_ == 3) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
    }

    public static final int BLOCK_BODY_FIELD_NUMBER = 4;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
     */
    public boolean hasBlockBody() {
      return statementCase_ == 4;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody getBlockBody() {
      if (statementCase_ == 4) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBodyOrBuilder getBlockBodyOrBuilder() {
      if (statementCase_ == 4) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.getDefaultInstance();
    }

    public static final int BRANCH_FIELD_NUMBER = 5;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
     */
    public boolean hasBranch() {
      return statementCase_ == 5;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch getBranch() {
      if (statementCase_ == 5) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranchOrBuilder getBranchOrBuilder() {
      if (statementCase_ == 5) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.getDefaultInstance();
    }

    public static final int CATCH_FIELD_NUMBER = 6;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
     */
    public boolean hasCatch() {
      return statementCase_ == 6;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch getCatch() {
      if (statementCase_ == 6) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatchOrBuilder getCatchOrBuilder() {
      if (statementCase_ == 6) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.getDefaultInstance();
    }

    public static final int SYNTHETIC_BODY_FIELD_NUMBER = 7;
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
     */
    public boolean hasSyntheticBody() {
      return statementCase_ == 7;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody getSyntheticBody() {
      if (statementCase_ == 7) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyOrBuilder getSyntheticBodyOrBuilder() {
      if (statementCase_ == 7) {
         return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) statement_;
      }
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.getDefaultInstance();
    }

    private void initFields() {
      coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCoordinates()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCoordinates().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasDeclaration()) {
        if (!getDeclaration().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasBlockBody()) {
        if (!getBlockBody().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasBranch()) {
        if (!getBranch().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCatch()) {
        if (!getCatch().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSyntheticBody()) {
        if (!getSyntheticBody().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, coordinates_);
      }
      if (statementCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) statement_);
      }
      if (statementCase_ == 3) {
        output.writeMessage(3, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) statement_);
      }
      if (statementCase_ == 4) {
        output.writeMessage(4, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) statement_);
      }
      if (statementCase_ == 5) {
        output.writeMessage(5, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) statement_);
      }
      if (statementCase_ == 6) {
        output.writeMessage(6, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) statement_);
      }
      if (statementCase_ == 7) {
        output.writeMessage(7, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) statement_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, coordinates_);
      }
      if (statementCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) statement_);
      }
      if (statementCase_ == 3) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) statement_);
      }
      if (statementCase_ == 4) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) statement_);
      }
      if (statementCase_ == 5) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) statement_);
      }
      if (statementCase_ == 6) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) statement_);
      }
      if (statementCase_ == 7) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(7, (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) statement_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement}
     *
     * <pre>
     * Let's try to map IrElement as well as IrStatement to IrStatement.
     * </pre>
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatementOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStatement_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStatement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCoordinatesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (coordinatesBuilder_ == null) {
          coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
        } else {
          coordinatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        statementCase_ = 0;
        statement_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStatement_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (coordinatesBuilder_ == null) {
          result.coordinates_ = coordinates_;
        } else {
          result.coordinates_ = coordinatesBuilder_.build();
        }
        if (statementCase_ == 2) {
          if (declarationBuilder_ == null) {
            result.statement_ = statement_;
          } else {
            result.statement_ = declarationBuilder_.build();
          }
        }
        if (statementCase_ == 3) {
          if (expressionBuilder_ == null) {
            result.statement_ = statement_;
          } else {
            result.statement_ = expressionBuilder_.build();
          }
        }
        if (statementCase_ == 4) {
          if (blockBodyBuilder_ == null) {
            result.statement_ = statement_;
          } else {
            result.statement_ = blockBodyBuilder_.build();
          }
        }
        if (statementCase_ == 5) {
          if (branchBuilder_ == null) {
            result.statement_ = statement_;
          } else {
            result.statement_ = branchBuilder_.build();
          }
        }
        if (statementCase_ == 6) {
          if (catchBuilder_ == null) {
            result.statement_ = statement_;
          } else {
            result.statement_ = catchBuilder_.build();
          }
        }
        if (statementCase_ == 7) {
          if (syntheticBodyBuilder_ == null) {
            result.statement_ = statement_;
          } else {
            result.statement_ = syntheticBodyBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.statementCase_ = statementCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement.getDefaultInstance()) return this;
        if (other.hasCoordinates()) {
          mergeCoordinates(other.getCoordinates());
        }
        switch (other.getStatementCase()) {
          case DECLARATION: {
            mergeDeclaration(other.getDeclaration());
            break;
          }
          case EXPRESSION: {
            mergeExpression(other.getExpression());
            break;
          }
          case BLOCK_BODY: {
            mergeBlockBody(other.getBlockBody());
            break;
          }
          case BRANCH: {
            mergeBranch(other.getBranch());
            break;
          }
          case CATCH: {
            mergeCatch(other.getCatch());
            break;
          }
          case SYNTHETIC_BODY: {
            mergeSyntheticBody(other.getSyntheticBody());
            break;
          }
          case STATEMENT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCoordinates()) {
          
          return false;
        }
        if (!getCoordinates().isInitialized()) {
          
          return false;
        }
        if (hasDeclaration()) {
          if (!getDeclaration().isInitialized()) {
            
            return false;
          }
        }
        if (hasExpression()) {
          if (!getExpression().isInitialized()) {
            
            return false;
          }
        }
        if (hasBlockBody()) {
          if (!getBlockBody().isInitialized()) {
            
            return false;
          }
        }
        if (hasBranch()) {
          if (!getBranch().isInitialized()) {
            
            return false;
          }
        }
        if (hasCatch()) {
          if (!getCatch().isInitialized()) {
            
            return false;
          }
        }
        if (hasSyntheticBody()) {
          if (!getSyntheticBody().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrStatement) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int statementCase_ = 0;
      private java.lang.Object statement_;
      public StatementCase
          getStatementCase() {
        return StatementCase.valueOf(
            statementCase_);
      }

      public Builder clearStatement() {
        statementCase_ = 0;
        statement_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder> coordinatesBuilder_;
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
       */
      public boolean hasCoordinates() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates getCoordinates() {
        if (coordinatesBuilder_ == null) {
          return coordinates_;
        } else {
          return coordinatesBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
       */
      public Builder setCoordinates(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates value) {
        if (coordinatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          coordinates_ = value;
          onChanged();
        } else {
          coordinatesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
       */
      public Builder setCoordinates(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder builderForValue) {
        if (coordinatesBuilder_ == null) {
          coordinates_ = builderForValue.build();
          onChanged();
        } else {
          coordinatesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
       */
      public Builder mergeCoordinates(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates value) {
        if (coordinatesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              coordinates_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance()) {
            coordinates_ =
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.newBuilder(coordinates_).mergeFrom(value).buildPartial();
          } else {
            coordinates_ = value;
          }
          onChanged();
        } else {
          coordinatesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
       */
      public Builder clearCoordinates() {
        if (coordinatesBuilder_ == null) {
          coordinates_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.getDefaultInstance();
          onChanged();
        } else {
          coordinatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder getCoordinatesBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCoordinatesFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder getCoordinatesOrBuilder() {
        if (coordinatesBuilder_ != null) {
          return coordinatesBuilder_.getMessageOrBuilder();
        } else {
          return coordinates_;
        }
      }
      /**
       * <code>required .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Coordinates coordinates = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder> 
          getCoordinatesFieldBuilder() {
        if (coordinatesBuilder_ == null) {
          coordinatesBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.Coordinates.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.CoordinatesOrBuilder>(
                  getCoordinates(),
                  getParentForChildren(),
                  isClean());
          coordinates_ = null;
        }
        return coordinatesBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> declarationBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
       */
      public boolean hasDeclaration() {
        return statementCase_ == 2;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration getDeclaration() {
        if (declarationBuilder_ == null) {
          if (statementCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
        } else {
          if (statementCase_ == 2) {
            return declarationBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
       */
      public Builder setDeclaration(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (declarationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          declarationBuilder_.setMessage(value);
        }
        statementCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
       */
      public Builder setDeclaration(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder builderForValue) {
        if (declarationBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          declarationBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
       */
      public Builder mergeDeclaration(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration value) {
        if (declarationBuilder_ == null) {
          if (statementCase_ == 2 &&
              statement_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 2) {
            declarationBuilder_.mergeFrom(value);
          }
          declarationBuilder_.setMessage(value);
        }
        statementCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
       */
      public Builder clearDeclaration() {
        if (declarationBuilder_ == null) {
          if (statementCase_ == 2) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 2) {
            statementCase_ = 0;
            statement_ = null;
          }
          declarationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder getDeclarationBuilder() {
        return getDeclarationFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder getDeclarationOrBuilder() {
        if ((statementCase_ == 2) && (declarationBuilder_ != null)) {
          return declarationBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 2) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrDeclaration declaration = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder> 
          getDeclarationFieldBuilder() {
        if (declarationBuilder_ == null) {
          if (!(statementCase_ == 2)) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.getDefaultInstance();
          }
          declarationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclarationOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrDeclaration) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 2;
        return declarationBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
       */
      public boolean hasExpression() {
        return statementCase_ == 3;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression getExpression() {
        if (expressionBuilder_ == null) {
          if (statementCase_ == 3) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        } else {
          if (statementCase_ == 3) {
            return expressionBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          expressionBuilder_.setMessage(value);
        }
        statementCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression value) {
        if (expressionBuilder_ == null) {
          if (statementCase_ == 3 &&
              statement_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 3) {
            expressionBuilder_.mergeFrom(value);
          }
          expressionBuilder_.setMessage(value);
        }
        statementCase_ = 3;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
       */
      public Builder clearExpression() {
        if (expressionBuilder_ == null) {
          if (statementCase_ == 3) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 3) {
            statementCase_ = 0;
            statement_ = null;
          }
          expressionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder getExpressionBuilder() {
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder getExpressionOrBuilder() {
        if ((statementCase_ == 3) && (expressionBuilder_ != null)) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 3) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrExpression expression = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          if (!(statementCase_ == 3)) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.getDefaultInstance();
          }
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpressionOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrExpression) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 3;
        return expressionBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBodyOrBuilder> blockBodyBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
       */
      public boolean hasBlockBody() {
        return statementCase_ == 4;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody getBlockBody() {
        if (blockBodyBuilder_ == null) {
          if (statementCase_ == 4) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.getDefaultInstance();
        } else {
          if (statementCase_ == 4) {
            return blockBodyBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
       */
      public Builder setBlockBody(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody value) {
        if (blockBodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          blockBodyBuilder_.setMessage(value);
        }
        statementCase_ = 4;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
       */
      public Builder setBlockBody(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.Builder builderForValue) {
        if (blockBodyBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          blockBodyBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 4;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
       */
      public Builder mergeBlockBody(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody value) {
        if (blockBodyBuilder_ == null) {
          if (statementCase_ == 4 &&
              statement_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 4) {
            blockBodyBuilder_.mergeFrom(value);
          }
          blockBodyBuilder_.setMessage(value);
        }
        statementCase_ = 4;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
       */
      public Builder clearBlockBody() {
        if (blockBodyBuilder_ == null) {
          if (statementCase_ == 4) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 4) {
            statementCase_ = 0;
            statement_ = null;
          }
          blockBodyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.Builder getBlockBodyBuilder() {
        return getBlockBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBodyOrBuilder getBlockBodyOrBuilder() {
        if ((statementCase_ == 4) && (blockBodyBuilder_ != null)) {
          return blockBodyBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 4) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBlockBody block_body = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBodyOrBuilder> 
          getBlockBodyFieldBuilder() {
        if (blockBodyBuilder_ == null) {
          if (!(statementCase_ == 4)) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.getDefaultInstance();
          }
          blockBodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBodyOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBlockBody) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 4;
        return blockBodyBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranchOrBuilder> branchBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
       */
      public boolean hasBranch() {
        return statementCase_ == 5;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch getBranch() {
        if (branchBuilder_ == null) {
          if (statementCase_ == 5) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.getDefaultInstance();
        } else {
          if (statementCase_ == 5) {
            return branchBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
       */
      public Builder setBranch(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch value) {
        if (branchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          branchBuilder_.setMessage(value);
        }
        statementCase_ = 5;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
       */
      public Builder setBranch(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.Builder builderForValue) {
        if (branchBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          branchBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 5;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
       */
      public Builder mergeBranch(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch value) {
        if (branchBuilder_ == null) {
          if (statementCase_ == 5 &&
              statement_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 5) {
            branchBuilder_.mergeFrom(value);
          }
          branchBuilder_.setMessage(value);
        }
        statementCase_ = 5;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
       */
      public Builder clearBranch() {
        if (branchBuilder_ == null) {
          if (statementCase_ == 5) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 5) {
            statementCase_ = 0;
            statement_ = null;
          }
          branchBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.Builder getBranchBuilder() {
        return getBranchFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranchOrBuilder getBranchOrBuilder() {
        if ((statementCase_ == 5) && (branchBuilder_ != null)) {
          return branchBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 5) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrBranch branch = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranchOrBuilder> 
          getBranchFieldBuilder() {
        if (branchBuilder_ == null) {
          if (!(statementCase_ == 5)) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.getDefaultInstance();
          }
          branchBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranchOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrBranch) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 5;
        return branchBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatchOrBuilder> catchBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
       */
      public boolean hasCatch() {
        return statementCase_ == 6;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch getCatch() {
        if (catchBuilder_ == null) {
          if (statementCase_ == 6) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.getDefaultInstance();
        } else {
          if (statementCase_ == 6) {
            return catchBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
       */
      public Builder setCatch(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch value) {
        if (catchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          catchBuilder_.setMessage(value);
        }
        statementCase_ = 6;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
       */
      public Builder setCatch(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.Builder builderForValue) {
        if (catchBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          catchBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 6;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
       */
      public Builder mergeCatch(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch value) {
        if (catchBuilder_ == null) {
          if (statementCase_ == 6 &&
              statement_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 6) {
            catchBuilder_.mergeFrom(value);
          }
          catchBuilder_.setMessage(value);
        }
        statementCase_ = 6;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
       */
      public Builder clearCatch() {
        if (catchBuilder_ == null) {
          if (statementCase_ == 6) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 6) {
            statementCase_ = 0;
            statement_ = null;
          }
          catchBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.Builder getCatchBuilder() {
        return getCatchFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatchOrBuilder getCatchOrBuilder() {
        if ((statementCase_ == 6) && (catchBuilder_ != null)) {
          return catchBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 6) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrCatch catch = 6;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatchOrBuilder> 
          getCatchFieldBuilder() {
        if (catchBuilder_ == null) {
          if (!(statementCase_ == 6)) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.getDefaultInstance();
          }
          catchBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatchOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrCatch) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 6;
        return catchBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyOrBuilder> syntheticBodyBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
       */
      public boolean hasSyntheticBody() {
        return statementCase_ == 7;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody getSyntheticBody() {
        if (syntheticBodyBuilder_ == null) {
          if (statementCase_ == 7) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.getDefaultInstance();
        } else {
          if (statementCase_ == 7) {
            return syntheticBodyBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
       */
      public Builder setSyntheticBody(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody value) {
        if (syntheticBodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          syntheticBodyBuilder_.setMessage(value);
        }
        statementCase_ = 7;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
       */
      public Builder setSyntheticBody(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.Builder builderForValue) {
        if (syntheticBodyBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          syntheticBodyBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 7;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
       */
      public Builder mergeSyntheticBody(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody value) {
        if (syntheticBodyBuilder_ == null) {
          if (statementCase_ == 7 &&
              statement_ != org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.newBuilder((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 7) {
            syntheticBodyBuilder_.mergeFrom(value);
          }
          syntheticBodyBuilder_.setMessage(value);
        }
        statementCase_ = 7;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
       */
      public Builder clearSyntheticBody() {
        if (syntheticBodyBuilder_ == null) {
          if (statementCase_ == 7) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 7) {
            statementCase_ = 0;
            statement_ = null;
          }
          syntheticBodyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.Builder getSyntheticBodyBuilder() {
        return getSyntheticBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyOrBuilder getSyntheticBodyOrBuilder() {
        if ((statementCase_ == 7) && (syntheticBodyBuilder_ != null)) {
          return syntheticBodyBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 7) {
            return (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) statement_;
          }
          return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.getDefaultInstance();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrSyntheticBody synthetic_body = 7;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyOrBuilder> 
          getSyntheticBodyFieldBuilder() {
        if (syntheticBodyBuilder_ == null) {
          if (!(statementCase_ == 7)) {
            statement_ = org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.getDefaultInstance();
          }
          syntheticBodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBodyOrBuilder>(
                  (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugIrKlibProtoBuf.IrSyntheticBody) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 7;
        return syntheticBodyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement)
    }

    static {
      defaultInstance = new IrStatement(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.IrStatement)
  }

  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorReference_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorReference_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_UniqId_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_UniqId_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Coordinates_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Coordinates_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationContainer_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationContainer_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FileEntry_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FileEntry_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFile_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFile_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrModule_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrModule_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolData_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolData_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbol_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbol_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolTable_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Annotations_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Annotations_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_TypeArguments_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_TypeArguments_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStarProjection_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStarProjection_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeProjection_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeProjection_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeArgument_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeArgument_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSimpleType_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSimpleType_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDynamicType_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDynamicType_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrErrorType_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrErrorType_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrType_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrType_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeTable_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeIndex_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeIndex_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBreak_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBreak_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlock_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlock_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_MemberAccessCommon_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_MemberAccessCommon_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCall_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCall_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionReference_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionReference_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrPropertyReference_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrPropertyReference_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrComposite_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrComposite_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClassReference_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClassReference_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConst_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConst_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrContinue_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrContinue_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDelegatingConstructorCall_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDelegatingConstructorCall_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDoWhile_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDoWhile_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumConstructorCall_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumConstructorCall_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetClass_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetClass_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetEnumValue_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetEnumValue_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FieldAccessCommon_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FieldAccessCommon_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetField_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetField_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetValue_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetValue_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetObject_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetObject_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrInstanceInitializerCall_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrInstanceInitializerCall_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Loop_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Loop_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrReturn_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrReturn_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetField_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetField_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetVariable_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetVariable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSpreadElement_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSpreadElement_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStringConcat_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStringConcat_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrThrow_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrThrow_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTry_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTry_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeOp_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeOp_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVararg_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVararg_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVarargElement_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVarargElement_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhen_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhen_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhile_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhile_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrOperation_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrOperation_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrExpression_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrExpression_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_NullableIrExpression_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_NullableIrExpression_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeAlias_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeAlias_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunction_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunction_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionBase_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionBase_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConstructor_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConstructor_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrField_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrField_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrProperty_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrProperty_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVariable_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVariable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrValueParameter_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrValueParameter_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameter_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameter_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameterContainer_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameterContainer_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClass_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClass_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumEntry_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumEntry_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrAnonymousInit_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrAnonymousInit_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarator_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarator_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationOrigin_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationOrigin_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclaration_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclaration_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBranch_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBranch_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlockBody_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlockBody_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCatch_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCatch_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSyntheticBody_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSyntheticBody_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStatement_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStatement_fieldAccessorTable;

  public static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nccompiler/ir/backend.js/src/org/jetbrai" +
      "ns/kotlin/ir/backend/js/lower/serializat" +
      "ion/ir/ir.debug.proto\022?org.jetbrains.kot" +
      "lin.ir.backend.js.lower.serialization.me" +
      "tadata\"\210\003\n\023DescriptorReference\022\027\n\017packag" +
      "e_fq_name\030\001 \002(\t\022\025\n\rclass_fq_name\030\002 \002(\t\022\014" +
      "\n\004name\030\003 \002(\t\022X\n\007uniq_id\030\004 \001(\0132G.org.jetb" +
      "rains.kotlin.ir.backend.js.lower.seriali" +
      "zation.metadata.UniqId\022\030\n\tis_getter\030\005 \001(" +
      "\010:\005false\022\030\n\tis_setter\030\006 \001(\010:\005false\022\037\n\020is",
      "_backing_field\030\007 \001(\010:\005false\022\037\n\020is_fake_o" +
      "verride\030\010 \001(\010:\005false\022%\n\026is_default_const" +
      "ructor\030\t \001(\010:\005false\022\034\n\ris_enum_entry\030\n \001" +
      "(\010:\005false\022\036\n\017is_enum_special\030\013 \001(\010:\005fals" +
      "e\"(\n\006UniqId\022\r\n\005index\030\001 \002(\004\022\017\n\007isLocal\030\002 " +
      "\002(\010\"7\n\013Coordinates\022\024\n\014start_offset\030\001 \002(\005" +
      "\022\022\n\nend_offset\030\002 \002(\005\"}\n\026IrDeclarationCon" +
      "tainer\022c\n\013declaration\030\001 \003(\0132N.org.jetbra" +
      "ins.kotlin.ir.backend.js.lower.serializa" +
      "tion.metadata.IrDeclaration\"\031\n\tFileEntry",
      "\022\014\n\004name\030\001 \002(\t\"\332\001\n\006IrFile\022_\n\016declaration" +
      "_id\030\001 \003(\0132G.org.jetbrains.kotlin.ir.back" +
      "end.js.lower.serialization.metadata.Uniq" +
      "Id\022^\n\nfile_entry\030\002 \002(\0132J.org.jetbrains.k" +
      "otlin.ir.backend.js.lower.serialization." +
      "metadata.FileEntry\022\017\n\007fq_name\030\003 \002(\t\"\267\002\n\010" +
      "IrModule\022\014\n\004name\030\001 \002(\t\022U\n\004file\030\002 \003(\0132G.o" +
      "rg.jetbrains.kotlin.ir.backend.js.lower." +
      "serialization.metadata.IrFile\022d\n\014symbol_" +
      "table\030\003 \002(\0132N.org.jetbrains.kotlin.ir.ba",
      "ckend.js.lower.serialization.metadata.Ir" +
      "SymbolTable\022`\n\ntype_table\030\004 \002(\0132L.org.je" +
      "tbrains.kotlin.ir.backend.js.lower.seria" +
      "lization.metadata.IrTypeTable\"\255\003\n\014IrSymb" +
      "olData\022[\n\004kind\030\001 \002(\0162M.org.jetbrains.kot" +
      "lin.ir.backend.js.lower.serialization.me" +
      "tadata.IrSymbolKind\022X\n\007uniq_id\030\002 \002(\0132G.o" +
      "rg.jetbrains.kotlin.ir.backend.js.lower." +
      "serialization.metadata.UniqId\022b\n\021top_lev" +
      "el_uniq_id\030\003 \002(\0132G.org.jetbrains.kotlin.",
      "ir.backend.js.lower.serialization.metada" +
      "ta.UniqId\022\016\n\006fqname\030\004 \001(\t\022r\n\024descriptor_" +
      "reference\030\005 \001(\0132T.org.jetbrains.kotlin.i" +
      "r.backend.js.lower.serialization.metadat" +
      "a.DescriptorReference\"\031\n\010IrSymbol\022\r\n\005ind" +
      "ex\030\001 \002(\005\"o\n\rIrSymbolTable\022^\n\007symbols\030\001 \003" +
      "(\0132M.org.jetbrains.kotlin.ir.backend.js." +
      "lower.serialization.metadata.IrSymbolDat" +
      "a\"j\n\013Annotations\022[\n\nannotation\030\001 \003(\0132G.o" +
      "rg.jetbrains.kotlin.ir.backend.js.lower.",
      "serialization.metadata.IrCall\"t\n\rTypeArg" +
      "uments\022c\n\rtype_argument\030\001 \003(\0132L.org.jetb" +
      "rains.kotlin.ir.backend.js.lower.seriali" +
      "zation.metadata.IrTypeIndex\" \n\020IrStarPro" +
      "jection\022\014\n\004void\030\001 \001(\010\"\321\001\n\020IrTypeProjecti" +
      "on\022a\n\010variance\030\001 \002(\0162O.org.jetbrains.kot" +
      "lin.ir.backend.js.lower.serialization.me" +
      "tadata.IrTypeVariance\022Z\n\004type\030\002 \002(\0132L.or" +
      "g.jetbrains.kotlin.ir.backend.js.lower.s" +
      "erialization.metadata.IrTypeIndex\"\336\001\n\016Ir",
      "TypeArgument\022a\n\004star\030\001 \001(\0132Q.org.jetbrai" +
      "ns.kotlin.ir.backend.js.lower.serializat" +
      "ion.metadata.IrStarProjectionH\000\022a\n\004type\030" +
      "\002 \001(\0132Q.org.jetbrains.kotlin.ir.backend." +
      "js.lower.serialization.metadata.IrTypePr" +
      "ojectionH\000B\006\n\004kind\"\316\002\n\014IrSimpleType\022a\n\013a" +
      "nnotations\030\001 \002(\0132L.org.jetbrains.kotlin." +
      "ir.backend.js.lower.serialization.metada" +
      "ta.Annotations\022]\n\nclassifier\030\002 \002(\0132I.org" +
      ".jetbrains.kotlin.ir.backend.js.lower.se",
      "rialization.metadata.IrSymbol\022\031\n\021has_que" +
      "stion_mark\030\003 \002(\010\022a\n\010argument\030\004 \003(\0132O.org" +
      ".jetbrains.kotlin.ir.backend.js.lower.se" +
      "rialization.metadata.IrTypeArgument\"r\n\rI" +
      "rDynamicType\022a\n\013annotations\030\001 \002(\0132L.org." +
      "jetbrains.kotlin.ir.backend.js.lower.ser" +
      "ialization.metadata.Annotations\"p\n\013IrErr" +
      "orType\022a\n\013annotations\030\001 \002(\0132L.org.jetbra" +
      "ins.kotlin.ir.backend.js.lower.serializa" +
      "tion.metadata.Annotations\"\263\002\n\006IrType\022_\n\006",
      "simple\030\001 \001(\0132M.org.jetbrains.kotlin.ir.b" +
      "ackend.js.lower.serialization.metadata.I" +
      "rSimpleTypeH\000\022a\n\007dynamic\030\002 \001(\0132N.org.jet" +
      "brains.kotlin.ir.backend.js.lower.serial" +
      "ization.metadata.IrDynamicTypeH\000\022]\n\005erro" +
      "r\030\003 \001(\0132L.org.jetbrains.kotlin.ir.backen" +
      "d.js.lower.serialization.metadata.IrErro" +
      "rTypeH\000B\006\n\004kind\"e\n\013IrTypeTable\022V\n\005types\030" +
      "\001 \003(\0132G.org.jetbrains.kotlin.ir.backend." +
      "js.lower.serialization.metadata.IrType\"\034",
      "\n\013IrTypeIndex\022\r\n\005index\030\001 \002(\005\")\n\007IrBreak\022" +
      "\017\n\007loop_id\030\001 \002(\005\022\r\n\005label\030\002 \001(\t\"\204\001\n\007IrBl" +
      "ock\022\030\n\020is_lambda_origin\030\001 \002(\010\022_\n\tstateme" +
      "nt\030\002 \003(\0132L.org.jetbrains.kotlin.ir.backe" +
      "nd.js.lower.serialization.metadata.IrSta" +
      "tement\"\300\003\n\022MemberAccessCommon\022h\n\021dispatc" +
      "h_receiver\030\001 \001(\0132M.org.jetbrains.kotlin." +
      "ir.backend.js.lower.serialization.metada" +
      "ta.IrExpression\022i\n\022extension_receiver\030\002 " +
      "\001(\0132M.org.jetbrains.kotlin.ir.backend.js",
      ".lower.serialization.metadata.IrExpressi" +
      "on\022m\n\016value_argument\030\003 \003(\0132U.org.jetbrai" +
      "ns.kotlin.ir.backend.js.lower.serializat" +
      "ion.metadata.NullableIrExpression\022f\n\016typ" +
      "e_arguments\030\004 \002(\0132N.org.jetbrains.kotlin" +
      ".ir.backend.js.lower.serialization.metad" +
      "ata.TypeArguments\"\316\003\n\006IrCall\022_\n\004kind\030\001 \002" +
      "(\0162Q.org.jetbrains.kotlin.ir.backend.js." +
      "lower.serialization.metadata.IrCall.Prim" +
      "itive\022Y\n\006symbol\030\002 \002(\0132I.org.jetbrains.ko",
      "tlin.ir.backend.js.lower.serialization.m" +
      "etadata.IrSymbol\022j\n\rmember_access\030\003 \002(\0132" +
      "S.org.jetbrains.kotlin.ir.backend.js.low" +
      "er.serialization.metadata.MemberAccessCo" +
      "mmon\022X\n\005super\030\004 \001(\0132I.org.jetbrains.kotl" +
      "in.ir.backend.js.lower.serialization.met" +
      "adata.IrSymbol\"B\n\tPrimitive\022\021\n\rNOT_PRIMI" +
      "TIVE\020\001\022\013\n\007NULLARY\020\002\022\t\n\005UNARY\020\003\022\n\n\006BINARY" +
      "\020\004\"\354\001\n\023IrFunctionReference\022Y\n\006symbol\030\001 \002" +
      "(\0132I.org.jetbrains.kotlin.ir.backend.js.",
      "lower.serialization.metadata.IrSymbol\022\016\n" +
      "\006origin\030\002 \001(\t\022j\n\rmember_access\030\003 \002(\0132S.o" +
      "rg.jetbrains.kotlin.ir.backend.js.lower." +
      "serialization.metadata.MemberAccessCommo" +
      "n\"\241\003\n\023IrPropertyReference\022X\n\005field\030\001 \001(\013" +
      "2I.org.jetbrains.kotlin.ir.backend.js.lo" +
      "wer.serialization.metadata.IrSymbol\022Y\n\006g" +
      "etter\030\002 \001(\0132I.org.jetbrains.kotlin.ir.ba" +
      "ckend.js.lower.serialization.metadata.Ir" +
      "Symbol\022Y\n\006setter\030\003 \001(\0132I.org.jetbrains.k",
      "otlin.ir.backend.js.lower.serialization." +
      "metadata.IrSymbol\022\016\n\006origin\030\004 \001(\t\022j\n\rmem" +
      "ber_access\030\005 \002(\0132S.org.jetbrains.kotlin." +
      "ir.backend.js.lower.serialization.metada" +
      "ta.MemberAccessCommon\"n\n\013IrComposite\022_\n\t" +
      "statement\030\001 \003(\0132L.org.jetbrains.kotlin.i" +
      "r.backend.js.lower.serialization.metadat" +
      "a.IrStatement\"\325\001\n\020IrClassReference\022_\n\014cl" +
      "ass_symbol\030\001 \002(\0132I.org.jetbrains.kotlin." +
      "ir.backend.js.lower.serialization.metada",
      "ta.IrSymbol\022`\n\nclass_type\030\002 \002(\0132L.org.je" +
      "tbrains.kotlin.ir.backend.js.lower.seria" +
      "lization.metadata.IrTypeIndex\"\272\001\n\007IrCons" +
      "t\022\016\n\004null\030\001 \001(\010H\000\022\021\n\007boolean\030\002 \001(\010H\000\022\016\n\004" +
      "char\030\003 \001(\005H\000\022\016\n\004byte\030\004 \001(\005H\000\022\017\n\005short\030\005 " +
      "\001(\005H\000\022\r\n\003int\030\006 \001(\005H\000\022\016\n\004long\030\007 \001(\003H\000\022\017\n\005" +
      "float\030\010 \001(\002H\000\022\020\n\006double\030\t \001(\001H\000\022\020\n\006strin" +
      "g\030\n \001(\tH\000B\007\n\005value\",\n\nIrContinue\022\017\n\007loop" +
      "_id\030\001 \002(\005\022\r\n\005label\030\002 \001(\t\"\344\001\n\033IrDelegatin" +
      "gConstructorCall\022Y\n\006symbol\030\001 \002(\0132I.org.j",
      "etbrains.kotlin.ir.backend.js.lower.seri" +
      "alization.metadata.IrSymbol\022j\n\rmember_ac" +
      "cess\030\002 \002(\0132S.org.jetbrains.kotlin.ir.bac" +
      "kend.js.lower.serialization.metadata.Mem" +
      "berAccessCommon\"`\n\tIrDoWhile\022S\n\004loop\030\001 \002" +
      "(\0132E.org.jetbrains.kotlin.ir.backend.js." +
      "lower.serialization.metadata.Loop\"\336\001\n\025Ir" +
      "EnumConstructorCall\022Y\n\006symbol\030\001 \002(\0132I.or" +
      "g.jetbrains.kotlin.ir.backend.js.lower.s" +
      "erialization.metadata.IrSymbol\022j\n\rmember",
      "_access\030\002 \002(\0132S.org.jetbrains.kotlin.ir." +
      "backend.js.lower.serialization.metadata." +
      "MemberAccessCommon\"m\n\nIrGetClass\022_\n\010argu" +
      "ment\030\001 \002(\0132M.org.jetbrains.kotlin.ir.bac" +
      "kend.js.lower.serialization.metadata.IrE" +
      "xpression\"k\n\016IrGetEnumValue\022Y\n\006symbol\030\002 " +
      "\002(\0132I.org.jetbrains.kotlin.ir.backend.js" +
      ".lower.serialization.metadata.IrSymbol\"\251" +
      "\002\n\021FieldAccessCommon\022Y\n\006symbol\030\001 \002(\0132I.o" +
      "rg.jetbrains.kotlin.ir.backend.js.lower.",
      "serialization.metadata.IrSymbol\022X\n\005super" +
      "\030\002 \001(\0132I.org.jetbrains.kotlin.ir.backend" +
      ".js.lower.serialization.metadata.IrSymbo" +
      "l\022_\n\010receiver\030\003 \001(\0132M.org.jetbrains.kotl" +
      "in.ir.backend.js.lower.serialization.met" +
      "adata.IrExpression\"v\n\nIrGetField\022h\n\014fiel" +
      "d_access\030\001 \002(\0132R.org.jetbrains.kotlin.ir" +
      ".backend.js.lower.serialization.metadata" +
      ".FieldAccessCommon\"g\n\nIrGetValue\022Y\n\006symb" +
      "ol\030\001 \002(\0132I.org.jetbrains.kotlin.ir.backe",
      "nd.js.lower.serialization.metadata.IrSym" +
      "bol\"h\n\013IrGetObject\022Y\n\006symbol\030\001 \002(\0132I.org" +
      ".jetbrains.kotlin.ir.backend.js.lower.se" +
      "rialization.metadata.IrSymbol\"v\n\031IrInsta" +
      "nceInitializerCall\022Y\n\006symbol\030\001 \002(\0132I.org" +
      ".jetbrains.kotlin.ir.backend.js.lower.se" +
      "rialization.metadata.IrSymbol\"\345\001\n\004Loop\022\017" +
      "\n\007loop_id\030\001 \002(\005\022`\n\tcondition\030\002 \002(\0132M.org" +
      ".jetbrains.kotlin.ir.backend.js.lower.se" +
      "rialization.metadata.IrExpression\022\r\n\005lab",
      "el\030\003 \001(\t\022[\n\004body\030\004 \001(\0132M.org.jetbrains.k" +
      "otlin.ir.backend.js.lower.serialization." +
      "metadata.IrExpression\"\312\001\n\010IrReturn\022`\n\rre" +
      "turn_target\030\001 \002(\0132I.org.jetbrains.kotlin" +
      ".ir.backend.js.lower.serialization.metad" +
      "ata.IrSymbol\022\\\n\005value\030\002 \002(\0132M.org.jetbra" +
      "ins.kotlin.ir.backend.js.lower.serializa" +
      "tion.metadata.IrExpression\"\324\001\n\nIrSetFiel" +
      "d\022h\n\014field_access\030\001 \002(\0132R.org.jetbrains." +
      "kotlin.ir.backend.js.lower.serialization",
      ".metadata.FieldAccessCommon\022\\\n\005value\030\002 \002" +
      "(\0132M.org.jetbrains.kotlin.ir.backend.js." +
      "lower.serialization.metadata.IrExpressio" +
      "n\"\310\001\n\rIrSetVariable\022Y\n\006symbol\030\001 \002(\0132I.or" +
      "g.jetbrains.kotlin.ir.backend.js.lower.s" +
      "erialization.metadata.IrSymbol\022\\\n\005value\030" +
      "\002 \002(\0132M.org.jetbrains.kotlin.ir.backend." +
      "js.lower.serialization.metadata.IrExpres" +
      "sion\"\327\001\n\017IrSpreadElement\022a\n\nexpression\030\001" +
      " \002(\0132M.org.jetbrains.kotlin.ir.backend.j",
      "s.lower.serialization.metadata.IrExpress" +
      "ion\022a\n\013coordinates\030\002 \002(\0132L.org.jetbrains" +
      ".kotlin.ir.backend.js.lower.serializatio" +
      "n.metadata.Coordinates\"q\n\016IrStringConcat" +
      "\022_\n\010argument\030\001 \003(\0132M.org.jetbrains.kotli" +
      "n.ir.backend.js.lower.serialization.meta" +
      "data.IrExpression\"g\n\007IrThrow\022\\\n\005value\030\001 " +
      "\002(\0132M.org.jetbrains.kotlin.ir.backend.js" +
      ".lower.serialization.metadata.IrExpressi" +
      "on\"\243\002\n\005IrTry\022]\n\006result\030\001 \002(\0132M.org.jetbr",
      "ains.kotlin.ir.backend.js.lower.serializ" +
      "ation.metadata.IrExpression\022[\n\005catch\030\002 \003" +
      "(\0132L.org.jetbrains.kotlin.ir.backend.js." +
      "lower.serialization.metadata.IrStatement" +
      "\022^\n\007finally\030\003 \001(\0132M.org.jetbrains.kotlin" +
      ".ir.backend.js.lower.serialization.metad" +
      "ata.IrExpression\"\255\002\n\010IrTypeOp\022a\n\010operato" +
      "r\030\001 \002(\0162O.org.jetbrains.kotlin.ir.backen" +
      "d.js.lower.serialization.metadata.IrType" +
      "Operator\022]\n\007operand\030\002 \002(\0132L.org.jetbrain",
      "s.kotlin.ir.backend.js.lower.serializati" +
      "on.metadata.IrTypeIndex\022_\n\010argument\030\003 \002(" +
      "\0132M.org.jetbrains.kotlin.ir.backend.js.l" +
      "ower.serialization.metadata.IrExpression" +
      "\"\321\001\n\010IrVararg\022b\n\014element_type\030\001 \002(\0132L.or" +
      "g.jetbrains.kotlin.ir.backend.js.lower.s" +
      "erialization.metadata.IrTypeIndex\022a\n\007ele" +
      "ment\030\002 \003(\0132P.org.jetbrains.kotlin.ir.bac" +
      "kend.js.lower.serialization.metadata.IrV" +
      "arargElement\"\364\001\n\017IrVarargElement\022c\n\nexpr",
      "ession\030\001 \001(\0132M.org.jetbrains.kotlin.ir.b" +
      "ackend.js.lower.serialization.metadata.I" +
      "rExpressionH\000\022j\n\016spread_element\030\002 \001(\0132P." +
      "org.jetbrains.kotlin.ir.backend.js.lower" +
      ".serialization.metadata.IrSpreadElementH" +
      "\000B\020\n\016vararg_element\"f\n\006IrWhen\022\\\n\006branch\030" +
      "\001 \003(\0132L.org.jetbrains.kotlin.ir.backend." +
      "js.lower.serialization.metadata.IrStatem" +
      "ent\"^\n\007IrWhile\022S\n\004loop\030\001 \002(\0132E.org.jetbr" +
      "ains.kotlin.ir.backend.js.lower.serializ",
      "ation.metadata.Loop\"\245\026\n\013IrOperation\022Y\n\005b" +
      "lock\030\001 \001(\0132H.org.jetbrains.kotlin.ir.bac" +
      "kend.js.lower.serialization.metadata.IrB" +
      "lockH\000\022Y\n\005break\030\002 \001(\0132H.org.jetbrains.ko" +
      "tlin.ir.backend.js.lower.serialization.m" +
      "etadata.IrBreakH\000\022W\n\004call\030\003 \001(\0132G.org.je" +
      "tbrains.kotlin.ir.backend.js.lower.seria" +
      "lization.metadata.IrCallH\000\022l\n\017class_refe" +
      "rence\030\004 \001(\0132Q.org.jetbrains.kotlin.ir.ba" +
      "ckend.js.lower.serialization.metadata.Ir",
      "ClassReferenceH\000\022a\n\tcomposite\030\005 \001(\0132L.or" +
      "g.jetbrains.kotlin.ir.backend.js.lower.s" +
      "erialization.metadata.IrCompositeH\000\022Y\n\005c" +
      "onst\030\006 \001(\0132H.org.jetbrains.kotlin.ir.bac" +
      "kend.js.lower.serialization.metadata.IrC" +
      "onstH\000\022_\n\010continue\030\007 \001(\0132K.org.jetbrains" +
      ".kotlin.ir.backend.js.lower.serializatio" +
      "n.metadata.IrContinueH\000\022\203\001\n\033delegating_c" +
      "onstructor_call\030\010 \001(\0132\\.org.jetbrains.ko" +
      "tlin.ir.backend.js.lower.serialization.m",
      "etadata.IrDelegatingConstructorCallH\000\022^\n" +
      "\010do_while\030\t \001(\0132J.org.jetbrains.kotlin.i" +
      "r.backend.js.lower.serialization.metadat" +
      "a.IrDoWhileH\000\022w\n\025enum_constructor_call\030\n" +
      " \001(\0132V.org.jetbrains.kotlin.ir.backend.j" +
      "s.lower.serialization.metadata.IrEnumCon" +
      "structorCallH\000\022r\n\022function_reference\030\013 \001" +
      "(\0132T.org.jetbrains.kotlin.ir.backend.js." +
      "lower.serialization.metadata.IrFunctionR" +
      "eferenceH\000\022`\n\tget_class\030\014 \001(\0132K.org.jetb",
      "rains.kotlin.ir.backend.js.lower.seriali" +
      "zation.metadata.IrGetClassH\000\022i\n\016get_enum" +
      "_value\030\r \001(\0132O.org.jetbrains.kotlin.ir.b" +
      "ackend.js.lower.serialization.metadata.I" +
      "rGetEnumValueH\000\022`\n\tget_field\030\016 \001(\0132K.org" +
      ".jetbrains.kotlin.ir.backend.js.lower.se" +
      "rialization.metadata.IrGetFieldH\000\022b\n\nget" +
      "_object\030\017 \001(\0132L.org.jetbrains.kotlin.ir." +
      "backend.js.lower.serialization.metadata." +
      "IrGetObjectH\000\022`\n\tget_value\030\020 \001(\0132K.org.j",
      "etbrains.kotlin.ir.backend.js.lower.seri" +
      "alization.metadata.IrGetValueH\000\022\177\n\031insta" +
      "nce_initializer_call\030\021 \001(\0132Z.org.jetbrai" +
      "ns.kotlin.ir.backend.js.lower.serializat" +
      "ion.metadata.IrInstanceInitializerCallH\000" +
      "\022r\n\022property_reference\030\022 \001(\0132T.org.jetbr" +
      "ains.kotlin.ir.backend.js.lower.serializ" +
      "ation.metadata.IrPropertyReferenceH\000\022[\n\006" +
      "return\030\023 \001(\0132I.org.jetbrains.kotlin.ir.b" +
      "ackend.js.lower.serialization.metadata.I",
      "rReturnH\000\022`\n\tset_field\030\024 \001(\0132K.org.jetbr" +
      "ains.kotlin.ir.backend.js.lower.serializ" +
      "ation.metadata.IrSetFieldH\000\022f\n\014set_varia" +
      "ble\030\025 \001(\0132N.org.jetbrains.kotlin.ir.back" +
      "end.js.lower.serialization.metadata.IrSe" +
      "tVariableH\000\022h\n\rstring_concat\030\026 \001(\0132O.org" +
      ".jetbrains.kotlin.ir.backend.js.lower.se" +
      "rialization.metadata.IrStringConcatH\000\022Y\n" +
      "\005throw\030\027 \001(\0132H.org.jetbrains.kotlin.ir.b" +
      "ackend.js.lower.serialization.metadata.I",
      "rThrowH\000\022U\n\003try\030\030 \001(\0132F.org.jetbrains.ko" +
      "tlin.ir.backend.js.lower.serialization.m" +
      "etadata.IrTryH\000\022\\\n\007type_op\030\031 \001(\0132I.org.j" +
      "etbrains.kotlin.ir.backend.js.lower.seri" +
      "alization.metadata.IrTypeOpH\000\022[\n\006vararg\030" +
      "\032 \001(\0132I.org.jetbrains.kotlin.ir.backend." +
      "js.lower.serialization.metadata.IrVararg" +
      "H\000\022W\n\004when\030\033 \001(\0132G.org.jetbrains.kotlin." +
      "ir.backend.js.lower.serialization.metada" +
      "ta.IrWhenH\000\022Y\n\005while\030\034 \001(\0132H.org.jetbrai",
      "ns.kotlin.ir.backend.js.lower.serializat" +
      "ion.metadata.IrWhileH\000B\013\n\toperation\"\256\002\n\014" +
      "IrExpression\022_\n\toperation\030\001 \002(\0132L.org.je" +
      "tbrains.kotlin.ir.backend.js.lower.seria" +
      "lization.metadata.IrOperation\022Z\n\004type\030\002 " +
      "\002(\0132L.org.jetbrains.kotlin.ir.backend.js" +
      ".lower.serialization.metadata.IrTypeInde" +
      "x\022a\n\013coordinates\030\003 \002(\0132L.org.jetbrains.k" +
      "otlin.ir.backend.js.lower.serialization." +
      "metadata.Coordinates\"y\n\024NullableIrExpres",
      "sion\022a\n\nexpression\030\001 \001(\0132M.org.jetbrains" +
      ".kotlin.ir.backend.js.lower.serializatio" +
      "n.metadata.IrExpression\"\r\n\013IrTypeAlias\"\256" +
      "\003\n\nIrFunction\022Y\n\006symbol\030\001 \002(\0132I.org.jetb" +
      "rains.kotlin.ir.backend.js.lower.seriali" +
      "zation.metadata.IrSymbol\022]\n\004base\030\002 \002(\0132O" +
      ".org.jetbrains.kotlin.ir.backend.js.lowe" +
      "r.serialization.metadata.IrFunctionBase\022" +
      "_\n\010modality\030\003 \002(\0162M.org.jetbrains.kotlin" +
      ".ir.backend.js.lower.serialization.metad",
      "ata.ModalityKind\022\022\n\nis_tailrec\030\004 \002(\010\022\022\n\n" +
      "is_suspend\030\005 \002(\010\022]\n\noverridden\030\006 \003(\0132I.o" +
      "rg.jetbrains.kotlin.ir.backend.js.lower." +
      "serialization.metadata.IrSymbol\"\315\005\n\016IrFu" +
      "nctionBase\022\014\n\004name\030\001 \002(\t\022\022\n\nvisibility\030\002" +
      " \002(\t\022\021\n\tis_inline\030\003 \002(\010\022\023\n\013is_external\030\004" +
      " \002(\010\022r\n\017type_parameters\030\005 \002(\0132Y.org.jetb" +
      "rains.kotlin.ir.backend.js.lower.seriali" +
      "zation.metadata.IrTypeParameterContainer" +
      "\022i\n\021dispatch_receiver\030\006 \001(\0132N.org.jetbra",
      "ins.kotlin.ir.backend.js.lower.serializa" +
      "tion.metadata.IrDeclaration\022j\n\022extension" +
      "_receiver\030\007 \001(\0132N.org.jetbrains.kotlin.i" +
      "r.backend.js.lower.serialization.metadat" +
      "a.IrDeclaration\022g\n\017value_parameter\030\010 \003(\013" +
      "2N.org.jetbrains.kotlin.ir.backend.js.lo" +
      "wer.serialization.metadata.IrDeclaration" +
      "\022Z\n\004body\030\t \001(\0132L.org.jetbrains.kotlin.ir" +
      ".backend.js.lower.serialization.metadata" +
      ".IrStatement\022a\n\013return_type\030\n \002(\0132L.org.",
      "jetbrains.kotlin.ir.backend.js.lower.ser" +
      "ialization.metadata.IrTypeIndex\"\335\001\n\rIrCo" +
      "nstructor\022Y\n\006symbol\030\001 \002(\0132I.org.jetbrain" +
      "s.kotlin.ir.backend.js.lower.serializati" +
      "on.metadata.IrSymbol\022]\n\004base\030\002 \002(\0132O.org" +
      ".jetbrains.kotlin.ir.backend.js.lower.se" +
      "rialization.metadata.IrFunctionBase\022\022\n\ni" +
      "s_primary\030\003 \002(\010\"\200\003\n\007IrField\022Y\n\006symbol\030\001 " +
      "\002(\0132I.org.jetbrains.kotlin.ir.backend.js" +
      ".lower.serialization.metadata.IrSymbol\022b",
      "\n\013initializer\030\002 \001(\0132M.org.jetbrains.kotl" +
      "in.ir.backend.js.lower.serialization.met" +
      "adata.IrExpression\022\014\n\004name\030\003 \002(\t\022\022\n\nvisi" +
      "bility\030\004 \002(\t\022\020\n\010is_final\030\005 \002(\010\022\023\n\013is_ext" +
      "ernal\030\006 \002(\010\022\021\n\tis_static\030\007 \002(\010\022Z\n\004type\030\010" +
      " \002(\0132L.org.jetbrains.kotlin.ir.backend.j" +
      "s.lower.serialization.metadata.IrTypeInd" +
      "ex\"\366\004\n\nIrProperty\022h\n\ndescriptor\030\001 \001(\0132T." +
      "org.jetbrains.kotlin.ir.backend.js.lower" +
      ".serialization.metadata.DescriptorRefere",
      "nce\022\014\n\004name\030\002 \002(\t\022\022\n\nvisibility\030\003 \002(\t\022_\n" +
      "\010modality\030\004 \002(\0162M.org.jetbrains.kotlin.i" +
      "r.backend.js.lower.serialization.metadat" +
      "a.ModalityKind\022\016\n\006is_var\030\005 \002(\010\022\020\n\010is_con" +
      "st\030\006 \002(\010\022\023\n\013is_lateinit\030\007 \002(\010\022\024\n\014is_dele" +
      "gated\030\010 \002(\010\022\023\n\013is_external\030\t \002(\010\022_\n\rback" +
      "ing_field\030\n \001(\0132H.org.jetbrains.kotlin.i" +
      "r.backend.js.lower.serialization.metadat" +
      "a.IrField\022[\n\006getter\030\013 \001(\0132K.org.jetbrain" +
      "s.kotlin.ir.backend.js.lower.serializati",
      "on.metadata.IrFunction\022[\n\006setter\030\014 \001(\0132K" +
      ".org.jetbrains.kotlin.ir.backend.js.lowe" +
      "r.serialization.metadata.IrFunction\"\354\002\n\n" +
      "IrVariable\022\014\n\004name\030\001 \002(\t\022Y\n\006symbol\030\002 \002(\013" +
      "2I.org.jetbrains.kotlin.ir.backend.js.lo" +
      "wer.serialization.metadata.IrSymbol\022Z\n\004t" +
      "ype\030\003 \002(\0132L.org.jetbrains.kotlin.ir.back" +
      "end.js.lower.serialization.metadata.IrTy" +
      "peIndex\022\016\n\006is_var\030\004 \002(\010\022\020\n\010is_const\030\005 \002(" +
      "\010\022\023\n\013is_lateinit\030\006 \002(\010\022b\n\013initializer\030\007 ",
      "\001(\0132M.org.jetbrains.kotlin.ir.backend.js" +
      ".lower.serialization.metadata.IrExpressi" +
      "on\"\344\003\n\020IrValueParameter\022Y\n\006symbol\030\001 \002(\0132" +
      "I.org.jetbrains.kotlin.ir.backend.js.low" +
      "er.serialization.metadata.IrSymbol\022\014\n\004na" +
      "me\030\002 \002(\t\022\r\n\005index\030\003 \002(\005\022Z\n\004type\030\004 \002(\0132L." +
      "org.jetbrains.kotlin.ir.backend.js.lower" +
      ".serialization.metadata.IrTypeIndex\022i\n\023v" +
      "ararg_element_type\030\005 \001(\0132L.org.jetbrains" +
      ".kotlin.ir.backend.js.lower.serializatio",
      "n.metadata.IrTypeIndex\022\026\n\016is_crossinline" +
      "\030\006 \002(\010\022\023\n\013is_noinline\030\007 \002(\010\022d\n\rdefault_v" +
      "alue\030\010 \001(\0132M.org.jetbrains.kotlin.ir.bac" +
      "kend.js.lower.serialization.metadata.IrE" +
      "xpression\"\342\002\n\017IrTypeParameter\022Y\n\006symbol\030" +
      "\001 \002(\0132I.org.jetbrains.kotlin.ir.backend." +
      "js.lower.serialization.metadata.IrSymbol" +
      "\022\014\n\004name\030\002 \002(\t\022\r\n\005index\030\003 \002(\005\022a\n\010varianc" +
      "e\030\004 \002(\0162O.org.jetbrains.kotlin.ir.backen" +
      "d.js.lower.serialization.metadata.IrType",
      "Variance\022`\n\nsuper_type\030\005 \003(\0132L.org.jetbr" +
      "ains.kotlin.ir.backend.js.lower.serializ" +
      "ation.metadata.IrTypeIndex\022\022\n\nis_reified" +
      "\030\006 \002(\010\"\202\001\n\030IrTypeParameterContainer\022f\n\016t" +
      "ype_parameter\030\001 \003(\0132N.org.jetbrains.kotl" +
      "in.ir.backend.js.lower.serialization.met" +
      "adata.IrDeclaration\"\327\006\n\007IrClass\022Y\n\006symbo" +
      "l\030\001 \002(\0132I.org.jetbrains.kotlin.ir.backen" +
      "d.js.lower.serialization.metadata.IrSymb" +
      "ol\022\014\n\004name\030\002 \002(\t\022X\n\004kind\030\003 \002(\0162J.org.jet",
      "brains.kotlin.ir.backend.js.lower.serial" +
      "ization.metadata.ClassKind\022\022\n\nvisibility" +
      "\030\004 \002(\t\022_\n\010modality\030\005 \002(\0162M.org.jetbrains" +
      ".kotlin.ir.backend.js.lower.serializatio" +
      "n.metadata.ModalityKind\022\024\n\014is_companion\030" +
      "\006 \002(\010\022\020\n\010is_inner\030\007 \002(\010\022\017\n\007is_data\030\010 \002(\010" +
      "\022\023\n\013is_external\030\t \002(\010\022\021\n\tis_inline\030\n \002(\010" +
      "\022e\n\rthis_receiver\030\013 \001(\0132N.org.jetbrains." +
      "kotlin.ir.backend.js.lower.serialization" +
      ".metadata.IrDeclaration\022r\n\017type_paramete",
      "rs\030\014 \002(\0132Y.org.jetbrains.kotlin.ir.backe" +
      "nd.js.lower.serialization.metadata.IrTyp" +
      "eParameterContainer\022v\n\025declaration_conta" +
      "iner\030\r \002(\0132W.org.jetbrains.kotlin.ir.bac" +
      "kend.js.lower.serialization.metadata.IrD" +
      "eclarationContainer\022`\n\nsuper_type\030\016 \003(\0132" +
      "L.org.jetbrains.kotlin.ir.backend.js.low" +
      "er.serialization.metadata.IrTypeIndex\"\307\002" +
      "\n\013IrEnumEntry\022Y\n\006symbol\030\001 \002(\0132I.org.jetb" +
      "rains.kotlin.ir.backend.js.lower.seriali",
      "zation.metadata.IrSymbol\022b\n\013initializer\030" +
      "\002 \001(\0132M.org.jetbrains.kotlin.ir.backend." +
      "js.lower.serialization.metadata.IrExpres" +
      "sion\022k\n\023corresponding_class\030\003 \001(\0132N.org." +
      "jetbrains.kotlin.ir.backend.js.lower.ser" +
      "ialization.metadata.IrDeclaration\022\014\n\004nam" +
      "e\030\004 \002(\t\"\310\001\n\017IrAnonymousInit\022Y\n\006symbol\030\001 " +
      "\002(\0132I.org.jetbrains.kotlin.ir.backend.js" +
      ".lower.serialization.metadata.IrSymbol\022Z" +
      "\n\004body\030\002 \002(\0132L.org.jetbrains.kotlin.ir.b",
      "ackend.js.lower.serialization.metadata.I" +
      "rStatement\"\213\t\n\014IrDeclarator\022m\n\021ir_anonym" +
      "ous_init\030\001 \001(\0132P.org.jetbrains.kotlin.ir" +
      ".backend.js.lower.serialization.metadata" +
      ".IrAnonymousInitH\000\022\\\n\010ir_class\030\002 \001(\0132H.o" +
      "rg.jetbrains.kotlin.ir.backend.js.lower." +
      "serialization.metadata.IrClassH\000\022h\n\016ir_c" +
      "onstructor\030\003 \001(\0132N.org.jetbrains.kotlin." +
      "ir.backend.js.lower.serialization.metada" +
      "ta.IrConstructorH\000\022e\n\rir_enum_entry\030\004 \001(",
      "\0132L.org.jetbrains.kotlin.ir.backend.js.l" +
      "ower.serialization.metadata.IrEnumEntryH" +
      "\000\022\\\n\010ir_field\030\005 \001(\0132H.org.jetbrains.kotl" +
      "in.ir.backend.js.lower.serialization.met" +
      "adata.IrFieldH\000\022b\n\013ir_function\030\006 \001(\0132K.o" +
      "rg.jetbrains.kotlin.ir.backend.js.lower." +
      "serialization.metadata.IrFunctionH\000\022b\n\013i" +
      "r_property\030\007 \001(\0132K.org.jetbrains.kotlin." +
      "ir.backend.js.lower.serialization.metada" +
      "ta.IrPropertyH\000\022e\n\rir_type_alias\030\010 \001(\0132L",
      ".org.jetbrains.kotlin.ir.backend.js.lowe" +
      "r.serialization.metadata.IrTypeAliasH\000\022m" +
      "\n\021ir_type_parameter\030\t \001(\0132P.org.jetbrain" +
      "s.kotlin.ir.backend.js.lower.serializati" +
      "on.metadata.IrTypeParameterH\000\022b\n\013ir_vari" +
      "able\030\n \001(\0132K.org.jetbrains.kotlin.ir.bac" +
      "kend.js.lower.serialization.metadata.IrV" +
      "ariableH\000\022o\n\022ir_value_parameter\030\013 \001(\0132Q." +
      "org.jetbrains.kotlin.ir.backend.js.lower" +
      ".serialization.metadata.IrValueParameter",
      "H\000B\014\n\ndeclarator\"#\n\023IrDeclarationOrigin\022" +
      "\014\n\004name\030\001 \002(\t\"\261\003\n\rIrDeclaration\022d\n\006origi" +
      "n\030\001 \002(\0132T.org.jetbrains.kotlin.ir.backen" +
      "d.js.lower.serialization.metadata.IrDecl" +
      "arationOrigin\022a\n\013coordinates\030\002 \002(\0132L.org" +
      ".jetbrains.kotlin.ir.backend.js.lower.se" +
      "rialization.metadata.Coordinates\022a\n\013anno" +
      "tations\030\003 \002(\0132L.org.jetbrains.kotlin.ir." +
      "backend.js.lower.serialization.metadata." +
      "Annotations\022a\n\ndeclarator\030\004 \002(\0132M.org.je",
      "tbrains.kotlin.ir.backend.js.lower.seria" +
      "lization.metadata.IrDeclarator\022\021\n\tfile_n" +
      "ame\030\005 \002(\t\"\313\001\n\010IrBranch\022`\n\tcondition\030\001 \002(" +
      "\0132M.org.jetbrains.kotlin.ir.backend.js.l" +
      "ower.serialization.metadata.IrExpression" +
      "\022]\n\006result\030\002 \002(\0132M.org.jetbrains.kotlin." +
      "ir.backend.js.lower.serialization.metada" +
      "ta.IrExpression\"n\n\013IrBlockBody\022_\n\tstatem" +
      "ent\030\001 \003(\0132L.org.jetbrains.kotlin.ir.back" +
      "end.js.lower.serialization.metadata.IrSt",
      "atement\"\321\001\n\007IrCatch\022g\n\017catch_parameter\030\001" +
      " \002(\0132N.org.jetbrains.kotlin.ir.backend.j" +
      "s.lower.serialization.metadata.IrDeclara" +
      "tion\022]\n\006result\030\002 \002(\0132M.org.jetbrains.kot" +
      "lin.ir.backend.js.lower.serialization.me" +
      "tadata.IrExpression\"u\n\017IrSyntheticBody\022b" +
      "\n\004kind\030\001 \002(\0162T.org.jetbrains.kotlin.ir.b" +
      "ackend.js.lower.serialization.metadata.I" +
      "rSyntheticBodyKind\"\321\005\n\013IrStatement\022a\n\013co" +
      "ordinates\030\001 \002(\0132L.org.jetbrains.kotlin.i",
      "r.backend.js.lower.serialization.metadat" +
      "a.Coordinates\022e\n\013declaration\030\002 \001(\0132N.org" +
      ".jetbrains.kotlin.ir.backend.js.lower.se" +
      "rialization.metadata.IrDeclarationH\000\022c\n\n" +
      "expression\030\003 \001(\0132M.org.jetbrains.kotlin." +
      "ir.backend.js.lower.serialization.metada" +
      "ta.IrExpressionH\000\022b\n\nblock_body\030\004 \001(\0132L." +
      "org.jetbrains.kotlin.ir.backend.js.lower" +
      ".serialization.metadata.IrBlockBodyH\000\022[\n" +
      "\006branch\030\005 \001(\0132I.org.jetbrains.kotlin.ir.",
      "backend.js.lower.serialization.metadata." +
      "IrBranchH\000\022Y\n\005catch\030\006 \001(\0132H.org.jetbrain" +
      "s.kotlin.ir.backend.js.lower.serializati" +
      "on.metadata.IrCatchH\000\022j\n\016synthetic_body\030" +
      "\007 \001(\0132P.org.jetbrains.kotlin.ir.backend." +
      "js.lower.serialization.metadata.IrSynthe" +
      "ticBodyH\000B\013\n\tstatement*\266\002\n\014IrSymbolKind\022" +
      "\023\n\017FUNCTION_SYMBOL\020\001\022\026\n\022CONSTRUCTOR_SYMB" +
      "OL\020\002\022\025\n\021ENUM_ENTRY_SYMBOL\020\003\022\020\n\014FIELD_SYM" +
      "BOL\020\004\022\032\n\026VALUE_PARAMETER_SYMBOL\020\005\022\033\n\027RET",
      "URNABLE_BLOCK_SYMBOL\020\006\022\020\n\014CLASS_SYMBOL\020\007" +
      "\022\031\n\025TYPE_PARAMETER_SYMBOL\020\010\022\023\n\017VARIABLE_" +
      "SYMBOL\020\t\022\031\n\025ANONYMOUS_INIT_SYMBOL\020\n\022\033\n\027S" +
      "TANDALONE_FIELD_SYMBOL\020\013\022\035\n\031RECEIVER_PAR" +
      "AMETER_SYMBOL\020\014**\n\016IrTypeVariance\022\006\n\002IN\020" +
      "\000\022\007\n\003OUT\020\001\022\007\n\003INV\020\002*\310\001\n\016IrTypeOperator\022\010" +
      "\n\004CAST\020\001\022\021\n\rIMPLICIT_CAST\020\002\022\024\n\020IMPLICIT_" +
      "NOTNULL\020\003\022\035\n\031IMPLICIT_COERCION_TO_UNIT\020\004" +
      "\022\035\n\031IMPLICIT_INTEGER_COERCION\020\005\022\r\n\tSAFE_" +
      "CAST\020\006\022\016\n\nINSTANCEOF\020\007\022\022\n\016NOT_INSTANCEOF",
      "\020\010\022\022\n\016SAM_CONVERSION\020\t*g\n\tClassKind\022\t\n\005C" +
      "LASS\020\001\022\r\n\tINTERFACE\020\002\022\016\n\nENUM_CLASS\020\003\022\016\n" +
      "\nENUM_ENTRY\020\004\022\024\n\020ANNOTATION_CLASS\020\005\022\n\n\006O" +
      "BJECT\020\006*a\n\014ModalityKind\022\022\n\016FINAL_MODALIT" +
      "Y\020\001\022\023\n\017SEALED_MODALITY\020\002\022\021\n\rOPEN_MODALIT" +
      "Y\020\003\022\025\n\021ABSTRACT_MODALITY\020\004*8\n\023IrSyntheti" +
      "cBodyKind\022\017\n\013ENUM_VALUES\020\001\022\020\n\014ENUM_VALUE" +
      "OF\020\002B\025B\023DebugIrKlibProtoBuf"
    };
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public org.jetbrains.kotlin.protobuf.ExtensionRegistry assignDescriptors(
              org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorReference_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorReference_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorReference_descriptor,
        new java.lang.String[] { "PackageFqName", "ClassFqName", "Name", "UniqId", "IsGetter", "IsSetter", "IsBackingField", "IsFakeOverride", "IsDefaultConstructor", "IsEnumEntry", "IsEnumSpecial", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_UniqId_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_UniqId_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_UniqId_descriptor,
        new java.lang.String[] { "Index", "IsLocal", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Coordinates_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Coordinates_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Coordinates_descriptor,
        new java.lang.String[] { "StartOffset", "EndOffset", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationContainer_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationContainer_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationContainer_descriptor,
        new java.lang.String[] { "Declaration", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FileEntry_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FileEntry_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FileEntry_descriptor,
        new java.lang.String[] { "Name", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFile_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFile_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFile_descriptor,
        new java.lang.String[] { "DeclarationId", "FileEntry", "FqName", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrModule_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrModule_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrModule_descriptor,
        new java.lang.String[] { "Name", "File", "SymbolTable", "TypeTable", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolData_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolData_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolData_descriptor,
        new java.lang.String[] { "Kind", "UniqId", "TopLevelUniqId", "Fqname", "DescriptorReference", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbol_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbol_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbol_descriptor,
        new java.lang.String[] { "Index", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolTable_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSymbolTable_descriptor,
        new java.lang.String[] { "Symbols", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Annotations_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Annotations_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Annotations_descriptor,
        new java.lang.String[] { "Annotation", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_TypeArguments_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_TypeArguments_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_TypeArguments_descriptor,
        new java.lang.String[] { "TypeArgument", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStarProjection_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStarProjection_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStarProjection_descriptor,
        new java.lang.String[] { "Void", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeProjection_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeProjection_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeProjection_descriptor,
        new java.lang.String[] { "Variance", "Type", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeArgument_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeArgument_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeArgument_descriptor,
        new java.lang.String[] { "Star", "Type", "Kind", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSimpleType_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSimpleType_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSimpleType_descriptor,
        new java.lang.String[] { "Annotations", "Classifier", "HasQuestionMark", "Argument", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDynamicType_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDynamicType_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDynamicType_descriptor,
        new java.lang.String[] { "Annotations", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrErrorType_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrErrorType_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrErrorType_descriptor,
        new java.lang.String[] { "Annotations", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrType_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrType_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrType_descriptor,
        new java.lang.String[] { "Simple", "Dynamic", "Error", "Kind", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeTable_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeTable_descriptor,
        new java.lang.String[] { "Types", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeIndex_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeIndex_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeIndex_descriptor,
        new java.lang.String[] { "Index", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBreak_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBreak_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBreak_descriptor,
        new java.lang.String[] { "LoopId", "Label", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlock_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlock_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlock_descriptor,
        new java.lang.String[] { "IsLambdaOrigin", "Statement", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_MemberAccessCommon_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_MemberAccessCommon_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_MemberAccessCommon_descriptor,
        new java.lang.String[] { "DispatchReceiver", "ExtensionReceiver", "ValueArgument", "TypeArguments", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCall_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCall_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCall_descriptor,
        new java.lang.String[] { "Kind", "Symbol", "MemberAccess", "Super", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionReference_descriptor =
      getDescriptor().getMessageTypes().get(25);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionReference_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionReference_descriptor,
        new java.lang.String[] { "Symbol", "Origin", "MemberAccess", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrPropertyReference_descriptor =
      getDescriptor().getMessageTypes().get(26);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrPropertyReference_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrPropertyReference_descriptor,
        new java.lang.String[] { "Field", "Getter", "Setter", "Origin", "MemberAccess", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrComposite_descriptor =
      getDescriptor().getMessageTypes().get(27);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrComposite_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrComposite_descriptor,
        new java.lang.String[] { "Statement", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClassReference_descriptor =
      getDescriptor().getMessageTypes().get(28);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClassReference_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClassReference_descriptor,
        new java.lang.String[] { "ClassSymbol", "ClassType", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConst_descriptor =
      getDescriptor().getMessageTypes().get(29);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConst_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConst_descriptor,
        new java.lang.String[] { "Null", "Boolean", "Char", "Byte", "Short", "Int", "Long", "Float", "Double", "String", "Value", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrContinue_descriptor =
      getDescriptor().getMessageTypes().get(30);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrContinue_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrContinue_descriptor,
        new java.lang.String[] { "LoopId", "Label", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDelegatingConstructorCall_descriptor =
      getDescriptor().getMessageTypes().get(31);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDelegatingConstructorCall_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDelegatingConstructorCall_descriptor,
        new java.lang.String[] { "Symbol", "MemberAccess", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDoWhile_descriptor =
      getDescriptor().getMessageTypes().get(32);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDoWhile_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDoWhile_descriptor,
        new java.lang.String[] { "Loop", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumConstructorCall_descriptor =
      getDescriptor().getMessageTypes().get(33);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumConstructorCall_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumConstructorCall_descriptor,
        new java.lang.String[] { "Symbol", "MemberAccess", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetClass_descriptor =
      getDescriptor().getMessageTypes().get(34);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetClass_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetClass_descriptor,
        new java.lang.String[] { "Argument", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetEnumValue_descriptor =
      getDescriptor().getMessageTypes().get(35);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetEnumValue_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetEnumValue_descriptor,
        new java.lang.String[] { "Symbol", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FieldAccessCommon_descriptor =
      getDescriptor().getMessageTypes().get(36);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FieldAccessCommon_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_FieldAccessCommon_descriptor,
        new java.lang.String[] { "Symbol", "Super", "Receiver", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetField_descriptor =
      getDescriptor().getMessageTypes().get(37);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetField_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetField_descriptor,
        new java.lang.String[] { "FieldAccess", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetValue_descriptor =
      getDescriptor().getMessageTypes().get(38);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetValue_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetValue_descriptor,
        new java.lang.String[] { "Symbol", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetObject_descriptor =
      getDescriptor().getMessageTypes().get(39);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetObject_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrGetObject_descriptor,
        new java.lang.String[] { "Symbol", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrInstanceInitializerCall_descriptor =
      getDescriptor().getMessageTypes().get(40);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrInstanceInitializerCall_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrInstanceInitializerCall_descriptor,
        new java.lang.String[] { "Symbol", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Loop_descriptor =
      getDescriptor().getMessageTypes().get(41);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Loop_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Loop_descriptor,
        new java.lang.String[] { "LoopId", "Condition", "Label", "Body", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrReturn_descriptor =
      getDescriptor().getMessageTypes().get(42);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrReturn_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrReturn_descriptor,
        new java.lang.String[] { "ReturnTarget", "Value", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetField_descriptor =
      getDescriptor().getMessageTypes().get(43);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetField_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetField_descriptor,
        new java.lang.String[] { "FieldAccess", "Value", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetVariable_descriptor =
      getDescriptor().getMessageTypes().get(44);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetVariable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSetVariable_descriptor,
        new java.lang.String[] { "Symbol", "Value", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSpreadElement_descriptor =
      getDescriptor().getMessageTypes().get(45);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSpreadElement_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSpreadElement_descriptor,
        new java.lang.String[] { "Expression", "Coordinates", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStringConcat_descriptor =
      getDescriptor().getMessageTypes().get(46);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStringConcat_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStringConcat_descriptor,
        new java.lang.String[] { "Argument", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrThrow_descriptor =
      getDescriptor().getMessageTypes().get(47);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrThrow_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrThrow_descriptor,
        new java.lang.String[] { "Value", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTry_descriptor =
      getDescriptor().getMessageTypes().get(48);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTry_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTry_descriptor,
        new java.lang.String[] { "Result", "Catch", "Finally", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeOp_descriptor =
      getDescriptor().getMessageTypes().get(49);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeOp_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeOp_descriptor,
        new java.lang.String[] { "Operator", "Operand", "Argument", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVararg_descriptor =
      getDescriptor().getMessageTypes().get(50);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVararg_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVararg_descriptor,
        new java.lang.String[] { "ElementType", "Element", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVarargElement_descriptor =
      getDescriptor().getMessageTypes().get(51);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVarargElement_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVarargElement_descriptor,
        new java.lang.String[] { "Expression", "SpreadElement", "VarargElement", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhen_descriptor =
      getDescriptor().getMessageTypes().get(52);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhen_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhen_descriptor,
        new java.lang.String[] { "Branch", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhile_descriptor =
      getDescriptor().getMessageTypes().get(53);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhile_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrWhile_descriptor,
        new java.lang.String[] { "Loop", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrOperation_descriptor =
      getDescriptor().getMessageTypes().get(54);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrOperation_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrOperation_descriptor,
        new java.lang.String[] { "Block", "Break", "Call", "ClassReference", "Composite", "Const", "Continue", "DelegatingConstructorCall", "DoWhile", "EnumConstructorCall", "FunctionReference", "GetClass", "GetEnumValue", "GetField", "GetObject", "GetValue", "InstanceInitializerCall", "PropertyReference", "Return", "SetField", "SetVariable", "StringConcat", "Throw", "Try", "TypeOp", "Vararg", "When", "While", "Operation", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrExpression_descriptor =
      getDescriptor().getMessageTypes().get(55);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrExpression_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrExpression_descriptor,
        new java.lang.String[] { "Operation", "Type", "Coordinates", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_NullableIrExpression_descriptor =
      getDescriptor().getMessageTypes().get(56);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_NullableIrExpression_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_NullableIrExpression_descriptor,
        new java.lang.String[] { "Expression", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeAlias_descriptor =
      getDescriptor().getMessageTypes().get(57);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeAlias_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeAlias_descriptor,
        new java.lang.String[] { });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunction_descriptor =
      getDescriptor().getMessageTypes().get(58);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunction_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunction_descriptor,
        new java.lang.String[] { "Symbol", "Base", "Modality", "IsTailrec", "IsSuspend", "Overridden", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionBase_descriptor =
      getDescriptor().getMessageTypes().get(59);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionBase_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrFunctionBase_descriptor,
        new java.lang.String[] { "Name", "Visibility", "IsInline", "IsExternal", "TypeParameters", "DispatchReceiver", "ExtensionReceiver", "ValueParameter", "Body", "ReturnType", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConstructor_descriptor =
      getDescriptor().getMessageTypes().get(60);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConstructor_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrConstructor_descriptor,
        new java.lang.String[] { "Symbol", "Base", "IsPrimary", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrField_descriptor =
      getDescriptor().getMessageTypes().get(61);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrField_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrField_descriptor,
        new java.lang.String[] { "Symbol", "Initializer", "Name", "Visibility", "IsFinal", "IsExternal", "IsStatic", "Type", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrProperty_descriptor =
      getDescriptor().getMessageTypes().get(62);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrProperty_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrProperty_descriptor,
        new java.lang.String[] { "Descriptor", "Name", "Visibility", "Modality", "IsVar", "IsConst", "IsLateinit", "IsDelegated", "IsExternal", "BackingField", "Getter", "Setter", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVariable_descriptor =
      getDescriptor().getMessageTypes().get(63);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVariable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrVariable_descriptor,
        new java.lang.String[] { "Name", "Symbol", "Type", "IsVar", "IsConst", "IsLateinit", "Initializer", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrValueParameter_descriptor =
      getDescriptor().getMessageTypes().get(64);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrValueParameter_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrValueParameter_descriptor,
        new java.lang.String[] { "Symbol", "Name", "Index", "Type", "VarargElementType", "IsCrossinline", "IsNoinline", "DefaultValue", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameter_descriptor =
      getDescriptor().getMessageTypes().get(65);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameter_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameter_descriptor,
        new java.lang.String[] { "Symbol", "Name", "Index", "Variance", "SuperType", "IsReified", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameterContainer_descriptor =
      getDescriptor().getMessageTypes().get(66);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameterContainer_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrTypeParameterContainer_descriptor,
        new java.lang.String[] { "TypeParameter", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClass_descriptor =
      getDescriptor().getMessageTypes().get(67);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClass_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrClass_descriptor,
        new java.lang.String[] { "Symbol", "Name", "Kind", "Visibility", "Modality", "IsCompanion", "IsInner", "IsData", "IsExternal", "IsInline", "ThisReceiver", "TypeParameters", "DeclarationContainer", "SuperType", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumEntry_descriptor =
      getDescriptor().getMessageTypes().get(68);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumEntry_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrEnumEntry_descriptor,
        new java.lang.String[] { "Symbol", "Initializer", "CorrespondingClass", "Name", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrAnonymousInit_descriptor =
      getDescriptor().getMessageTypes().get(69);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrAnonymousInit_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrAnonymousInit_descriptor,
        new java.lang.String[] { "Symbol", "Body", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarator_descriptor =
      getDescriptor().getMessageTypes().get(70);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarator_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarator_descriptor,
        new java.lang.String[] { "IrAnonymousInit", "IrClass", "IrConstructor", "IrEnumEntry", "IrField", "IrFunction", "IrProperty", "IrTypeAlias", "IrTypeParameter", "IrVariable", "IrValueParameter", "Declarator", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationOrigin_descriptor =
      getDescriptor().getMessageTypes().get(71);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationOrigin_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclarationOrigin_descriptor,
        new java.lang.String[] { "Name", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclaration_descriptor =
      getDescriptor().getMessageTypes().get(72);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclaration_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrDeclaration_descriptor,
        new java.lang.String[] { "Origin", "Coordinates", "Annotations", "Declarator", "FileName", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBranch_descriptor =
      getDescriptor().getMessageTypes().get(73);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBranch_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBranch_descriptor,
        new java.lang.String[] { "Condition", "Result", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlockBody_descriptor =
      getDescriptor().getMessageTypes().get(74);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlockBody_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrBlockBody_descriptor,
        new java.lang.String[] { "Statement", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCatch_descriptor =
      getDescriptor().getMessageTypes().get(75);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCatch_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrCatch_descriptor,
        new java.lang.String[] { "CatchParameter", "Result", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSyntheticBody_descriptor =
      getDescriptor().getMessageTypes().get(76);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSyntheticBody_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrSyntheticBody_descriptor,
        new java.lang.String[] { "Kind", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStatement_descriptor =
      getDescriptor().getMessageTypes().get(77);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStatement_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_IrStatement_descriptor,
        new java.lang.String[] { "Coordinates", "Declaration", "Expression", "BlockBody", "Branch", "Catch", "SyntheticBody", "Statement", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}